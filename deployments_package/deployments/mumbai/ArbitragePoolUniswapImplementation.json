{
  "address": "0x6486A8242374134840F0040F858bf2631c1Cc088",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_apToken",
          "type": "address"
        }
      ],
      "name": "APtokenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "Arbitrage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_apAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_apAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint24[]",
          "name": "_fees",
          "type": "uint24[]"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "arbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_collateralTokens",
          "type": "address[]"
        }
      ],
      "name": "batchApproveRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralToAPToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositsAndRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ITroveFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "getAPtokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "transferExtraCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd915113b153802d4d5d520e0f775efb2f2e7b814b23ffb6bcb53f648fa5af22",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0x6486A8242374134840F0040F858bf2631c1Cc088",
    "transactionIndex": 0,
    "gasUsed": "3783091",
    "logsBloom": "0x
    "blockHash": "0xa51ad5865c1b0752a8747c7b2ce43f6edf737bcbaae818a714ea1212bd7f19a9",
    "transactionHash": "0xcd915113b153802d4d5d520e0f775efb2f2e7b814b23ffb6bcb53f648fa5af22",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31363446,
        "transactionHash": "0xcd915113b153802d4d5d520e0f775efb2f2e7b814b23ffb6bcb53f648fa5af22",
        "address": "0x6486A8242374134840F0040F858bf2631c1Cc088",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xa51ad5865c1b0752a8747c7b2ce43f6edf737bcbaae818a714ea1212bd7f19a9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31363446,
        "transactionHash": "0xcd915113b153802d4d5d520e0f775efb2f2e7b814b23ffb6bcb53f648fa5af22",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000019335095cdb628300000000000000000000000000000000000000000000000036d531dc3c3a170400000000000000000000000000000000000000000000022d80e1b3b2396d2f340000000000000000000000000000000000000000000000003541fcd2df5eb48100000000000000000000000000000000000000000000022d8274e8bb964891b7",
        "logIndex": 1,
        "blockHash": "0xa51ad5865c1b0752a8747c7b2ce43f6edf737bcbaae818a714ea1212bd7f19a9"
      }
    ],
    "blockNumber": 31363446,
    "cumulativeGasUsed": "3783091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf6063b2A386397C6fD5bb468523328bD363Cf614",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 1,
  "solcInputHash": "dea2b32fd21416889096b7b2b54df7fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_apToken\",\"type\":\"address\"}],\"name\":\"APtokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"Arbitrage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_apAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_apAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"_fees\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralTokens\",\"type\":\"address[]\"}],\"name\":\"batchApproveRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralToAPToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositsAndRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ITroveFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"getAPtokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transferExtraCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToken(address)\":{\"details\":\"to add new supported collateral by deploying APtoken for it\",\"params\":{\"_collateralToken\":\"collateral to be added\"}},\"arbitrage(uint256,address[],uint24[],uint256)\":{\"details\":\"to do arbitrage\",\"params\":{\"_amountIn\":\"start amount\",\"_fees\":\"the fees for the swap\",\"_path\":\"the path for the swap\",\"expiry\":\"the timeout for the swap\"}},\"batchApproveRouter(address[])\":{\"details\":\"approves the list collateral tokens on Router to enable arbitrage, should be called when the router was changed.\",\"params\":{\"_collateralTokens\":\"list of collateralToken addresses\"}},\"deposit(address,uint256)\":{\"details\":\"to deposit collateral into ArbitragePool and get APtoken\",\"params\":{\"_amount\":\"amount to deposit\",\"_collateralToken\":\"amount to deposit\"}},\"getAPtokenPrice(address)\":{\"details\":\"calculates the price of APtoken by baseToken/apToken.supply()\",\"params\":{\"_collateralToken\":\"IERC20 address of base token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferExtraCollateral(address,address)\":{\"details\":\"moves extra collateral that was sent by mistake to the contract from the balance\",\"params\":{\"_collateralToken\":\"collateralToken addresses\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address,uint256)\":{\"details\":\"to withdraw collateral from ArbitragePool by redeeming APtoken\",\"params\":{\"_amount\":\"amount of APtoken to give\",\"_collateralToken\":\"amount to withdraw\"}}},\"stateVariables\":{\"collateralToAPToken\":{\"details\":\"stores APtoken address for each token\"},\"depositsAndRewards\":{\"details\":\"stores totalDeposit + rewards value for each collateral\"}},\"title\":\"is used to liquidate troves and reward depositors with collateral redeemed\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arbitrage-pool-uniswap.sol\":\"ArbitragePoolUniswap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x7554657b651d884f77e786ef65ea098bebbcfedda5ca06126cf7825d6121a368\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe14e576c8651a2409b41db02dd05638d0ceced067a4dbc2918f448e0cb2397e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc0367f1b6159357e7e84c65ce615e3e70d2b288473cbfd8e68ff8b0fa140dec5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb671f26ab94e1519cbd14bf10f094873a4d94fe92892666cf3e8846eecbb73fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/APToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./mintable-token.sol\\\";\\n\\n/// @title implements minting/burning functionality for owner\\ncontract APToken is MintableToken {\\n  /// @dev address of the token, it is used to be swapped against in ArbitragePool\\n  address public baseToken;\\n\\n  // solhint-disable-next-line func-visibility\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address _baseToken\\n  ) MintableToken(name, symbol) {\\n    baseToken = _baseToken;\\n  }\\n}\\n\",\"keccak256\":\"0x37eebf9bc7b92d42c258a407c11784cb8407df4128117a1bdbbcad1d7f75820d\",\"license\":\"MIT\"},\"contracts/arbitrage-pool-uniswap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/uniswap/IUniswapV3Router.sol\\\";\\nimport \\\"./interfaces/IStabilityPoolUniswap.sol\\\";\\nimport \\\"./interfaces/ITroveFactory.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./APToken.sol\\\";\\nimport \\\"./utils/BONQMath.sol\\\";\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./uniswap-v3-arbitrage-function.sol\\\";\\n\\n/// @title is used to liquidate troves and reward depositors with collateral redeemed\\ncontract ArbitragePoolUniswap is UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, Constants, UniswapV3Arbitrage {\\n  using BONQMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  /// @dev stores APtoken address for each token\\n  mapping(address => IMintableToken) public collateralToAPToken;\\n  /// @dev stores totalDeposit + rewards value for each collateral\\n  mapping(address => uint256) public depositsAndRewards;\\n\\n  ITroveFactory public immutable factory;\\n  IUniswapV3Router public immutable router;\\n\\n  event Deposit(address _collateralToken, address _contributor, uint256 _amount, uint256 _apAmount);\\n  event Withdraw(address _collateralToken, address _contributor, uint256 _amount, uint256 _apAmount);\\n  event Arbitrage(address _collateralToken, address[] _path, uint256 _amountIn, uint256 _amountOut);\\n  event APtokenDeployed(address _collateralToken, address _apToken);\\n\\n  // solhint-disable-next-line func-visibility\\n  constructor(address _factory, address _router) {\\n    require(_factory != address(0x0), \\\"55115b trove factory must not be address 0x0\\\");\\n    require(_router != address(0x0), \\\"55115b router address must not be address 0x0\\\");\\n    factory = ITroveFactory(_factory);\\n    router = IUniswapV3Router(_router);\\n    // to prevent contract implementation to be reinitialized by someone else\\n    _disableInitializers();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n  }\\n\\n  /// @dev make the contract upgradeable by its owner\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  function name() public view virtual returns (string memory) {\\n    return \\\"ArbitragePoolUniswap\\\";\\n  }\\n\\n  /// @dev calculates the price of APtoken by baseToken/apToken.supply()\\n  /// @param  _collateralToken IERC20 address of base token\\n  /// @param  _apToken IMintableToken address of AP token\\n  function _apTokenPrice(address _collateralToken, IMintableToken _apToken) internal view returns (uint256) {\\n    uint256 colDepositAndRewards = depositsAndRewards[_collateralToken];\\n    uint256 apSupply = _apToken.totalSupply();\\n    if (colDepositAndRewards == 0 || apSupply == 0) return DECIMAL_PRECISION;\\n    return (colDepositAndRewards * DECIMAL_PRECISION) / _apToken.totalSupply();\\n  }\\n\\n  /// @dev calculates the price of APtoken by baseToken/apToken.supply()\\n  /// @param  _collateralToken IERC20 address of base token\\n  function getAPtokenPrice(address _collateralToken) external view returns (uint256) {\\n    IMintableToken apToken = collateralToAPToken[_collateralToken];\\n    return _apTokenPrice(_collateralToken, apToken);\\n  }\\n\\n  /// @dev to deposit collateral into ArbitragePool and get APtoken\\n  /// @param  _collateralToken amount to deposit\\n  /// @param  _amount amount to deposit\\n  function deposit(address _collateralToken, uint256 _amount) public nonReentrant {\\n    IMintableToken apToken = collateralToAPToken[_collateralToken];\\n    require(address(apToken) != address(0), \\\"d7db9 token must have APtoken\\\");\\n    require(_amount > 0, \\\"d7db9 deposit amount must be bigger than zero\\\");\\n\\n    uint256 startPrice = _apTokenPrice(_collateralToken, apToken);\\n    require(IERC20(_collateralToken).transferFrom(msg.sender, address(this), _amount), \\\"150aa0 transfer from failed\\\");\\n    uint256 amountToMint = (_amount * DECIMAL_PRECISION) / startPrice;\\n    apToken.mint(msg.sender, amountToMint);\\n    depositsAndRewards[_collateralToken] += _amount;\\n\\n    emit Deposit(_collateralToken, msg.sender, _amount, amountToMint);\\n  }\\n\\n  /// @dev to withdraw collateral from ArbitragePool by redeeming APtoken\\n  /// @param  _collateralToken amount to withdraw\\n  /// @param  _amount amount of APtoken to give\\n  function withdraw(address _collateralToken, uint256 _amount) public nonReentrant {\\n    IMintableToken apToken = collateralToAPToken[_collateralToken];\\n    require(_amount > 0, \\\"3b329 withdrawal amount must be bigger than 0\\\");\\n    // firstly transfer AP token, then calculating collateral amount\\n    apToken.transferFrom(msg.sender, address(this), _amount);\\n    uint256 amountOut = (_amount * _apTokenPrice(_collateralToken, apToken)) / DECIMAL_PRECISION;\\n    // firstly burn AP token, decrease totalDeposit then transfer collateral\\n    apToken.burn(_amount);\\n    depositsAndRewards[_collateralToken] -= amountOut;\\n    IERC20(_collateralToken).safeTransfer(msg.sender, amountOut);\\n\\n    emit Withdraw(_collateralToken, msg.sender, amountOut, _amount);\\n  }\\n\\n  /// @dev to do arbitrage\\n  /// @param  _amountIn start amount\\n  /// @param  _path the path for the swap\\n  /// @param  _fees the fees for the swap\\n  /// @param  expiry the timeout for the swap\\n  function arbitrage(\\n    uint256 _amountIn,\\n    address[] calldata _path,\\n    uint24[] calldata _fees,\\n    uint256 expiry\\n  ) public nonReentrant {\\n    uint256 amountOut;\\n\\n    if (_path[0] == address(factory.stableCoin())) {\\n      IMintableToken stableCoin = factory.stableCoin();\\n      uint256 startBalance = stableCoin.balanceOf(address(this));\\n      IStabilityPoolUniswap(address(factory.stabilityPool())).arbitrage(_amountIn, _path, _fees, expiry);\\n      stableCoin.transfer(msg.sender, stableCoin.balanceOf(address(this)) - startBalance);\\n    } else {\\n      amountOut = _arbitrage(router, _amountIn, _path, _fees, expiry);\\n      uint256 senderShare = (amountOut * factory.arbitrageShareRatio()) / DECIMAL_PRECISION;\\n      amountOut -= senderShare;\\n      IERC20(_path[0]).transfer(msg.sender, senderShare);\\n      depositsAndRewards[_path[0]] += amountOut;\\n      emit Arbitrage(_path[0], _path, _amountIn, amountOut);\\n    }\\n  }\\n\\n  /// @dev to add new supported collateral by deploying APtoken for it\\n  /// @param  _collateralToken collateral to be added\\n  function addToken(address _collateralToken) public {\\n    require(address(collateralToAPToken[_collateralToken]) == address(0x0), \\\"ac342 the token has already been added\\\");\\n    IERC20Metadata collateralToken = IERC20Metadata(_collateralToken);\\n    string memory apTokenName = string(abi.encodePacked(\\\"APToken for \\\", collateralToken.name()));\\n    string memory apTokenSymbol = string(abi.encodePacked(\\\"AP\\\", collateralToken.symbol()));\\n    APToken newAPtoken = new APToken(apTokenName, apTokenSymbol, _collateralToken);\\n    address newAPtokenAddress = address(newAPtoken);\\n    collateralToAPToken[_collateralToken] = IMintableToken(newAPtokenAddress);\\n    collateralToken.safeApprove(address(router), MAX_INT);\\n\\n    emit APtokenDeployed(_collateralToken, newAPtokenAddress);\\n  }\\n\\n  /// @dev approves the list collateral tokens on Router to enable arbitrage,\\n  /// should be called when the router was changed.\\n  /// @param  _collateralTokens list of collateralToken addresses\\n  function batchApproveRouter(address[] calldata _collateralTokens) public {\\n    address routerAddress = address(router);\\n    uint256 i;\\n    for (i; i < _collateralTokens.length; i++) {\\n      IERC20 collateralToken = IERC20(_collateralTokens[i]);\\n      collateralToken.approve(routerAddress, MAX_INT);\\n    }\\n  }\\n\\n  /// @dev moves extra collateral that was sent by mistake to the contract from the balance\\n  /// @param  _collateralToken collateralToken addresses\\n  function transferExtraCollateral(address _collateralToken, address _recipient) public onlyOwner {\\n    IERC20 collateralToken = IERC20(_collateralToken);\\n    uint256 colBalance = collateralToken.balanceOf(address(this));\\n    uint256 colDepositAndRewards = depositsAndRewards[_collateralToken];\\n    collateralToken.safeTransfer(_recipient, colBalance - colDepositAndRewards);\\n  }\\n}\\n\",\"keccak256\":\"0x246f58172e054efb029018665740fa350d44c18840929b8fc0b67e491ec9d13f\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFeeRecipient {\\n  function baseRate() external view returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view returns (uint256);\\n\\n  /**\\n   * @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n   * fees from the msg.sender\\n   * @param _amount the amount in Wei of fees to transfer\\n   */\\n  function takeFees(uint256 _amount) external returns (bool);\\n\\n  function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x956def5f462011bcfa336dc961b70711817e27682371d5c0752099ecd03374cc\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface ILiquidationPool {\\n  function collateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liqTokenRate() external view returns (uint256);\\n\\n  function claimCollateralAndDebt(uint256 _unclaimedCollateral, uint256 _unclaimedDebt) external;\\n\\n  function approveTrove(address _trove) external;\\n\\n  function unapproveTrove(address _trove) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x7e7c6bfd1345b762f1373273b6fc007cbda9b1c16e8466bf98110ad59f83906f\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IServiceFeeGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITrove.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\n\\ninterface IServiceFeeGenerator {\\n  function trove() external view returns (ITrove);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function feeAmount() external view returns (uint256);\\n\\n  function feeInterval() external view returns (uint256);\\n\\n  function lastPayTime() external view returns (uint256);\\n\\n  function isPaid() external view returns (bool);\\n\\n  function initialized() external view returns (bool);\\n\\n  function initialize(\\n    ITrove _trove,\\n    uint256 _feeAmount,\\n    uint256 _feeInterval\\n  ) external;\\n\\n  /**\\n   * @dev is called to check if the interval passed and pay fee in that case\\n   * takes fees as debt from the trove set\\n   */\\n  function withdrawFee(address _newNextTrove) external;\\n\\n  event Activated(address indexed activator, address indexed trove, uint256 feeAmount, uint256 feeInterval);\\n  event FeeCollected(uint256 indexed periodStart, uint256 indexed periodEnd);\\n  event Deactivated(address indexed deactivator, uint256 indexed timestamp);\\n}\\n\",\"keccak256\":\"0x6e3348710605ff00634eb475cd5d49aa34072ed0911ffc1731e1961a326b1d79\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IStabilityPoolBase {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function totalDeposit() external view returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function redeemReward() external;\\n\\n  function liquidate() external;\\n\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external;\\n\\n  function setBONQAmountForRewards() external;\\n\\n  function getDepositorBONQGain(address _depositor) external view returns (uint256);\\n\\n  function getWithdrawableDeposit(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf604d75783438cc84d31e72e6becbf359d4233e1d57bacf399767563507750ba\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IStabilityPoolBase.sol\\\";\\n\\ninterface IStabilityPoolUniswap is IStabilityPoolBase {\\n  function arbitrage(\\n    uint256 _amountIn,\\n    address[] calldata _path,\\n    uint24[] calldata _fees,\\n    uint256 expiry\\n  ) external returns (uint256);\\n\\n  function setRouter(address _router) external;\\n}\\n\",\"keccak256\":\"0x41fa774168e9e602093474dbff6ac9f49bea2ce1f50052ca630a8082f4336e01\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n  struct TokenInfo {\\n    address priceFeed;\\n    uint256 mcr;\\n    uint256 mrf; // Maximum Redemption Fee\\n  }\\n\\n  function tokenPriceFeed(address) external view returns (address);\\n\\n  function tokenPrice(address _token) external view returns (uint256);\\n\\n  function mcr(address _token) external view returns (uint256);\\n\\n  function mrf(address _token) external view returns (uint256);\\n\\n  function setTokenPriceFeed(\\n    address _token,\\n    address _priceFeed,\\n    uint256 _mcr,\\n    uint256 _maxRedemptionFeeBasisPoints\\n  ) external;\\n\\n  function emitPriceUpdate(\\n    address _token,\\n    uint256 _priceAverage,\\n    uint256 _pricePoint\\n  ) external;\\n\\n  event NewTokenPriceFeed(address _token, address _priceFeed, string _name, string _symbol, uint256 _mcr, uint256 _mrf);\\n  event PriceUpdate(address token, uint256 priceAverage, uint256 pricePoint);\\n}\\n\",\"keccak256\":\"0x1464b339e10e5bcdff774c69d9092696bc4e64c2a1fcbe66120fcdcd72d17a2d\",\"license\":\"MIT\"},\"contracts/interfaces/ITrove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface ITrove is IOwnable, IAccessControlEnumerable {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function token() external view returns (IERC20);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function OWNER_ROLE() external view returns (bytes32);\\n\\n  function addOwner(address _newOwner) external;\\n\\n  function removeOwner(address _ownerToRemove) external;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TOKEN_PRECISION() external view returns (uint256);\\n\\n  function mcr() external view returns (uint256);\\n\\n  function collateralization() external view returns (uint256);\\n\\n  function collateralValue() external view returns (uint256);\\n\\n  function collateral() external view returns (uint256);\\n\\n  function recordedCollateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liquidationReserve() external view returns (uint256);\\n\\n  function netDebt() external view returns (uint256);\\n\\n  function bonqStake() external view returns (uint256);\\n\\n  //  function rewardRatioSnapshot() external view returns (uint256);\\n\\n  function initialize(\\n    //    address _factory,\\n    address _token,\\n    address _troveOwner\\n  ) external;\\n\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) external;\\n\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function unstakeBONQ(uint256 _amount) external;\\n\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function repay(uint256 _amount, address _newNextTrove) external;\\n\\n  function redeem(address _recipient, address _newNextTrove) external returns (uint256 _stableAmount, uint256 _collateralRecieved);\\n\\n  function setArbitrageParticipation(bool _state) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x9906f3efa20161df4cccd50c931947c9daa7f69b6cd0b442f241db7b311ed47d\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITokenPriceFeed.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\nimport \\\"./IMintableTokenOwner.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\nimport \\\"./ILiquidationPool.sol\\\";\\nimport \\\"./IStabilityPoolBase.sol\\\";\\nimport \\\"./ITrove.sol\\\";\\nimport \\\"./IServiceFeeGenerator.sol\\\";\\n\\ninterface ITroveFactory {\\n  /* view */\\n  function lastTrove(address _trove) external view returns (address);\\n\\n  function firstTrove(address _trove) external view returns (address);\\n\\n  function nextTrove(address _token, address _trove) external view returns (address);\\n\\n  function prevTrove(address _token, address _trove) external view returns (address);\\n\\n  function containsTrove(address _token, address _trove) external view returns (bool);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function tokenOwner() external view returns (IMintableTokenOwner);\\n\\n  function tokenToPriceFeed() external view returns (ITokenPriceFeed);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function troveCount(address _token) external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function maxTroveBONQStake() external view returns (uint256);\\n\\n  function getReducedFeeAndRefundAmount(uint256 _fee, address _trove) external view returns (uint256 _reducedFee, uint256 _refundAmount);\\n\\n  function totalCollateral(address _token) external view returns (uint256);\\n\\n  function totalDebtForToken(address _token) external view returns (uint256);\\n\\n  function liquidationPool(address _token) external view returns (ILiquidationPool);\\n\\n  function stabilityPool() external view returns (IStabilityPoolBase);\\n\\n  function arbitragePool() external view returns (address);\\n\\n  function arbitrageShareRatio() external view returns (uint256);\\n\\n  function getRedemptionFeeRatio(address _trove) external view returns (uint256);\\n\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) external pure returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  /* state changes*/\\n  function createTrove(address _token) external returns (ITrove trove);\\n\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) external;\\n\\n  function removeTrove(address _token, address _trove) external;\\n\\n  function insertTrove(address _trove, address _newNextTrove) external;\\n\\n  function createNewServiceFee(\\n    ITrove _trove,\\n    uint256 _feeAmount,\\n    uint256 _feeInterval\\n  ) external returns (IServiceFeeGenerator newServiceFee);\\n\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) external;\\n\\n  function updateTotalDebt(uint256 _amount, bool _borrow) external;\\n\\n  function setStabilityPool(address _stabilityPool) external;\\n\\n  function setArbitragePool(address _arbitragePool) external;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external;\\n\\n  function setMaxTroveBONQStake(uint256 _newAmount) external;\\n\\n  function increaseCollateralNative(address _trove, address _newNextTrove) external payable;\\n\\n  /* utils */\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) external;\\n\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external;\\n\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6730f1dcdb543d5d75b4276a5c4fe825afb5595a62ed1a2801b892d7d0ed3d97\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV3Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./callback/IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router is IUniswapV3SwapCallback {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// that may remain in the router after the swap.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// that may remain in the router after the swap.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x2c41f5add735de667889ca1158c93a627af6c0e0445cd7012297326860a76f23\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.4;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n  function uniswapV3SwapCallback(\\n    int256 amount0Delta,\\n    int256 amount1Delta,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xee4f56ce2cbed8925a76857f63f66ae819d5526715ef4fe8ca0ae6005f474817\",\"license\":\"GPL-2.0-or-later\"},\"contracts/mintable-token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title implements minting/burning functionality for owner\\ncontract MintableToken is ERC20, Ownable {\\n  // solhint-disable-next-line func-visibility\\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\n\\n  /// @dev mints tokens to the recipient, to be called from owner\\n  /// @param recipient address to mint\\n  /// @param amount amount to be minted\\n  function mint(address recipient, uint256 amount) public onlyOwner {\\n    _mint(recipient, amount);\\n  }\\n\\n  /// @dev burns token of specified amount from msg.sender\\n  /// @param amount to burn\\n  function burn(uint256 amount) public {\\n    _burn(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd81c8056ce543ff7e13f619f67aacf64aa4603221eb1f6023e2635aef39844f6\",\"license\":\"MIT\"},\"contracts/uniswap-v3-arbitrage-function.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/uniswap/IUniswapV3Router.sol\\\";\\n\\nabstract contract UniswapV3Arbitrage {\\n  /// @dev use the DEX router to trigger a swap that starts and ends with the stable coin and yields more coins than it\\n  /// @dev requied as input. This function could be subject to a reentrant attack from a malicious token in the DEX\\n  /// @param  _amountIn start amount\\n  /// @param  _path calldata[]\\n  /// @param  _fees calldata[] fees array in correct order\\n  function _arbitrage(\\n    IUniswapV3Router router,\\n    uint256 _amountIn,\\n    address[] calldata _path,\\n    uint24[] calldata _fees,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    require(_path[0] == _path[_path.length - 1], \\\"eafe9 must start and end with same coin\\\");\\n    require(block.timestamp < _deadline || _deadline == 0, \\\"eafe9 too late\\\");\\n\\n    IERC20 token = IERC20(_path[0]);\\n    // if the deadline was not set it is set to NOW - as the swap will happen in the same block it will be soon enough\\n    uint256 startBalance = token.balanceOf(address(this));\\n    // the swap must yield at least 1 coin (in ETH parlance: 1 Wei) more than what was put in and the TX has 10 minutes to execute\\n    IUniswapV3Router.ExactInputParams memory swapParams = IUniswapV3Router.ExactInputParams(_constructUniswapPath(_path, _fees), address(this), _amountIn, _amountIn + 1);\\n    router.exactInput(swapParams);\\n    uint256 amountOut = token.balanceOf(address(this)) - startBalance;\\n    return amountOut;\\n  }\\n\\n  /// @dev constructs uniswap swap path from arrays of tokens and pool fees\\n  /// @param  _path address[] of tokens\\n  /// @param  _fees uint24[] of pool fees\\n  function _constructUniswapPath(address[] memory _path, uint24[] memory _fees) private pure returns (bytes memory pathBytesString) {\\n    pathBytesString = abi.encodePacked(_path[0]);\\n    for (uint256 i = 0; i < _fees.length; i++) {\\n      pathBytesString = abi.encodePacked(pathBytesString, _fees[i], _path[i + 1]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5d4096f01fbb593ec65f29cbf46f7ce3e1ae76f2b5a3e104810f6692decf0885\",\"license\":\"MIT\"},\"contracts/utils/BONQMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary BONQMath {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant MINUTE_DECAY_FACTOR = 999_037_758_833_783_000;\\n\\n  /// @dev return the smaller of two numbers\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @dev return the bigger of two numbers\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Multiply two decimal numbers and use normal rounding rules:\\n   *  -round product up if 19'th mantissa digit >= 5\\n   *  -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n    uint256 prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by function that represent time in units of minutes:\\n   * 1) IFeeRecipient.calcDecayedBaseRate\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   * @param _base number to exponentially increase\\n   * @param _minutes power in minutes passed\\n   */\\n  function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n    if (_minutes > 525_600_000) {\\n      _minutes = 525_600_000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint256 y = DECIMAL_PRECISION;\\n    uint256 x = _base;\\n    uint256 n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n}\\n\",\"keccak256\":\"0x0b5672d93c340d884faa6b48b29db53f3efcd2edc03b87a2590d7fed5df7cf10\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n  uint256 public constant BORROWING_RATE = PERCENT_05;\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n}\\n\",\"keccak256\":\"0x6a665a01a9a7f729c66450e6b996c07ac47009851acacc6fcb11eb974ef20b5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052306080523480156200001557600080fd5b50604051620045de380380620045de833981016040819052620000389162000218565b6001600160a01b038216620000a95760405162461bcd60e51b815260206004820152602c60248201527f3535313135622074726f766520666163746f7279206d757374206e6f7420626560448201526b02061646472657373203078360a41b60648201526084015b60405180910390fd5b6001600160a01b038116620001175760405162461bcd60e51b815260206004820152602d60248201527f35353131356220726f757465722061646472657373206d757374206e6f74206260448201526c06520616464726573732030783609c1b6064820152608401620000a0565b6001600160a01b0380831660a052811660c052620001346200013c565b505062000250565b600054610100900460ff1615620001a65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608401620000a0565b60005460ff9081161015620001f9576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b03811681146200021357600080fd5b919050565b600080604083850312156200022c57600080fd5b6200023783620001fb565b91506200024760208401620001fb565b90509250929050565b60805160a05160c051614311620002cd6000396000818161055301528181610969015281816111ef01526116d20152600081816104ae01528181610e2601528181610ef201528181610fea01526112290152600081816105af015281816105fb01528181610a6501528181610aa80152610b7401526143116000f3fe608060405260043610620001be5760003560e01c806386fca95f11620000ff578063ad09014d1162000095578063d48bfca7116200006c578063d48bfca714620004d0578063f2fde38b14620004f5578063f3fef3a3146200051a578063f887ea40146200053f57600080fd5b8063ad09014d146200046a578063b85a8b201462000482578063c45a0155146200049a57600080fd5b8063a1fbb7cb11620000d6578063a1fbb7cb146200042d578063a20baee6146200040f578063abdc55411462000452578063aceb2d04146200036a57600080fd5b806386fca95f14620003ca5780638da5cb5b14620003ef578063923c1eec146200040f57600080fd5b80634933b9ee1162000175578063517ef1d7116200014c578063517ef1d7146200036a57806352d1902d1462000382578063715018a6146200039a5780638129fc1c14620003b257600080fd5b80634933b9ee14620002db5780634b1c143514620003005780634f1ef286146200035357600080fd5b806306fdde0314620001c3578063098d322814620002125780630a66859214620002395780633659cfe6146200025e57806345c7890a146200028557806347e7ef2414620002b6575b600080fd5b348015620001d057600080fd5b5060408051808201825260148152730417262697472616765506f6f6c556e69737761760641b6020820152905162000209919062002990565b60405180910390f35b3480156200021f57600080fd5b506200022a60001981565b60405190815260200162000209565b3480156200024657600080fd5b506200022a62000258366004620029bb565b62000575565b3480156200026b57600080fd5b50620002836200027d366004620029bb565b620005a5565b005b3480156200029257600080fd5b506200022a620002a4366004620029bb565b60fc6020526000908152604090205481565b348015620002c357600080fd5b5062000283620002d5366004620029db565b62000699565b348015620002e857600080fd5b5062000283620002fa36600462002a59565b62000967565b3480156200030d57600080fd5b506200033a6200031f366004620029bb565b60fb602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000209565b620002836200036436600462002b14565b62000a5b565b3480156200037757600080fd5b506200022a62000b33565b3480156200038f57600080fd5b506200022a62000b67565b348015620003a757600080fd5b506200028362000c1d565b348015620003bf57600080fd5b506200028362000c35565b348015620003d757600080fd5b5062000283620003e936600462002bb1565b62000d58565b348015620003fc57600080fd5b506097546001600160a01b03166200033a565b3480156200041c57600080fd5b506200022a670de0b6b3a764000081565b3480156200043a57600080fd5b50620002836200044c36600462002bef565b62000e18565b3480156200045f57600080fd5b506200022a62001462565b3480156200047757600080fd5b506200022a62001479565b3480156200048f57600080fd5b506200022a620014a9565b348015620004a757600080fd5b506200033a7f000000000000000000000000000000000000000000000000000000000000000081565b348015620004dd57600080fd5b5062000283620004ef366004620029bb565b620014c0565b3480156200050257600080fd5b506200028362000514366004620029bb565b62001745565b3480156200052757600080fd5b506200028362000539366004620029db565b620017c1565b3480156200054c57600080fd5b506200033a7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b03808216600090815260fb60205260408120549091166200059e8382620019f7565b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620005f95760405162461bcd60e51b8152600401620005f09062002c78565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200064460008051602062004295833981519152546001600160a01b031690565b6001600160a01b0316146200066d5760405162461bcd60e51b8152600401620005f09062002cc4565b620006788162001b40565b60408051600080825260208201909252620006969183919062001b4a565b50565b620006a362001cc7565b6001600160a01b03808316600090815260fb602052604090205416806200070d5760405162461bcd60e51b815260206004820152601d60248201527f643764623920746f6b656e206d7573742068617665204150746f6b656e0000006044820152606401620005f0565b60008211620007755760405162461bcd60e51b815260206004820152602d60248201527f6437646239206465706f73697420616d6f756e74206d7573742062652062696760448201526c676572207468616e207a65726f60981b6064820152608401620005f0565b6000620007838483620019f7565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038516906323b872dd906064016020604051808303816000875af1158015620007da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000800919062002d10565b6200084e5760405162461bcd60e51b815260206004820152601b60248201527f313530616130207472616e736665722066726f6d206661696c656400000000006044820152606401620005f0565b60008162000865670de0b6b3a76400008662002d4a565b62000871919062002d64565b6040516340c10f1960e01b8152336004820152602481018290529091506001600160a01b038416906340c10f1990604401600060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b505050506001600160a01b038516600090815260fc6020526040812080548692906200090090849062002d87565b9091555050604080516001600160a01b0387168152336020820152908101859052606081018290527fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79060800160405180910390a150505062000963600160c955565b5050565b7f000000000000000000000000000000000000000000000000000000000000000060005b8281101562000a55576000848483818110620009ab57620009ab62002d9d565b9050602002016020810190620009c29190620029bb565b60405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529192509082169063095ea7b3906044016020604051808303816000875af115801562000a17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a3d919062002d10565b5050808062000a4c9062002db3565b9150506200098b565b50505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300362000aa65760405162461bcd60e51b8152600401620005f09062002c78565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000af160008051602062004295833981519152546001600160a01b031690565b6001600160a01b03161462000b1a5760405162461bcd60e51b8152600401620005f09062002cc4565b62000b258262001b40565b620009638282600162001b4a565b6002606462000b4c670de0b6b3a7640000600162002d4a565b62000b58919062002d64565b62000b64919062002d64565b81565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000c095760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401620005f0565b506000805160206200429583398151915290565b62000c2762001d29565b62000c33600062001d85565b565b600054610100900460ff161580801562000c565750600054600160ff909116105b8062000c725750303b15801562000c72575060005460ff166001145b62000cd75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620005f0565b6000805460ff19166001179055801562000cfb576000805461ff0019166101001790555b62000d0562001dd7565b62000d0f62001e0b565b801562000696576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b62000d6262001d29565b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801562000dac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd2919062002dcf565b6001600160a01b038516600090815260fc602052604090205490915062000e118462000dff838562002de9565b6001600160a01b038616919062001e3f565b5050505050565b62000e2262001cc7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e83573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ea9919062002dff565b6001600160a01b03168686600081811062000ec85762000ec862002d9d565b905060200201602081019062000edf9190620029bb565b6001600160a01b031603620011e95760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f75919062002dff565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801562000fc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fe6919062002dcf565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663048c661d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001047573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200106d919062002dff565b6001600160a01b031663a1fbb7cb8a8a8a8a8a8a6040518763ffffffff1660e01b8152600401620010a49695949392919062002e6c565b6020604051808303816000875af1158015620010c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010ea919062002dcf565b506040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb903390849084906370a0823190602401602060405180830381865afa1580156200113c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001162919062002dcf565b6200116e919062002de9565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015620011ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e0919062002d10565b5050506200144e565b6200121a7f000000000000000000000000000000000000000000000000000000000000000088888888888862001ea4565b90506000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ec5883956040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001286573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ac919062002dcf565b620012b8908462002d4a565b620012c4919062002d64565b9050620012d2818362002de9565b915086866000818110620012ea57620012ea62002d9d565b9050602002016020810190620013019190620029bb565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801562001351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001377919062002d10565b508160fc60008989600081811062001393576200139362002d9d565b9050602002016020810190620013aa9190620029bb565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254620013db919062002d87565b909155507f251ff4c7634fd55f04c3cf32dbd1ee0a0df57c945c32ba5bde076456722b63059050878760008162001416576200141662002d9d565b90506020020160208101906200142d9190620029bb565b88888b866040516200144495949392919062002ee6565b60405180910390a1505b506200145a600160c955565b505050505050565b606462000b58670de0b6b3a7640000600562002d4a565b606462001490670de0b6b3a7640000600162002d4a565b6200149c919062002d64565b62000b6490600a62002d4a565b606462000b58670de0b6b3a7640000600162002d4a565b6001600160a01b03818116600090815260fb60205260409020541615620015395760405162461bcd60e51b815260206004820152602660248201527f61633334322074686520746f6b656e2068617320616c7265616479206265656e60448201526508185919195960d21b6064820152608401620005f0565b60008190506000816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200157f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620015a9919081019062002f21565b604051602001620015bb919062002fa1565b60405160208183030381529060405290506000826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200160d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001637919081019062002f21565b60405160200162001649919062002fd7565b604051602081830303815290604052905060008282866040516200166d906200292e565b6200167b9392919062003003565b604051809103906000f08015801562001698573d6000803e3d6000fd5b506001600160a01b03868116600090815260fb6020526040902080546001600160a01b0319168383161790559091508190620016fa9086167f00000000000000000000000000000000000000000000000000000000000000006000196200220b565b604080516001600160a01b038089168252831660208201527fa382806de660013e2e748a65a90d3d86e2b3282d70f6a131bdbec61792b4f90d910160405180910390a1505050505050565b6200174f62001d29565b6001600160a01b038116620017b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620005f0565b620006968162001d85565b620017cb62001cc7565b6001600160a01b03808316600090815260fb602052604090205416816200184b5760405162461bcd60e51b815260206004820152602d60248201527f3362333239207769746864726177616c20616d6f756e74206d7573742062652060448201526c0626967676572207468616e203609c1b6064820152608401620005f0565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af11580156200189f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018c5919062002d10565b506000670de0b6b3a7640000620018dd8584620019f7565b620018e9908562002d4a565b620018f5919062002d64565b604051630852cd8d60e31b8152600481018590529091506001600160a01b038316906342966c6890602401600060405180830381600087803b1580156200193b57600080fd5b505af115801562001950573d6000803e3d6000fd5b505050506001600160a01b038416600090815260fc6020526040812080548392906200197e90849062002de9565b909155506200199a90506001600160a01b038516338362001e3f565b604080516001600160a01b0386168152336020820152908101829052606081018490527ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679060800160405180910390a1505062000963600160c955565b60008060fc6000856001600160a01b03166001600160a01b031681526020019081526020016000205490506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001a63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a89919062002dcf565b905081158062001a97575080155b1562001ab057670de0b6b3a76400009250505062001b3a565b836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001aef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b15919062002dcf565b62001b29670de0b6b3a76400008462002d4a565b62001b35919062002d64565b925050505b92915050565b6200069662001d29565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562001b855762001b808362002328565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562001be2575060408051601f3d908101601f1916820190925262001bdf9181019062002dcf565b60015b62001c475760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401620005f0565b60008051602062004295833981519152811462001cb95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401620005f0565b5062001b80838383620023c7565b600260c9540362001d1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620005f0565b600260c955565b600160c955565b6097546001600160a01b0316331462000c335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005f0565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662001e015760405162461bcd60e51b8152600401620005f09062003045565b62000c33620023f2565b600054610100900460ff1662001e355760405162461bcd60e51b8152600401620005f09062003045565b62000c3362002427565b6040516001600160a01b03831660248201526044810182905262001b8090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915262002451565b6000858562001eb560018262002de9565b81811062001ec75762001ec762002d9d565b905060200201602081019062001ede9190620029bb565b6001600160a01b03168686600081811062001efd5762001efd62002d9d565b905060200201602081019062001f149190620029bb565b6001600160a01b03161462001f7c5760405162461bcd60e51b815260206004820152602760248201527f6561666539206d75737420737461727420616e6420656e64207769746820736160448201526636b29031b7b4b760c91b6064820152608401620005f0565b8142108062001f89575081155b62001fc85760405162461bcd60e51b815260206004820152600e60248201526d656166653920746f6f206c61746560901b6044820152606401620005f0565b60008686600081811062001fe05762001fe062002d9d565b905060200201602081019062001ff79190620029bb565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801562002042573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002068919062002dcf565b905060006040518060800160405280620020e68b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d9182918501908490808284376000920191909152506200252a92505050565b8152306020820152604081018c9052606001620021058c600162002d87565b905260405163b858183f60e01b81529091506001600160a01b038c169063b858183f906200213890849060040162003090565b6020604051808303816000875af115801562002158573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200217e919062002dcf565b506040516370a0823160e01b815230600482015260009083906001600160a01b038616906370a0823190602401602060405180830381865afa158015620021c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021ef919062002dcf565b620021fb919062002de9565b9c9b505050505050505050505050565b801580620022895750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801562002261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002287919062002dcf565b155b620022f65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401620005f0565b6040516001600160a01b03831660248201526044810182905262001b8090849063095ea7b360e01b9060640162001e6c565b6001600160a01b0381163b620023975760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620005f0565b6000805160206200429583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b620023d2836200261c565b600082511180620023e05750805b1562001b805762000a5583836200265e565b600054610100900460ff166200241c5760405162461bcd60e51b8152600401620005f09062003045565b62000c333362001d85565b600054610100900460ff1662001d225760405162461bcd60e51b8152600401620005f09062003045565b6000620024a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620027529092919063ffffffff16565b80519091501562001b805780806020019051810190620024c9919062002d10565b62001b805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620005f0565b60608260008151811062002542576200254262002d9d565b602002602001015160405160200162002573919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060005b8251811015620026155781838281518110620025a757620025a762002d9d565b602002602001015185836001620025bf919062002d87565b81518110620025d257620025d262002d9d565b6020026020010151604051602001620025ee93929190620030e0565b604051602081830303815290604052915080806200260c9062002db3565b91505062002587565b5092915050565b620026278162002328565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620026c85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620005f0565b600080846001600160a01b031684604051620026e591906200312e565b600060405180830381855af49150503d806000811462002722576040519150601f19603f3d011682016040523d82523d6000602084013e62002727565b606091505b509150915062001b358282604051806060016040528060278152602001620042b5602791396200276b565b606062002763848460008562002788565b949350505050565b606083156200277c5750816200059e565b6200059e8383620028c3565b606082471015620027eb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620005f0565b6001600160a01b0385163b620028445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620005f0565b600080866001600160a01b031685876040516200286291906200312e565b60006040518083038185875af1925050503d8060008114620028a1576040519150601f19603f3d011682016040523d82523d6000602084013e620028a6565b606091505b5091509150620028b8828286620028f0565b979650505050505050565b815115620028d45781518083602001fd5b8060405162461bcd60e51b8152600401620005f0919062002990565b60608315620029015750816200059e565b825115620029125782518084602001fd5b8160405162461bcd60e51b8152600401620005f0919062002990565b611148806200314d83390190565b60005b83811015620029595781810151838201526020016200293f565b50506000910152565b600081518084526200297c8160208601602086016200293c565b601f01601f19169290920160200192915050565b6020815260006200059e602083018462002962565b6001600160a01b03811681146200069657600080fd5b600060208284031215620029ce57600080fd5b81356200059e81620029a5565b60008060408385031215620029ef57600080fd5b8235620029fc81620029a5565b946020939093013593505050565b60008083601f84011262002a1d57600080fd5b50813567ffffffffffffffff81111562002a3657600080fd5b6020830191508360208260051b850101111562002a5257600080fd5b9250929050565b6000806020838503121562002a6d57600080fd5b823567ffffffffffffffff81111562002a8557600080fd5b62002a938582860162002a0a565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562002ae15762002ae162002a9f565b604052919050565b600067ffffffffffffffff82111562002b065762002b0662002a9f565b50601f01601f191660200190565b6000806040838503121562002b2857600080fd5b823562002b3581620029a5565b9150602083013567ffffffffffffffff81111562002b5257600080fd5b8301601f8101851362002b6457600080fd5b803562002b7b62002b758262002ae9565b62002ab5565b81815286602083850101111562002b9157600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121562002bc557600080fd5b823562002bd281620029a5565b9150602083013562002be481620029a5565b809150509250929050565b6000806000806000806080878903121562002c0957600080fd5b86359550602087013567ffffffffffffffff8082111562002c2957600080fd5b62002c378a838b0162002a0a565b9097509550604089013591508082111562002c5157600080fd5b5062002c6089828a0162002a0a565b979a9699509497949695606090950135949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121562002d2357600080fd5b815180151581146200059e57600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762001b3a5762001b3a62002d34565b60008262002d8257634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111562001b3a5762001b3a62002d34565b634e487b7160e01b600052603260045260246000fd5b60006001820162002dc85762002dc862002d34565b5060010190565b60006020828403121562002de257600080fd5b5051919050565b8181038181111562001b3a5762001b3a62002d34565b60006020828403121562002e1257600080fd5b81516200059e81620029a5565b8183526000602080850194508260005b8581101562002e6157813562002e4581620029a5565b6001600160a01b03168752958201959082019060010162002e2f565b509495945050505050565b8681526000602060808184015262002e8960808401888a62002e1f565b8381036040850152858152869082016000805b8881101562002ecd57833562ffffff811680821462002eb9578384fd5b845250928401929184019160010162002e9c565b5050809350505050826060830152979650505050505050565b6001600160a01b038616815260806020820181905260009062002f0d908301868862002e1f565b604083019490945250606001529392505050565b60006020828403121562002f3457600080fd5b815167ffffffffffffffff81111562002f4c57600080fd5b8201601f8101841362002f5e57600080fd5b805162002f6f62002b758262002ae9565b81815285602083850101111562002f8557600080fd5b62002f988260208301602086016200293c565b95945050505050565b6b020a82a37b5b2b7103337b9160a51b81526000825162002fca81600c8501602087016200293c565b91909101600c0192915050565b61041560f41b81526000825162002ff68160028501602087016200293c565b9190910160020192915050565b60608152600062003018606083018662002962565b82810360208401526200302c818662002962565b91505060018060a01b0383166040830152949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000825160806020840152620030ae60a084018262002962565b905060018060a01b03602085015116604084015260408401516060840152606084015160808401528091505092915050565b60008451620030f48184602089016200293c565b60e89490941b6001600160e81b0319169190930190815260609190911b6bffffffffffffffffffffffff1916600382015260170192915050565b60008251620031428184602087016200293c565b919091019291505056fe60806040523480156200001157600080fd5b5060405162001148380380620011488339810160408190526200003491620001b8565b828281816003620000468382620002d4565b506004620000558282620002d4565b505050620000726200006c6200009d60201b60201c565b620000a1565b5050600680546001600160a01b0319166001600160a01b039290921691909117905550620003a09050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011b57600080fd5b81516001600160401b0380821115620001385762000138620000f3565b604051601f8301601f19908116603f01168101908282118183101715620001635762000163620000f3565b816040528381526020925086838588010111156200018057600080fd5b600091505b83821015620001a4578582018301518183018401529082019062000185565b600093810190920192909252949350505050565b600080600060608486031215620001ce57600080fd5b83516001600160401b0380821115620001e657600080fd5b620001f48783880162000109565b945060208601519150808211156200020b57600080fd5b506200021a8682870162000109565b604086015190935090506001600160a01b03811681146200023a57600080fd5b809150509250925092565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002cf57600081815260208120601f850160051c81016020861015620002aa5750805b601f850160051c820191505b81811015620002cb57828155600101620002b6565b5050505b505050565b81516001600160401b03811115620002f057620002f0620000f3565b620003088162000301845462000245565b8462000281565b602080601f831160018114620003405760008415620003275750858301515b600019600386901b1c1916600185901b178555620002cb565b600085815260208120601f198616915b82811015620003715788860151825594840194600190910190840162000350565b5085821015620003905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610d9880620003b06000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d71461021e578063a9059cbb14610231578063c55dae6314610244578063dd62ed3e14610257578063f2fde38b1461029057600080fd5b806370a08231146101c0578063715018a6146101e95780638da5cb5b146101f157806395d89b411461021657600080fd5b8063313ce567116100de578063313ce56714610176578063395093511461018557806340c10f191461019857806342966c68146101ad57600080fd5b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015157806323b872dd14610163575b600080fd5b6101186102a3565b6040516101259190610b79565b60405180910390f35b61014161013c366004610be3565b610335565b6040519015158152602001610125565b6002545b604051908152602001610125565b610141610171366004610c0d565b61034f565b60405160128152602001610125565b610141610193366004610be3565b610373565b6101ab6101a6366004610be3565b6103b2565b005b6101ab6101bb366004610c49565b6103f3565b6101556101ce366004610c62565b6001600160a01b031660009081526020819052604090205490565b6101ab610400565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610125565b610118610436565b61014161022c366004610be3565b610445565b61014161023f366004610be3565b6104d7565b6006546101fe906001600160a01b031681565b610155610265366004610c84565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101ab61029e366004610c62565b6104e5565b6060600380546102b290610cb7565b80601f01602080910402602001604051908101604052809291908181526020018280546102de90610cb7565b801561032b5780601f106103005761010080835404028352916020019161032b565b820191906000526020600020905b81548152906001019060200180831161030e57829003601f168201915b5050505050905090565b60003361034381858561057d565b60019150505b92915050565b60003361035d8582856106a2565b610368858585610734565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061034390829086906103ad908790610d07565b61057d565b6005546001600160a01b031633146103e55760405162461bcd60e51b81526004016103dc90610d1a565b60405180910390fd5b6103ef8282610902565b5050565b6103fd33826109e1565b50565b6005546001600160a01b0316331461042a5760405162461bcd60e51b81526004016103dc90610d1a565b6104346000610b27565b565b6060600480546102b290610cb7565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104ca5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103dc565b610368828686840361057d565b600033610343818585610734565b6005546001600160a01b0316331461050f5760405162461bcd60e51b81526004016103dc90610d1a565b6001600160a01b0381166105745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103dc565b6103fd81610b27565b6001600160a01b0383166105df5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103dc565b6001600160a01b0382166106405760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103dc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461072e57818110156107215760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103dc565b61072e848484840361057d565b50505050565b6001600160a01b0383166107985760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103dc565b6001600160a01b0382166107fa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103dc565b6001600160a01b038316600090815260208190526040902054818110156108725760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103dc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108a9908490610d07565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108f591815260200190565b60405180910390a361072e565b6001600160a01b0382166109585760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103dc565b806002600082825461096a9190610d07565b90915550506001600160a01b03821660009081526020819052604081208054839290610997908490610d07565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610a415760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103dc565b6001600160a01b03821660009081526020819052604090205481811015610ab55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103dc565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ae4908490610d4f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610695565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b81811015610ba657858101830151858201604001528201610b8a565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610bde57600080fd5b919050565b60008060408385031215610bf657600080fd5b610bff83610bc7565b946020939093013593505050565b600080600060608486031215610c2257600080fd5b610c2b84610bc7565b9250610c3960208501610bc7565b9150604084013590509250925092565b600060208284031215610c5b57600080fd5b5035919050565b600060208284031215610c7457600080fd5b610c7d82610bc7565b9392505050565b60008060408385031215610c9757600080fd5b610ca083610bc7565b9150610cae60208401610bc7565b90509250929050565b600181811c90821680610ccb57607f821691505b602082108103610ceb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561034957610349610cf1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8181038181111561034957610349610cf156fea2646970667358221220793add6795255b7170d5ab426c96d98761c7c3e6f636fd31858d4450a053c6d564736f6c63430008110033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e918f2ae28a639b5f3fecf6885192900ac7d74dd9bba330177d8883e23edd8bf64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToken(address)": {
        "details": "to add new supported collateral by deploying APtoken for it",
        "params": {
          "_collateralToken": "collateral to be added"
        }
      },
      "arbitrage(uint256,address[],uint24[],uint256)": {
        "details": "to do arbitrage",
        "params": {
          "_amountIn": "start amount",
          "_fees": "the fees for the swap",
          "_path": "the path for the swap",
          "expiry": "the timeout for the swap"
        }
      },
      "batchApproveRouter(address[])": {
        "details": "approves the list collateral tokens on Router to enable arbitrage, should be called when the router was changed.",
        "params": {
          "_collateralTokens": "list of collateralToken addresses"
        }
      },
      "deposit(address,uint256)": {
        "details": "to deposit collateral into ArbitragePool and get APtoken",
        "params": {
          "_amount": "amount to deposit",
          "_collateralToken": "amount to deposit"
        }
      },
      "getAPtokenPrice(address)": {
        "details": "calculates the price of APtoken by baseToken/apToken.supply()",
        "params": {
          "_collateralToken": "IERC20 address of base token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferExtraCollateral(address,address)": {
        "details": "moves extra collateral that was sent by mistake to the contract from the balance",
        "params": {
          "_collateralToken": "collateralToken addresses"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address,uint256)": {
        "details": "to withdraw collateral from ArbitragePool by redeeming APtoken",
        "params": {
          "_amount": "amount of APtoken to give",
          "_collateralToken": "amount to withdraw"
        }
      }
    },
    "stateVariables": {
      "collateralToAPToken": {
        "details": "stores APtoken address for each token"
      },
      "depositsAndRewards": {
        "details": "stores totalDeposit + rewards value for each collateral"
      }
    },
    "title": "is used to liquidate troves and reward depositors with collateral redeemed",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 630,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 633,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 612,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 927,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1453,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1069,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1127,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6140,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "collateralToAPToken",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_contract(IMintableToken)7364)"
      },
      {
        "astId": 6145,
        "contract": "contracts/arbitrage-pool-uniswap.sol:ArbitragePoolUniswap",
        "label": "depositsAndRewards",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMintableToken)7364": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IMintableToken)7364)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IMintableToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IMintableToken)7364"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}