{
  "address": "0xeb70EaC1371Ef898AC2781D7168c0d5A11da10cf",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        }
      ],
      "name": "CollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        }
      ],
      "name": "DebtUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "serviceFee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        }
      ],
      "name": "NewServiceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewTrove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableUnspent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBaseRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finishBaseRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lastTroveRedeemed",
          "type": "address"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ServiceFeeImplementationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralization",
          "type": "uint256"
        }
      ],
      "name": "TroveCollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralization",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "TroveDebtUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "TroveImplementationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referenceTrove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "before",
          "type": "bool"
        }
      ],
      "name": "TroveInserted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceAtLiquidation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stabilityPoolLiquidation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        }
      ],
      "name": "TroveRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETHContract",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitragePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrageShareRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonqToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "containsTrove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITrove",
          "name": "_trove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeInterval",
          "type": "uint256"
        }
      ],
      "name": "createNewServiceFee",
      "outputs": [
        {
          "internalType": "contract IServiceFeeGenerator",
          "name": "newServiceFee",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createTrove",
      "outputs": [
        {
          "internalType": "contract ITrove",
          "name": "trove",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nextTrove",
          "type": "address"
        }
      ],
      "name": "createTroveAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stabilityPoolLiquidation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "emitLiquidationEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newCollateralization",
          "type": "uint256"
        }
      ],
      "name": "emitTroveCollateralUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newCollateralization",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feePaid",
          "type": "uint256"
        }
      ],
      "name": "emitTroveDebtUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "contract IFeeRecipient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "firstTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "getRedemptionFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "getReducedFeeAndRefundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reducedFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "increaseCollateralNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "insertTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "lastTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liquidateTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liquidationPool",
      "outputs": [
        {
          "internalType": "contract ILiquidationPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTroveBONQStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "nextTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "prevTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastTroveCurrentICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lastTroveNewPositionHint",
          "type": "address"
        }
      ],
      "name": "redeemStableCoinForCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "removeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceFeeImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arbitragePool",
          "type": "address"
        }
      ],
      "name": "setArbitragePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_arbitrageShareRatio",
          "type": "uint256"
        }
      ],
      "name": "setArbitrageShareRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationPool",
          "type": "address"
        }
      ],
      "name": "setLiquidationPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxTroveBONQStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_serviceFeeImplementation",
          "type": "address"
        }
      ],
      "name": "setServiceFeeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stabilityPool",
          "type": "address"
        }
      ],
      "name": "setStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenPriceFeed",
          "type": "address"
        }
      ],
      "name": "setTokenPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveImplementation",
          "type": "address"
        }
      ],
      "name": "setTroveImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationPool",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPoolBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "tokenCollateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenOwner",
      "outputs": [
        {
          "internalType": "contract IMintableTokenOwner",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenToPriceFeed",
      "outputs": [
        {
          "internalType": "contract ITokenPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "totalDebtForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnerOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "troveCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        }
      ],
      "name": "updateTotalCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_borrow",
          "type": "bool"
        }
      ],
      "name": "updateTotalDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe70d7a6aacc8cb65292a09a373583b59f3063fe4c5ea76c9649a114fb14e150",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0xeb70EaC1371Ef898AC2781D7168c0d5A11da10cf",
    "transactionIndex": 0,
    "gasUsed": "5314311",
    "logsBloom": "0x
    "blockHash": "0x47139821ba507fed7e6a499eba19a168831dc00a1b8cf608ae10789cbcc081c5",
    "transactionHash": "0xfe70d7a6aacc8cb65292a09a373583b59f3063fe4c5ea76c9649a114fb14e150",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31363422,
        "transactionHash": "0xfe70d7a6aacc8cb65292a09a373583b59f3063fe4c5ea76c9649a114fb14e150",
        "address": "0xeb70EaC1371Ef898AC2781D7168c0d5A11da10cf",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x47139821ba507fed7e6a499eba19a168831dc00a1b8cf608ae10789cbcc081c5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31363422,
        "transactionHash": "0xfe70d7a6aacc8cb65292a09a373583b59f3063fe4c5ea76c9649a114fb14e150",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000236682180ad5a9700000000000000000000000000000000000000000000000039620e9256bc42bf000000000000000000000000000000000000000000002905412985ca07601211000000000000000000000000000000000000000000000000372ba670d60ee828000000000000000000000000000000000000000000002905435fedeb880d6ca8",
        "logIndex": 1,
        "blockHash": "0x47139821ba507fed7e6a499eba19a168831dc00a1b8cf608ae10789cbcc081c5"
      }
    ],
    "blockNumber": 31363422,
    "cumulativeGasUsed": "5314311",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dea2b32fd21416889096b7b2b54df7fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"name\":\"CollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"serviceFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"}],\"name\":\"NewServiceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewTrove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableUnspent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBaseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finishBaseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastTroveRedeemed\",\"type\":\"address\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ServiceFeeImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralization\",\"type\":\"uint256\"}],\"name\":\"TroveCollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralization\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"TroveDebtUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"TroveImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referenceTrove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"before\",\"type\":\"bool\"}],\"name\":\"TroveInserted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAtLiquidation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stabilityPoolLiquidation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"}],\"name\":\"TroveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHContract\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitragePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrageShareRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonqToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"containsTrove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrove\",\"name\":\"_trove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeInterval\",\"type\":\"uint256\"}],\"name\":\"createNewServiceFee\",\"outputs\":[{\"internalType\":\"contract IServiceFeeGenerator\",\"name\":\"newServiceFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createTrove\",\"outputs\":[{\"internalType\":\"contract ITrove\",\"name\":\"trove\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nextTrove\",\"type\":\"address\"}],\"name\":\"createTroveAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilityPoolLiquidation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"emitLiquidationEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCollateralization\",\"type\":\"uint256\"}],\"name\":\"emitTroveCollateralUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCollateralization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePaid\",\"type\":\"uint256\"}],\"name\":\"emitTroveDebtUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract IFeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"firstTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"getRedemptionFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"getReducedFeeAndRefundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reducedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"increaseCollateralNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"insertTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"lastTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liquidateTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liquidationPool\",\"outputs\":[{\"internalType\":\"contract ILiquidationPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTroveBONQStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"nextTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"prevTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastTroveCurrentICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lastTroveNewPositionHint\",\"type\":\"address\"}],\"name\":\"redeemStableCoinForCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"removeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbitragePool\",\"type\":\"address\"}],\"name\":\"setArbitragePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arbitrageShareRatio\",\"type\":\"uint256\"}],\"name\":\"setArbitrageShareRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationPool\",\"type\":\"address\"}],\"name\":\"setLiquidationPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTroveBONQStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceFeeImplementation\",\"type\":\"address\"}],\"name\":\"setServiceFeeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"}],\"name\":\"setStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPriceFeed\",\"type\":\"address\"}],\"name\":\"setTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveImplementation\",\"type\":\"address\"}],\"name\":\"setTroveImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationPool\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPoolBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"contract IMintableTokenOwner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToPriceFeed\",\"outputs\":[{\"internalType\":\"contract ITokenPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalDebtForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"troveCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"}],\"name\":\"updateTotalCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_borrow\",\"type\":\"bool\"}],\"name\":\"updateTotalDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"containsTrove(address,address)\":{\"details\":\"returns and checks if such trove exists for this token\"},\"createNewServiceFee(address,uint256,uint256)\":{\"details\":\"creates new ServiceFeeGenerator for user\",\"params\":{\"_feeAmount\":\"amount of fee to take (must be >= minimal borrow)\",\"_feeInterval\":\"interval required for payments\",\"_trove\":\"any valid trove that user owns\"}},\"createTrove(address)\":{\"details\":\"creates a trove if the token is supported\",\"params\":{\"_token\":\"any supported token address\"}},\"createTroveAndBorrow(address,uint256,address,uint256,address)\":{\"details\":\"creates a trove with collateral and borrows from it\",\"params\":{\"_borrowAmount\":\"the value of the minting\",\"_collateralAmount\":\"a positive amount of collateral to transfer from the sender's account or zero\",\"_nextTrove\":\"is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\",\"_recipient\":\"is the address to which the newly minted tokens will be transferred\",\"_token\":\"any supported token address\"}},\"emitLiquidationEvent(address,address,address,uint256)\":{\"details\":\"to emit Liquidation event, to be called from a trove after liquidation.\",\"params\":{\"_token\":\"address of token\",\"_trove\":\"address of the Trove\",\"collateral\":\"uint256 amount of collateral\",\"stabilityPoolLiquidation\":\"address of StabilityPool, 0x0 if Community LiquidationPool\"}},\"emitTroveCollateralUpdate(address,uint256,uint256)\":{\"details\":\"to emit Collateral update event, to be called from trove\",\"params\":{\"_newAmount\":\"new trove's Collateral value\",\"_newCollateralization\":\"new trove's collateralization value\",\"_token\":\"address of token\"}},\"emitTroveDebtUpdate(address,uint256,uint256,uint256)\":{\"details\":\"to emit Trove's debt update event, to be called from trove\",\"params\":{\"_newAmount\":\"new trove's debt value\",\"_newCollateralization\":\"new trove's collateralization value\",\"_token\":\"address of token\"}},\"firstTrove(address)\":{\"details\":\"returns the first trove by minimal collaterization ratio\"},\"getBorrowingFee(uint256)\":{\"details\":\"returns fee from borrowing the amount\"},\"getRedemptionAmount(uint256,uint256)\":{\"details\":\"returns amount to be used in redemption excluding fee,\"},\"getRedemptionFee(uint256,uint256)\":{\"details\":\"returns fee from redeeming the amount\"},\"getRedemptionFeeRatio(address)\":{\"details\":\"returns fee from redeeming the amount\"},\"getReducedFeeAndRefundAmount(uint256,address)\":{\"details\":\"returns reduced fee and amount to repay based on trove BONQ stake\"},\"increaseCollateralNative(address,address)\":{\"details\":\"deposits native token into trove after wrapping the ETH (EWT, AVAX, etc) into WETH (WEWT, WAVAX, etc)\",\"params\":{\"_newNextTrove\":\"hint for next trove position\",\"_trove\":\"tove to be deposited in\"}},\"insertTrove(address,address)\":{\"details\":\"insert a trove in the sorted list of troves. the troves must be sorted by collateralisation ratio CR the sender must be the trove which will be inserted in the list\",\"params\":{\"_newNextTrove\":\"is the trove before which the trove will be added\"}},\"lastTrove(address)\":{\"details\":\"returns the last trove by maximum collaterization ratio\"},\"liquidationPool(address)\":{\"details\":\"returns contract address of LiquidationPool for specific token\"},\"nextTrove(address,address)\":{\"details\":\"returns the next trove by collaterization ratio\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"prevTrove(address,address)\":{\"details\":\"returns the previous trove by collaterization ratio\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemStableCoinForCollateral(address,uint256,uint256,uint256,address)\":{\"details\":\"redeem desired StableCoin amount for desired collateral tokens\",\"params\":{\"_lastTroveCurrentICR\":\"ICR of the last trove to be redeemed, if matches then the hint is working and it redeems\",\"_lastTroveNewPositionHint\":\"hint for the of the nextNewTrove after redemption for the latest trove\",\"_maxRate\":\"is max fee (in % with 1e18 precision) allowed to pay\",\"_stableAmount\":\"the desired amount of StableCoin to pay for redemption\"}},\"removeTrove(address,address)\":{\"details\":\"remove a trove from the list and send any remaining token balance to the owner\",\"params\":{\"_trove\":\"is the trove which will be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setArbitragePool(address)\":{\"details\":\"sets contract address of ArbitragePool\"},\"setArbitrageShareRatio(uint256)\":{\"details\":\"set the ratio of the arbitrage gains which should go to the sender of the message\",\"params\":{\"_arbitrageShareRatio\":\"the ratio by which the arbitrage gains will be multiplied\"}},\"setFeeRecipient(address)\":{\"details\":\"sets contract address of FeeRecipient\"},\"setLiquidationPool(address,address)\":{\"details\":\"sets contract address of LiquidationPool for specific token\"},\"setMaxTroveBONQStake(uint256)\":{\"details\":\"sets new amount for trove BONQ state at which redemption fee refunding equals to 100%\"},\"setServiceFeeImplementation(address)\":{\"details\":\"sets address of the service-fee-generator implementation for minimal clones\"},\"setStabilityPool(address)\":{\"details\":\"sets contract address of StabilityPool\"},\"setTokenOwner()\":{\"details\":\"sets address of the contract for stableCoin issuance\"},\"setTokenPriceFeed(address)\":{\"details\":\"sets contract address of TokenPriceFeed\"},\"setTroveImplementation(address)\":{\"details\":\"sets address of the Trove implementation for minimal clones\"},\"setWETH(address,address)\":{\"details\":\"sets contract address of Wrapped native token, along with liquidationPool\"},\"togglePause()\":{\"details\":\"toggles the pause state of the contract if the contract is paused borrowing is disabled and liquidation with Stability Pool is impossible (Community liquidations still allowed)\"},\"tokenCollateralization(address)\":{\"details\":\"returns total collateral ratio averaged between troves for specific token\"},\"totalCollateral(address)\":{\"details\":\"returns total collateral among all troves for specific token\"},\"totalDebtForToken(address)\":{\"details\":\"returns total debt among all troves for specific token\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTokenOwnerOwnership(address)\":{\"details\":\"transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters\"},\"transferTokenOwnership(address)\":{\"details\":\"transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters\"},\"troveCount(address)\":{\"details\":\"returns the number of troves for specific token\"},\"updateTotalCollateral(address,uint256,bool)\":{\"details\":\"function to be called from trove to update total collateral value of all troves of this tokens\",\"params\":{\"_increase\":\"bool that indicates \\\"+\\\" or \\\"-\\\" operation\"}},\"updateTotalDebt(uint256,bool)\":{\"details\":\"function to be called from trove to change totalDebt\",\"params\":{\"_borrow\":\"indicates if it is borrow or repay/liquidatin\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/original-trove-factory.sol\":\"OriginalTroveFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x7554657b651d884f77e786ef65ea098bebbcfedda5ca06126cf7825d6121a368\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe14e576c8651a2409b41db02dd05638d0ceced067a4dbc2918f448e0cb2397e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb671f26ab94e1519cbd14bf10f094873a4d94fe92892666cf3e8846eecbb73fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/IBONQStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface IBONQStaking {\\n  /* view */\\n  function totalStake() external view returns (uint256);\\n\\n  function getRewardsTotal() external view returns (uint256);\\n\\n  function getUnpaidStableCoinGain(address _user) external view returns (uint256);\\n\\n  /* state changes*/\\n  function stake(uint256 _amount) external;\\n\\n  function unstake(uint256 _amount) external;\\n\\n  function redeemReward(\\n    uint256 _amount,\\n    address _troveAddress,\\n    address _newNextTrove\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1363daea2dc22be920366f786b189e2a385b6e98165f50ad80e73d9fb0a34dc0\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFeeRecipient {\\n  function baseRate() external view returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view returns (uint256);\\n\\n  /**\\n   * @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n   * fees from the msg.sender\\n   * @param _amount the amount in Wei of fees to transfer\\n   */\\n  function takeFees(uint256 _amount) external returns (bool);\\n\\n  function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x956def5f462011bcfa336dc961b70711817e27682371d5c0752099ecd03374cc\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface ILiquidationPool {\\n  function collateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liqTokenRate() external view returns (uint256);\\n\\n  function claimCollateralAndDebt(uint256 _unclaimedCollateral, uint256 _unclaimedDebt) external;\\n\\n  function approveTrove(address _trove) external;\\n\\n  function unapproveTrove(address _trove) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x7e7c6bfd1345b762f1373273b6fc007cbda9b1c16e8466bf98110ad59f83906f\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IServiceFeeGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITrove.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\n\\ninterface IServiceFeeGenerator {\\n  function trove() external view returns (ITrove);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function feeAmount() external view returns (uint256);\\n\\n  function feeInterval() external view returns (uint256);\\n\\n  function lastPayTime() external view returns (uint256);\\n\\n  function isPaid() external view returns (bool);\\n\\n  function initialized() external view returns (bool);\\n\\n  function initialize(\\n    ITrove _trove,\\n    uint256 _feeAmount,\\n    uint256 _feeInterval\\n  ) external;\\n\\n  /**\\n   * @dev is called to check if the interval passed and pay fee in that case\\n   * takes fees as debt from the trove set\\n   */\\n  function withdrawFee(address _newNextTrove) external;\\n\\n  event Activated(address indexed activator, address indexed trove, uint256 feeAmount, uint256 feeInterval);\\n  event FeeCollected(uint256 indexed periodStart, uint256 indexed periodEnd);\\n  event Deactivated(address indexed deactivator, uint256 indexed timestamp);\\n}\\n\",\"keccak256\":\"0x6e3348710605ff00634eb475cd5d49aa34072ed0911ffc1731e1961a326b1d79\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IStabilityPoolBase {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function totalDeposit() external view returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function redeemReward() external;\\n\\n  function liquidate() external;\\n\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external;\\n\\n  function setBONQAmountForRewards() external;\\n\\n  function getDepositorBONQGain(address _depositor) external view returns (uint256);\\n\\n  function getWithdrawableDeposit(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf604d75783438cc84d31e72e6becbf359d4233e1d57bacf399767563507750ba\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n  struct TokenInfo {\\n    address priceFeed;\\n    uint256 mcr;\\n    uint256 mrf; // Maximum Redemption Fee\\n  }\\n\\n  function tokenPriceFeed(address) external view returns (address);\\n\\n  function tokenPrice(address _token) external view returns (uint256);\\n\\n  function mcr(address _token) external view returns (uint256);\\n\\n  function mrf(address _token) external view returns (uint256);\\n\\n  function setTokenPriceFeed(\\n    address _token,\\n    address _priceFeed,\\n    uint256 _mcr,\\n    uint256 _maxRedemptionFeeBasisPoints\\n  ) external;\\n\\n  function emitPriceUpdate(\\n    address _token,\\n    uint256 _priceAverage,\\n    uint256 _pricePoint\\n  ) external;\\n\\n  event NewTokenPriceFeed(address _token, address _priceFeed, string _name, string _symbol, uint256 _mcr, uint256 _mrf);\\n  event PriceUpdate(address token, uint256 priceAverage, uint256 pricePoint);\\n}\\n\",\"keccak256\":\"0x1464b339e10e5bcdff774c69d9092696bc4e64c2a1fcbe66120fcdcd72d17a2d\",\"license\":\"MIT\"},\"contracts/interfaces/ITrove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface ITrove is IOwnable, IAccessControlEnumerable {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function token() external view returns (IERC20);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function OWNER_ROLE() external view returns (bytes32);\\n\\n  function addOwner(address _newOwner) external;\\n\\n  function removeOwner(address _ownerToRemove) external;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TOKEN_PRECISION() external view returns (uint256);\\n\\n  function mcr() external view returns (uint256);\\n\\n  function collateralization() external view returns (uint256);\\n\\n  function collateralValue() external view returns (uint256);\\n\\n  function collateral() external view returns (uint256);\\n\\n  function recordedCollateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liquidationReserve() external view returns (uint256);\\n\\n  function netDebt() external view returns (uint256);\\n\\n  function bonqStake() external view returns (uint256);\\n\\n  //  function rewardRatioSnapshot() external view returns (uint256);\\n\\n  function initialize(\\n    //    address _factory,\\n    address _token,\\n    address _troveOwner\\n  ) external;\\n\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) external;\\n\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function unstakeBONQ(uint256 _amount) external;\\n\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function repay(uint256 _amount, address _newNextTrove) external;\\n\\n  function redeem(address _recipient, address _newNextTrove) external returns (uint256 _stableAmount, uint256 _collateralRecieved);\\n\\n  function setArbitrageParticipation(bool _state) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x9906f3efa20161df4cccd50c931947c9daa7f69b6cd0b442f241db7b311ed47d\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITokenPriceFeed.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\nimport \\\"./IMintableTokenOwner.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\nimport \\\"./ILiquidationPool.sol\\\";\\nimport \\\"./IStabilityPoolBase.sol\\\";\\nimport \\\"./ITrove.sol\\\";\\nimport \\\"./IServiceFeeGenerator.sol\\\";\\n\\ninterface ITroveFactory {\\n  /* view */\\n  function lastTrove(address _trove) external view returns (address);\\n\\n  function firstTrove(address _trove) external view returns (address);\\n\\n  function nextTrove(address _token, address _trove) external view returns (address);\\n\\n  function prevTrove(address _token, address _trove) external view returns (address);\\n\\n  function containsTrove(address _token, address _trove) external view returns (bool);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function tokenOwner() external view returns (IMintableTokenOwner);\\n\\n  function tokenToPriceFeed() external view returns (ITokenPriceFeed);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function troveCount(address _token) external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function maxTroveBONQStake() external view returns (uint256);\\n\\n  function getReducedFeeAndRefundAmount(uint256 _fee, address _trove) external view returns (uint256 _reducedFee, uint256 _refundAmount);\\n\\n  function totalCollateral(address _token) external view returns (uint256);\\n\\n  function totalDebtForToken(address _token) external view returns (uint256);\\n\\n  function liquidationPool(address _token) external view returns (ILiquidationPool);\\n\\n  function stabilityPool() external view returns (IStabilityPoolBase);\\n\\n  function arbitragePool() external view returns (address);\\n\\n  function arbitrageShareRatio() external view returns (uint256);\\n\\n  function getRedemptionFeeRatio(address _trove) external view returns (uint256);\\n\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) external pure returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  /* state changes*/\\n  function createTrove(address _token) external returns (ITrove trove);\\n\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) external;\\n\\n  function removeTrove(address _token, address _trove) external;\\n\\n  function insertTrove(address _trove, address _newNextTrove) external;\\n\\n  function createNewServiceFee(\\n    ITrove _trove,\\n    uint256 _feeAmount,\\n    uint256 _feeInterval\\n  ) external returns (IServiceFeeGenerator newServiceFee);\\n\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) external;\\n\\n  function updateTotalDebt(uint256 _amount, bool _borrow) external;\\n\\n  function setStabilityPool(address _stabilityPool) external;\\n\\n  function setArbitragePool(address _arbitragePool) external;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external;\\n\\n  function setMaxTroveBONQStake(uint256 _newAmount) external;\\n\\n  function increaseCollateralNative(address _trove, address _newNextTrove) external payable;\\n\\n  /* utils */\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) external;\\n\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external;\\n\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6730f1dcdb543d5d75b4276a5c4fe825afb5595a62ed1a2801b892d7d0ed3d97\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function approve(address, uint256) external returns (bool);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6de76ef362a5e5deeda393ed8f59d0f47b15e2adf4fa28479fd86c2f58b01cf6\",\"license\":\"MIT\"},\"contracts/original-trove-factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./trove-factory.sol\\\";\\n\\ncontract OriginalTroveFactory is TroveFactory {\\n  function name() public view override returns (string memory) {\\n    return \\\"Original Factory\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x71c5f75e0cacbfb879a4fb616cead947f226d712de0a17f7a6a1f0e33fa7c9fa\",\"license\":\"MIT\"},\"contracts/trove-factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITroveFactory.sol\\\";\\nimport \\\"./interfaces/ITrove.sol\\\";\\nimport \\\"./interfaces/IServiceFeeGenerator.sol\\\";\\nimport \\\"./interfaces/IMintableTokenOwner.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./interfaces/IFeeRecipient.sol\\\";\\nimport \\\"./interfaces/IBONQStaking.sol\\\";\\nimport \\\"./interfaces/ILiquidationPool.sol\\\";\\nimport \\\"./interfaces/IStabilityPoolBase.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\nimport \\\"./utils/BONQMath.sol\\\";\\nimport \\\"./utils/constants.sol\\\";\\n\\nabstract contract TroveFactory is UUPSUpgradeable, OwnableUpgradeable, PausableUpgradeable, Constants, ITroveFactory {\\n  using SafeERC20 for IERC20;\\n  using LinkedAddressList for LinkedAddressList.List;\\n  using BONQMath for uint256;\\n\\n  struct TroveList {\\n    uint256 totalCollateral;\\n    uint256 totalDebt;\\n    ILiquidationPool liquidationPool;\\n    LinkedAddressList.List list;\\n  }\\n\\n  struct RedemptionInfo {\\n    address collateralToken;\\n    uint256 stableCoinRedeemed;\\n    uint256 feeAmount;\\n    uint256 collateralRedeemed;\\n    uint256 stableCoinLeft;\\n    address currentTroveAddress;\\n    address lastTroveRedeemed;\\n    ITrove currentRedemptionTrove;\\n  }\\n\\n  // the trove lists must be separated by token because we want to keep the troves in order of collateralisation\\n  // ratio and the token prices do not move in tandem\\n  IStabilityPoolBase public override stabilityPool;\\n  address public override arbitragePool;\\n  mapping(address => TroveList) private _troves;\\n  IMintableTokenOwner public override tokenOwner;\\n  ITokenPriceFeed public override tokenToPriceFeed;\\n  IMintableToken public override stableCoin;\\n  // solhint-disable-next-line var-name-mixedcase\\n  IWETH public WETHContract;\\n  IFeeRecipient public override feeRecipient;\\n  uint256 public override totalDebt;\\n  address public troveImplementation;\\n  address public serviceFeeImplementation;\\n  /**\\n   * @dev amount of staked BONQ at which trove has 100% refunding of redemption fee\\n   */\\n  uint256 public override maxTroveBONQStake;\\n  IERC20 public override bonqToken;\\n  uint256 public arbitrageShareRatio;\\n\\n  event ServiceFeeImplementationSet(address previousImplementation, address newImplementation);\\n  event NewServiceFee(address serviceFee, address subscriber, address trove);\\n  event TroveImplementationSet(address previousImplementation, address newImplementation);\\n  event NewTrove(address trove, address token, address owner);\\n  event TroveRemoved(address trove);\\n  event TroveLiquidated(address trove, address collateralToken, uint256 priceAtLiquidation, address stabilityPoolLiquidation, uint256 collateral);\\n  event TroveInserted(address token, address trove, address referenceTrove, bool before);\\n\\n  event CollateralUpdate(address token, uint256 totalCollateral);\\n  event DebtUpdate(address collateral, uint256 totalDebt);\\n  event Redemption(address token, uint256 stableAmount, uint256 tokenAmount, uint256 stableUnspent, uint256 startBaseRate, uint256 finishBaseRate, address lastTroveRedeemed);\\n  event TroveCollateralUpdate(address trove, address token, uint256 newAmount, uint256 newCollateralization);\\n  event TroveDebtUpdate(address trove, address actor, address token, uint256 newAmount, uint256 baseRate, uint256 newCollateralization, uint256 feePaid);\\n\\n  constructor() {\\n    // to prevent contract implementation to be reinitialized by someone else\\n    _disableInitializers();\\n  }\\n\\n  modifier troveExists(address _token, address _trove) {\\n    require(containsTrove(_token, _trove), \\\"f9fac the trove has not been created by the factory\\\");\\n    _;\\n  }\\n\\n  // solhint-disable-next-line func-visibility\\n  function initialize(address _stableCoin, address _feeRecipient) public initializer {\\n    __Ownable_init();\\n    __Pausable_init();\\n    stableCoin = IMintableToken(_stableCoin);\\n    feeRecipient = IFeeRecipient(_feeRecipient);\\n    stableCoin.approve(address(feeRecipient), BONQMath.MAX_INT);\\n  }\\n\\n  /// @dev make the contract upgradeable by its owner\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  function name() public view virtual returns (string memory);\\n\\n  /**\\n   * @dev returns the number of troves for specific token\\n   */\\n  function troveCount(address _token) public view override returns (uint256) {\\n    return _troves[_token].list._size;\\n  }\\n\\n  /**\\n   * @dev returns the last trove by maximum collaterization ratio\\n   */\\n  function lastTrove(address _token) public view override returns (address) {\\n    return _troves[_token].list._last;\\n  }\\n\\n  /**\\n   * @dev returns the first trove by minimal collaterization ratio\\n   */\\n  function firstTrove(address _token) public view override returns (address) {\\n    return _troves[_token].list._first;\\n  }\\n\\n  /**\\n   * @dev returns the next trove by collaterization ratio\\n   */\\n  function nextTrove(address _token, address _trove) public view override returns (address) {\\n    return _troves[_token].list._values[_trove].next;\\n  }\\n\\n  /**\\n   * @dev returns the previous trove by collaterization ratio\\n   */\\n  function prevTrove(address _token, address _trove) public view override returns (address) {\\n    return _troves[_token].list._values[_trove].prev;\\n  }\\n\\n  /**\\n   * @dev returns and checks if such trove exists for this token\\n   */\\n  function containsTrove(address _token, address _trove) public view override returns (bool) {\\n    return _troves[_token].list._values[_trove].next != address(0x0);\\n  }\\n\\n  /**\\n   * @dev returns total collateral among all troves for specific token\\n   */\\n  function totalCollateral(address _token) public view override returns (uint256) {\\n    return _troves[_token].totalCollateral;\\n  }\\n\\n  /**\\n   * @dev returns total debt among all troves for specific token\\n   */\\n  function totalDebtForToken(address _token) public view override returns (uint256) {\\n    return _troves[_token].totalDebt;\\n  }\\n\\n  /**\\n   * @dev returns total collateral ratio averaged between troves for specific token\\n   */\\n  function tokenCollateralization(address _token) public view returns (uint256) {\\n    return (_troves[_token].totalCollateral * DECIMAL_PRECISION) / _troves[_token].totalDebt;\\n  }\\n\\n  /**\\n   * @dev returns contract address of LiquidationPool for specific token\\n   */\\n  function liquidationPool(address _token) public view override returns (ILiquidationPool) {\\n    return _troves[_token].liquidationPool;\\n  }\\n\\n  /// @dev calculates redemption fee from CR\\n  /// @param _collateralRatio collateral ratio of the trove\\n  /// @param _mcr minimal collateral ratio of the trove\\n  /// @return uint256 resulting fee\\n  function _getRedemptionFeeRatio(uint256 _collateralRatio, uint256 _mcr) private pure returns (uint256) {\\n    uint256 extraCR = (_collateralRatio - _mcr).min(_mcr * 15);\\n    uint256 a = (((extraCR * extraCR) / _mcr) * DECIMAL_PRECISION) / _mcr;\\n    uint256 b = _mcr * 45 - DECIMAL_PRECISION * 44;\\n    uint256 tmpMin = (PERCENT10 * DECIMAL_PRECISION) / b;\\n    uint256 minFee = tmpMin > PERCENT ? tmpMin - PERCENT_05 : PERCENT_05;\\n\\n    return (a * DECIMAL_PRECISION) / b + minFee;\\n  }\\n\\n  /**\\n   * @dev returns fee from redeeming the amount\\n   */\\n  function getRedemptionFeeRatio(address _trove) public view override returns (uint256) {\\n    address collateral = address(ITrove(_trove).token());\\n    ITokenPriceFeed ttpf = tokenToPriceFeed;\\n    uint256 ratio = _getRedemptionFeeRatio(ITrove(_trove).collateralization(), ttpf.mcr(collateral));\\n    return ratio.min(ttpf.mrf(collateral));\\n  }\\n\\n  /**\\n   * @dev returns fee from redeeming the amount\\n   */\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) public pure override returns (uint256) {\\n    return (_amount * _feeRatio) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev returns reduced fee and amount to repay based on trove BONQ stake\\n   */\\n  function getReducedFeeAndRefundAmount(uint256 _fee, address _trove) public view override returns (uint256 _reducedFee, uint256 _refundAmount) {\\n    ITrove trove = ITrove(_trove);\\n    uint256 _troveBonqStake = trove.bonqStake();\\n    uint256 _maxTroveBONQStake_cached = maxTroveBONQStake;\\n    if (_troveBonqStake == 0 || _maxTroveBONQStake_cached == 0) return (_fee, 0);\\n    if (_troveBonqStake >= _maxTroveBONQStake_cached) return (0, _fee);\\n    _refundAmount = (_fee * ((_troveBonqStake * DECIMAL_PRECISION) / _maxTroveBONQStake_cached)) / DECIMAL_PRECISION;\\n    _reducedFee = _fee - _refundAmount;\\n  }\\n\\n  /**\\n   * @dev returns amount to be used in redemption excluding fee,\\n   */\\n  function getRedemptionAmount(uint256 _feeRatio, uint256 _amount) public pure returns (uint256) {\\n    return (_amount * DECIMAL_PRECISION) / (DECIMAL_PRECISION + _feeRatio);\\n  }\\n\\n  /**\\n   * @dev returns fee from borrowing the amount\\n   */\\n  function getBorrowingFee(uint256 _amount) public view override returns (uint256) {\\n    return feeRecipient.getBorrowingFee(_amount);\\n  }\\n\\n  /**\\n   * @dev sets address of the Trove implementation for minimal clones\\n   */\\n  function setTroveImplementation(address _troveImplementation) public onlyOwner {\\n    emit TroveImplementationSet(troveImplementation, _troveImplementation);\\n    troveImplementation = _troveImplementation;\\n  }\\n\\n  /**\\n   * @dev sets address of the contract for stableCoin issuance\\n   */\\n  function setTokenOwner() public onlyOwner {\\n    IMintableToken stableCoin_cached = stableCoin;\\n    tokenOwner = IMintableTokenOwner(address(stableCoin_cached.owner()));\\n    require(tokenOwner.token() == stableCoin_cached, \\\"41642 the StableCoin must be owned by the token owner\\\");\\n    require(tokenOwner.owner() == address(this), \\\"41642 this contract must be the owner of the token owner\\\");\\n  }\\n\\n  /**\\n   * @dev sets address of the service-fee-generator implementation for minimal clones\\n   */\\n  function setServiceFeeImplementation(address _serviceFeeImplementation) public onlyOwner {\\n    emit ServiceFeeImplementationSet(serviceFeeImplementation, _serviceFeeImplementation);\\n    serviceFeeImplementation = _serviceFeeImplementation;\\n  }\\n\\n  /**\\n   * @dev sets contract address of FeeRecipient\\n   */\\n  function setFeeRecipient(address _feeRecipient) public onlyOwner {\\n    feeRecipient = IFeeRecipient(_feeRecipient);\\n    stableCoin.approve(address(feeRecipient), BONQMath.MAX_INT);\\n  }\\n\\n  /**\\n   * @dev sets contract address of TokenPriceFeed\\n   */\\n  function setTokenPriceFeed(address _tokenPriceFeed) public onlyOwner {\\n    tokenToPriceFeed = ITokenPriceFeed(_tokenPriceFeed);\\n  }\\n\\n  /**\\n   * @dev sets contract address of LiquidationPool for specific token\\n   */\\n  function setLiquidationPool(address _token, address _liquidationPool) public onlyOwner {\\n    _troves[_token].liquidationPool = ILiquidationPool(_liquidationPool);\\n  }\\n\\n  /**\\n   * @dev sets contract address of StabilityPool\\n   */\\n  function setStabilityPool(address _stabilityPool) external override onlyOwner {\\n    IStabilityPoolBase _stabilityPoolInstance = IStabilityPoolBase(_stabilityPool);\\n    stabilityPool = _stabilityPoolInstance;\\n    bonqToken = _stabilityPoolInstance.bonqToken();\\n  }\\n\\n  /**\\n   * @dev sets contract address of ArbitragePool\\n   */\\n  function setArbitragePool(address _arbitragePool) external override onlyOwner {\\n    arbitragePool = _arbitragePool;\\n  }\\n\\n  /// @dev set the ratio of the arbitrage gains which should go to the sender of the message\\n  /// @param _arbitrageShareRatio the ratio by which the arbitrage gains will be multiplied\\n  function setArbitrageShareRatio(uint256 _arbitrageShareRatio) public onlyOwner {\\n    require(_arbitrageShareRatio <= 100, \\\"d7dc8 the share can not be over 100%\\\");\\n    arbitrageShareRatio = (_arbitrageShareRatio * DECIMAL_PRECISION) / 100;\\n  }\\n\\n  /**\\n   * @dev sets contract address of Wrapped native token, along with liquidationPool\\n   */\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external override onlyOwner {\\n    require(address(WETHContract) == address(0x0), \\\"cd9f3 WETH can only be set once\\\");\\n    WETHContract = IWETH(_WETH);\\n    setLiquidationPool(_WETH, _liquidationPool);\\n  }\\n\\n  /**\\n   * @dev sets new amount for trove BONQ state at which redemption fee refunding equals to 100%\\n   */\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setMaxTroveBONQStake(uint256 _newAmount) external override onlyOwner {\\n    maxTroveBONQStake = _newAmount;\\n  }\\n\\n  /**\\n   * @dev transfers contract ownership\\n   * this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the\\n   * ownership of the TokenOwner contract and the new TroveFactory is able to add minters\\n   */\\n  function transferTokenOwnership(address _newOwner) public onlyOwner {\\n    tokenOwner.transferTokenOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev transfers contract ownership\\n   * this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the\\n   * ownership of the TokenOwner contract and the new TroveFactory is able to add minters\\n   */\\n  function transferTokenOwnerOwnership(address _newOwner) public onlyOwner {\\n    tokenOwner.transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev toggles the pause state of the contract\\n   * if the contract is paused borrowing is disabled\\n   * and liquidation with Stability Pool is impossible (Community liquidations still allowed)\\n   */\\n  function togglePause() public onlyOwner {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n\\n  /**\\n   * @dev function to be called from trove to update total collateral value of all troves of this tokens\\n   * @param _increase bool that indicates \\\"+\\\" or \\\"-\\\" operation\\n   */\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) public override troveExists(_token, msg.sender) {\\n    if (_increase) {\\n      _troves[_token].totalCollateral += _amount;\\n    } else {\\n      _troves[_token].totalCollateral -= _amount;\\n    }\\n    emit CollateralUpdate(_token, _troves[_token].totalCollateral);\\n  }\\n\\n  /**\\n   * @dev deposits native token into trove after wrapping the ETH (EWT, AVAX, etc) into WETH (WEWT, WAVAX, etc)\\n   * @param _trove tove to be deposited in\\n   * @param _newNextTrove hint for next trove position\\n   */\\n  function increaseCollateralNative(address _trove, address _newNextTrove) public payable override {\\n    ITrove targetTrove = ITrove(_trove);\\n    IWETH WETHContract_cached = WETHContract;\\n    require(address(targetTrove.token()) == address(WETHContract_cached), \\\"b8282 not a valid trove\\\");\\n    WETHContract_cached.deposit{value: msg.value}();\\n    require(WETHContract.transfer(_trove, msg.value), \\\"b8282 could not transfer the requested amount\\\");\\n    targetTrove.increaseCollateral(0, _newNextTrove);\\n  }\\n\\n  /**\\n   * @dev creates a minimal clone from the implementation address\\n   * @param _implementation any supported implementation\\n   */\\n  function cloneImplementation(address _implementation) internal returns (address clone) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, _implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      clone := create(0, ptr, 0x37)\\n    }\\n  }\\n\\n  /**\\n   * @dev creates new ServiceFeeGenerator for user\\n   * @param _trove any valid trove that user owns\\n   * @param _feeAmount amount of fee to take (must be >= minimal borrow)\\n   * @param _feeInterval interval required for payments\\n   */\\n  function createNewServiceFee(\\n    ITrove _trove,\\n    uint256 _feeAmount,\\n    uint256 _feeInterval\\n  ) public override returns (IServiceFeeGenerator newServiceFee) {\\n    // TODO add a mechanism to identify Service Fee contracts which were created by the trove Factory\\n    require(containsTrove(address(_trove.token()), address(_trove)), \\\"daa708 not a valid trove\\\");\\n    require(_trove.owner() == msg.sender, \\\"daa708 msg.sender must be trove owner\\\");\\n\\n    address serviceFeeAddress = cloneImplementation(serviceFeeImplementation);\\n    require(serviceFeeAddress != address(0), \\\"ERC1167: create failed\\\");\\n\\n    _trove.addOwner(serviceFeeAddress);\\n\\n    newServiceFee = IServiceFeeGenerator(serviceFeeAddress);\\n    newServiceFee.initialize(_trove, _feeAmount, _feeInterval);\\n    emit NewServiceFee(serviceFeeAddress, msg.sender, address(_trove));\\n  }\\n\\n  /**\\n   * @dev creates a trove if the token is supported\\n   * @param _token any supported token address\\n   */\\n  function createTrove(address _token) public override returns (ITrove trove) {\\n    IMintableTokenOwner tokenOwner_cached = tokenOwner;\\n    // troves can only be created after the token owner has been set. This is a safety check not security\\n    require(address(tokenOwner_cached) != address(0x0), \\\"66c10 the token owner must be set\\\");\\n    require(tokenOwner_cached.owner() == address(this), \\\"66c10 the token owner's owner must be the trove factory\\\");\\n    // a token without a price feed has a CR of zero and is useless\\n    require(tokenToPriceFeed.tokenPriceFeed(_token) != address(0x0), \\\"66c10 the token price feed must be set\\\");\\n\\n    address troveAddress = cloneImplementation(troveImplementation);\\n    require(troveAddress != address(0), \\\"ERC1167: create failed\\\");\\n\\n    trove = ITrove(troveAddress);\\n    //    trove.initialize(address(this), _token, msg.sender);\\n    trove.initialize(_token, msg.sender);\\n\\n    require(_troves[_token].list.add(troveAddress, address(0x0), false), \\\"66c10 trove could not be added to the list\\\");\\n    //allow the trove to transfer from the liquidation pool\\n    _troves[_token].liquidationPool.approveTrove(troveAddress);\\n    // allow the trove to mint stableCoin\\n    tokenOwner_cached.addMinter(troveAddress);\\n\\n    emit NewTrove(troveAddress, _token, msg.sender);\\n  }\\n\\n  /**\\n   * @dev creates a trove with collateral and borrows from it\\n   * @param _token any supported token address\\n   * @param _collateralAmount a positive amount of collateral to transfer from the sender's account or zero\\n   * @param _recipient is the address to which the newly minted tokens will be transferred\\n   * @param _borrowAmount the value of the minting\\n   * @param _nextTrove is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\\n   */\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) public override {\\n    ITrove trove = createTrove(_token);\\n    IERC20(_token).safeTransferFrom(msg.sender, address(trove), _collateralAmount);\\n    trove.increaseCollateral(0, address(0));\\n    if (_borrowAmount >= DECIMAL_PRECISION) trove.borrow(_recipient, _borrowAmount, _nextTrove);\\n  }\\n\\n  function liquidateTrove(address _trove, address _token) public troveExists(_token, _trove) {\\n    ITrove trove = ITrove(_trove);\\n    uint256 liquidationReserve = trove.liquidationReserve();\\n    trove.liquidate();\\n    stableCoin.transferFrom(_trove, msg.sender, liquidationReserve);\\n  }\\n\\n  /**\\n   * @dev remove a trove from the list and send any remaining token balance to the owner\\n   * @param _trove is the trove which will be removed\\n   */\\n  function removeTrove(address _token, address _trove) public override troveExists(_token, _trove) {\\n    ITrove trove = ITrove(_trove);\\n    require(trove.owner() == msg.sender || _trove == msg.sender, \\\"173fa only the owner can remove the trove from the list\\\");\\n    require(trove.debt() == 0, \\\"173fa repay the debt before removing the trove\\\");\\n    IERC20 token = IERC20(trove.token());\\n    trove.setArbitrageParticipation(false);\\n    uint256 tokenBalance = token.balanceOf(_trove);\\n\\n    if (tokenBalance > 0) {\\n      // we can safely decrease the balance to zero with a newNextTrove of 0x0 because the debt is zero and\\n      // insertTrove will not be called\\n      // the collateral should be sent to the owner\\n      // TODO: add test for this case\\n      trove.decreaseCollateral(trove.owner(), tokenBalance, address(0x0));\\n    }\\n    require(_troves[_token].list.remove(_trove), \\\"173fa trove could not be removed from the list\\\");\\n    tokenOwner.revokeMinter(_trove);\\n    _troves[_token].liquidationPool.unapproveTrove(_trove);\\n    emit TroveRemoved(_trove);\\n  }\\n\\n  /**\\n   * @dev insert a trove in the sorted list of troves. the troves must be sorted by collateralisation ratio CR\\n   * the sender must be the trove which will be inserted in the list\\n   * @param _newNextTrove is the trove before which the trove will be added\\n   */\\n  function insertTrove(address _token, address _newNextTrove) public override troveExists(_token, msg.sender) {\\n    require(containsTrove(_token, _newNextTrove) || _newNextTrove == address(0), \\\"3a669 the trove hint must exist in the list or be 0x0\\\");\\n\\n    // if now hint is provided we start by trying the last trove in the list\\n    if (_newNextTrove == address(0)) {\\n      _newNextTrove = lastTrove(_token);\\n    }\\n\\n    // if the NewNextTrove is the same as the trove being changed, then it should be changed to the trove's nextTrove\\n    // unless the trove is the lastTrove in which case it is changed to the previousTrove\\n    // insertTrove is never called if there is only one trove in the list\\n    if (_newNextTrove == msg.sender) {\\n      address nextTroveAddress = nextTrove(_token, _newNextTrove);\\n      // the lastTrove has itself as the nextTrove\\n      _newNextTrove = _newNextTrove != nextTroveAddress ? nextTroveAddress : prevTrove(_token, _newNextTrove);\\n    }\\n\\n    ITrove trove = ITrove(msg.sender);\\n    ITrove ref = ITrove(_newNextTrove);\\n    bool insertBefore = true;\\n\\n    // first remove the trove from the list to avoid trying to insert it before or after itself\\n    require(_troves[_token].list.remove(address(trove)), \\\"3a669 trove could not be removed from the list\\\");\\n    if (trove.debt() == 0) {\\n      // troves with zero debt have infinite collateralisation and can be put safely at the end of the list\\n      require(_troves[_token].list.add(address(trove), address(0x0), false), \\\"3a669 trove could not be inserted in the list\\\");\\n      emit TroveInserted(_token, address(trove), address(0x0), false);\\n    } else {\\n      uint256 icr = trove.collateralization();\\n      uint256 refIcr = ref.collateralization();\\n\\n      if (refIcr >= icr) {\\n        // if the first trove in the list has a bigger CR then this trove becomes the new first trove. No loop required\\n        if (_newNextTrove != firstTrove(_token)) {\\n          do {\\n            // the previous trove of the new next trove should have a smaller or equal CR to the inserted trove\\n            // it is cheaper (in gas) to assign the reference to the previous trove and insert after than to check twice for the CR\\n            // this is why the loop is a \\\"do while\\\" instead of a \\\"while do\\\"\\n            ref = ITrove(prevTrove(_token, address(ref)));\\n            refIcr = ref.collateralization();\\n          } while (refIcr > icr && address(ref) != _troves[_token].list._first);\\n        }\\n      }\\n      // the ICR of the newNextTrove is smaller than the inserted trove's\\n      else {\\n        // only loop through the troves if the newNextTrove is not the last\\n        if (_newNextTrove != lastTrove(_token)) {\\n          do {\\n            // the previous trove of the new next trove should have a smaller or equal CR to the inserted trove\\n            ref = ITrove(nextTrove(_token, address(ref)));\\n            refIcr = ref.collateralization();\\n          } while (refIcr < icr && address(ref) != _troves[_token].list._last);\\n        }\\n      }\\n\\n      insertBefore = refIcr > icr;\\n\\n      require(_troves[_token].list.add(address(trove), address(ref), insertBefore), \\\"3a669 trove could not be inserted in the list\\\");\\n      emit TroveInserted(_token, address(trove), address(ref), insertBefore);\\n    }\\n  }\\n\\n  /**\\n   * @dev redeem all collateral the trove can provide\\n   * @param _recipient is the trove _recipient to redeem colateral to and take stableCoin from\\n   */\\n  function _redeemFullTrove(address _recipient, address _trove) internal returns (uint256 _stableAmount, uint256 _collateralRecieved) {\\n    return _redeemPartTrove(_recipient, _trove, ITrove(_trove).netDebt(), address(0));\\n  }\\n\\n  /**\\n   * @dev redeem collateral from the tove to fit desired stableCoin amount\\n   * @param _recipient is the trove _recipient to redeem colateral to and take stableCoin from\\n   * @param _stableAmount the desired amount of StableCoin to pay for redemption\\n   * @param _newNextTrove hint for the of the nextNewTrove after redemption\\n   */\\n  function _redeemPartTrove(\\n    address _recipient,\\n    address _trove,\\n    uint256 _stableAmount,\\n    address _newNextTrove\\n  ) internal returns (uint256 stableAmount, uint256 collateralRecieved) {\\n    ITrove trove = ITrove(_trove);\\n    stableCoin.transferFrom(_recipient, _trove, _stableAmount);\\n    return trove.redeem(_recipient, _newNextTrove);\\n  }\\n\\n  /**\\n   * @dev commits full redemptions until troves liquidity is less\\n   */\\n  function commitFullRedemptions(RedemptionInfo memory _redInfo, uint256 _maxRate) internal returns (RedemptionInfo memory) {\\n    ITrove currentRedemptionTrove = ITrove(_redInfo.currentTroveAddress);\\n    uint256 currentFeeRatio = getRedemptionFeeRatio(_redInfo.currentTroveAddress) + feeRecipient.baseRate();\\n    uint256 amountStableLeft = getRedemptionAmount(currentFeeRatio, _redInfo.stableCoinLeft);\\n    while (0 < currentRedemptionTrove.netDebt() && currentRedemptionTrove.netDebt() <= amountStableLeft && currentFeeRatio < _maxRate) {\\n      _redInfo = commitFullRedeem(_redInfo, currentFeeRatio);\\n      currentFeeRatio = getRedemptionFeeRatio(_redInfo.currentTroveAddress);\\n      amountStableLeft = getRedemptionAmount(currentFeeRatio, _redInfo.stableCoinLeft);\\n      currentRedemptionTrove = ITrove(_redInfo.currentTroveAddress);\\n    }\\n    return _redInfo;\\n  }\\n\\n  /**\\n   * @dev commits full redemption for the current trove, should be called after checks\\n   */\\n  function commitFullRedeem(RedemptionInfo memory _redInfo, uint256 _currentFeeRatio) internal returns (RedemptionInfo memory) {\\n    address nextTroveAddress = nextTrove(_redInfo.collateralToken, _redInfo.currentTroveAddress);\\n    (uint256 stblRed, uint256 colRed) = _redeemFullTrove(msg.sender, _redInfo.currentTroveAddress);\\n\\n    _redInfo.stableCoinRedeemed += stblRed;\\n    uint256 newFee = getRedemptionFee(_currentFeeRatio, stblRed);\\n    (uint256 reducedFee, uint256 refundAmount) = getReducedFeeAndRefundAmount(newFee, _redInfo.currentTroveAddress);\\n    _redInfo.feeAmount += reducedFee;\\n    _redInfo.stableCoinLeft -= stblRed + reducedFee;\\n    _redInfo.collateralRedeemed += colRed;\\n    _redInfo.lastTroveRedeemed = _redInfo.currentTroveAddress;\\n    _redInfo.currentTroveAddress = nextTroveAddress;\\n\\n    _refundFeeToTrove(_redInfo.currentTroveAddress, refundAmount);\\n    return _redInfo;\\n  }\\n\\n  /**\\n   * @dev check if the Trove guessed ICR matches and commits partial redemptios\\n   */\\n  function commitPartRedeem(\\n    RedemptionInfo memory _redInfo,\\n    uint256 _maxRate,\\n    uint256 _lastTroveCurrentICR,\\n    address _lastTroveNewPositionHint\\n  ) internal returns (RedemptionInfo memory) {\\n    ITrove currentRedemptionTrove = ITrove(_redInfo.currentTroveAddress);\\n    uint256 currentFeeRatio = getRedemptionFeeRatio(_redInfo.currentTroveAddress) + feeRecipient.baseRate();\\n    if (currentRedemptionTrove.collateralization() == _lastTroveCurrentICR && currentFeeRatio < _maxRate) {\\n      uint256 maxLastRedeem = BONQMath.min(getRedemptionAmount(currentFeeRatio, _redInfo.stableCoinLeft), currentRedemptionTrove.netDebt());\\n      (uint256 stblRed, uint256 colRed) = _redeemPartTrove(msg.sender, _redInfo.currentTroveAddress, maxLastRedeem, _lastTroveNewPositionHint);\\n      _redInfo.stableCoinRedeemed += stblRed;\\n      uint256 newFee = getRedemptionFee(currentFeeRatio, stblRed);\\n      (uint256 reducedFee, uint256 refundAmount) = getReducedFeeAndRefundAmount(newFee, _redInfo.currentTroveAddress);\\n      _redInfo.feeAmount += reducedFee;\\n      _redInfo.stableCoinLeft -= stblRed + reducedFee;\\n      _redInfo.collateralRedeemed += colRed;\\n      _redInfo.lastTroveRedeemed = _redInfo.currentTroveAddress;\\n\\n      _refundFeeToTrove(_redInfo.currentTroveAddress, refundAmount);\\n    }\\n    return _redInfo;\\n  }\\n\\n  /**\\n   * @dev redeem desired StableCoin amount for desired collateral tokens\\n   * @param _stableAmount the desired amount of StableCoin to pay for redemption\\n   * @param _maxRate is max fee (in % with 1e18 precision) allowed to pay\\n   * @param _lastTroveCurrentICR ICR of the last trove to be redeemed, if matches then the hint is working and it redeems\\n   * @param _lastTroveNewPositionHint hint for the of the nextNewTrove after redemption for the latest trove\\n   */\\n  function redeemStableCoinForCollateral(\\n    address _collateralToken,\\n    uint256 _stableAmount,\\n    uint256 _maxRate,\\n    uint256 _lastTroveCurrentICR,\\n    address _lastTroveNewPositionHint\\n  ) public {\\n    IMintableToken stableCoin_cached = stableCoin;\\n    require(ITrove(firstTrove(_collateralToken)).collateralization() > DECIMAL_PRECISION, \\\"a7f99 first trove is undercollateralised and must be liquidated\\\");\\n    require(stableCoin_cached.balanceOf(msg.sender) >= _stableAmount, \\\"a7f99 insufficient Fiat balance\\\");\\n    require(stableCoin_cached.allowance(msg.sender, address(this)) >= _stableAmount, \\\"a7f99 StableCoin is not approved for factory\\\");\\n\\n    IFeeRecipient feeRecipient_cache = feeRecipient;\\n    RedemptionInfo memory redInfo;\\n    redInfo.collateralToken = _collateralToken;\\n    redInfo.stableCoinLeft = _stableAmount;\\n\\n    redInfo.currentTroveAddress = firstTrove(_collateralToken);\\n    redInfo = commitFullRedemptions(redInfo, _maxRate);\\n    redInfo = commitPartRedeem(redInfo, _maxRate, _lastTroveCurrentICR, _lastTroveNewPositionHint);\\n    if (redInfo.collateralRedeemed > 0) {\\n      stableCoin_cached.transferFrom(msg.sender, address(this), redInfo.feeAmount);\\n      feeRecipient_cache.takeFees(redInfo.feeAmount);\\n\\n      // TODO: increase base rate after each trove redemption\\n      uint256 startBaseRate = feeRecipient_cache.baseRate();\\n      uint256 finishBaseRate = feeRecipient_cache.increaseBaseRate((redInfo.stableCoinRedeemed * DECIMAL_PRECISION) / stableCoin_cached.totalSupply());\\n      emit Redemption(_collateralToken, redInfo.stableCoinRedeemed, redInfo.collateralRedeemed, redInfo.stableCoinLeft, startBaseRate, finishBaseRate, redInfo.lastTroveRedeemed);\\n    }\\n  }\\n\\n  function _refundFeeToTrove(address _troveAddress, uint256 _refundAmount) private {\\n    if (_refundAmount > 0) {\\n      stableCoin.transferFrom(msg.sender, _troveAddress, _refundAmount);\\n      ITrove(_troveAddress).repay(0, _troveAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev function to be called from trove to change totalDebt\\n   * @param _borrow indicates if it is borrow or repay/liquidatin\\n   */\\n  function updateTotalDebt(uint256 _amount, bool _borrow) public override {\\n    ITrove trove = ITrove(msg.sender);\\n    address token = address(trove.token());\\n    require(containsTrove(token, msg.sender), \\\"fbfd5 not a valid trove\\\");\\n    if (_borrow) {\\n      totalDebt += _amount;\\n      _troves[token].totalDebt += _amount;\\n    } else {\\n      totalDebt -= _amount;\\n      _troves[token].totalDebt -= _amount;\\n    }\\n    emit DebtUpdate(token, totalDebt);\\n  }\\n\\n  /// @dev to emit Liquidation event, to be called from a trove after liquidation.\\n  /// @param  _token address of token\\n  /// @param  _trove address of the Trove\\n  /// @param  stabilityPoolLiquidation address of StabilityPool, 0x0 if Community LiquidationPool\\n  /// @param  collateral uint256 amount of collateral\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) public override {\\n    emit TroveLiquidated(_trove, _token, tokenToPriceFeed.tokenPrice(_token), stabilityPoolLiquidation, collateral);\\n  }\\n\\n  /// @dev to emit Trove's debt update event, to be called from trove\\n  /// @param  _token address of token\\n  /// @param  _newAmount new trove's debt value\\n  /// @param  _newCollateralization new trove's collateralization value\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external override {\\n    emit TroveDebtUpdate(\\n      address(msg.sender), // solhint-disable-next-line avoid-tx-origin\\n      address(tx.origin),\\n      _token,\\n      _newAmount,\\n      feeRecipient.baseRate(),\\n      _newCollateralization,\\n      _feePaid\\n    );\\n  }\\n\\n  /// @dev to emit Collateral update event, to be called from trove\\n  /// @param  _token address of token\\n  /// @param  _newAmount new trove's Collateral value\\n  /// @param  _newCollateralization new trove's collateralization value\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external override {\\n    emit TroveCollateralUpdate(address(msg.sender), _token, _newAmount, _newCollateralization);\\n  }\\n}\\n\",\"keccak256\":\"0x5e8e95412d1afa7671d4068c837f40e6bf9fb21b252bb3fd6643f4aa2f1ecd0f\",\"license\":\"MIT\"},\"contracts/utils/BONQMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary BONQMath {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant MINUTE_DECAY_FACTOR = 999_037_758_833_783_000;\\n\\n  /// @dev return the smaller of two numbers\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @dev return the bigger of two numbers\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Multiply two decimal numbers and use normal rounding rules:\\n   *  -round product up if 19'th mantissa digit >= 5\\n   *  -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n    uint256 prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by function that represent time in units of minutes:\\n   * 1) IFeeRecipient.calcDecayedBaseRate\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   * @param _base number to exponentially increase\\n   * @param _minutes power in minutes passed\\n   */\\n  function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n    if (_minutes > 525_600_000) {\\n      _minutes = 525_600_000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint256 y = DECIMAL_PRECISION;\\n    uint256 x = _base;\\n    uint256 n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n}\\n\",\"keccak256\":\"0x0b5672d93c340d884faa6b48b29db53f3efcd2edc03b87a2590d7fed5df7cf10\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n  uint256 public constant BORROWING_RATE = PERCENT_05;\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n}\\n\",\"keccak256\":\"0x6a665a01a9a7f729c66450e6b996c07ac47009851acacc6fcb11eb974ef20b5c\",\"license\":\"MIT\"},\"contracts/utils/linked-address-list.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n/// @title implements LinkedList structure used to store/operate sorted Troves\\nlibrary LinkedAddressList {\\n  struct EntryLink {\\n    address prev;\\n    address next;\\n  }\\n\\n  struct List {\\n    address _last;\\n    address _first;\\n    uint256 _size;\\n    mapping(address => EntryLink) _values;\\n  }\\n\\n  function add(\\n    List storage _list,\\n    address _element,\\n    address _reference,\\n    bool _before\\n  ) internal returns (bool) {\\n    require(_reference == address(0x0) || _list._values[_reference].next != address(0x0), \\\"79d3d _ref neither valid nor 0x\\\");\\n    // the lement must not exist in order to be added\\n    EntryLink storage element_values = _list._values[_element];\\n    if (element_values.prev == address(0x0)) {\\n      // the list is empty\\n      if (_list._last == address(0x0)) {\\n        // if it is the first element in the list, it refers to itself to indicate this\\n        element_values.prev = _element;\\n        element_values.next = _element;\\n        // the new element is now officially the first\\n        _list._first = _element;\\n        // the new element is now officially the last\\n        _list._last = _element;\\n      } else {\\n        if (_before && (_reference == address(0x0) || _reference == _list._first)) {\\n          // the element should be added as the first element\\n          address first = _list._first;\\n          _list._values[first].prev = _element;\\n          element_values.prev = _element;\\n          element_values.next = first;\\n          _list._first = _element;\\n        } else if (!_before && (_reference == address(0x0) || _reference == _list._last)) {\\n          // the element should be added as the last element\\n          address last = _list._last;\\n          _list._values[last].next = _element;\\n          element_values.prev = last;\\n          element_values.next = _element;\\n          _list._last = _element;\\n        } else {\\n          // the element should be inserted in between two elements\\n          EntryLink memory ref = _list._values[_reference];\\n          if (_before) {\\n            element_values.prev = ref.prev;\\n            element_values.next = _reference;\\n            _list._values[_reference].prev = _element;\\n            _list._values[ref.prev].next = _element;\\n          } else {\\n            element_values.prev = _reference;\\n            element_values.next = ref.next;\\n            _list._values[_reference].next = _element;\\n            _list._values[ref.next].prev = _element;\\n          }\\n        }\\n      }\\n      _list._size = _list._size + 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function remove(List storage _list, address _element) internal returns (bool) {\\n    EntryLink memory element_values = _list._values[_element];\\n    if (element_values.next != address(0x0)) {\\n      if (_element == _list._last && _element == _list._first) {\\n        // it is the last element in the list\\n        delete _list._last;\\n        delete _list._first;\\n      } else if (_element == _list._first) {\\n        // simplified process for removing the first element\\n        address next = element_values.next;\\n        _list._values[next].prev = next;\\n        _list._first = next;\\n      } else if (_element == _list._last) {\\n        // simplified process for removing the last element\\n        address new_list_last = element_values.prev;\\n        _list._last = new_list_last;\\n        _list._values[new_list_last].next = new_list_last;\\n      } else {\\n        // set the previous and next to point to each other\\n        address next = element_values.next;\\n        address prev = element_values.prev;\\n        _list._values[next].prev = prev;\\n        _list._values[prev].next = next;\\n      }\\n      // in any case, delete the element itself\\n      delete _list._values[_element];\\n      _list._size = _list._size - 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x2b376c71fa4c0b551771d030408a5d8011bee8cdc1b7af25b2492adfac0cc886\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051615eb662000120600039600081816118e601528181611926015281816121d20152818161221201526122d30152615eb66000f3fe60806040526004361061041a5760003560e01c806379a71baf1161021e578063abdc554111610123578063ddc0e554116100ab578063e7b361541161007a578063e7b3615414610c9e578063ec58839514610cbe578063f0083b4f14610cd5578063f2fde38b14610cf6578063fc7b9c1814610d1657600080fd5b8063ddc0e55414610c02578063deb44c8814610c3e578063e04a3e9014610c5e578063e74b981b14610c7e57600080fd5b8063b85a8b20116100f2578063b85a8b2014610b77578063c11aeb3914610b8c578063c4ae316814610bad578063c531b26614610bc2578063c7089e4314610be257600080fd5b8063abdc554114610b2d578063aceb2d041461078b578063ad09014d14610b42578063b3d5e0ce14610b5757600080fd5b8063914a1ac9116101a657806398d721e01161017557806398d721e014610aab578063992642e514610acb578063a20baee614610a36578063a3e6761014610aec578063a66ca8f214610b0c57600080fd5b8063914a1ac914610a15578063923c1eec14610a365780639385739514610a525780639723ee6014610a7257600080fd5b806380b0dcc9116101ed57806380b0dcc91461097757806381519ef41461099757806382250527146109b757806385ad9175146109d75780638da5cb5b146109f757600080fd5b806379a71baf146108ea5780637deace2d1461090a5780637e059b221461092a57806380054c201461096057600080fd5b8063448d65b41161032457806356e71857116102ac578063631203b01161027b578063631203b01461083957806365d7ddc4146108595780636757634d1461087957806369e5e6e014610899578063715018a6146108d557600080fd5b806356e71857146107b55780635c4f6785146107d55780635c975abb146107f55780635ca7f98d1461081957600080fd5b80634d31a2af116102f35780634d31a2af146107385780634e2f663c146107585780634f1ef28614610778578063517ef1d71461078b57806352d1902d146107a057600080fd5b8063448d65b4146106c457806346904840146106e4578063485cc955146107055780634a7402fb1461072557600080fd5b806321e6b53d116103a75780633659cfe6116103765780633659cfe6146106245780633a297fd8146106445780633e78cf73146106645780633eebf7b9146106845780633f6e0719146106a457600080fd5b806321e6b53d146105a457806328a0e71b146105c45780632aaed16a146105e45780632bcf77411461060457600080fd5b80630cec0d18116103ee5780630cec0d18146104e15780630f2f11461461050157806312552e2514610521578063142af9a21461055657806314ac36d11461058f57600080fd5b80621bed281461041f578063048c661d1461044157806306fdde031461047e578063098d3228146104bd575b600080fd5b34801561042b57600080fd5b5061043f61043a3660046157c6565b610d2d565b005b34801561044d57600080fd5b5060fb54610461906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561048a57600080fd5b50604080518082018252601081526f4f726967696e616c20466163746f727960801b602082015290516104759190615823565b3480156104c957600080fd5b506104d360001981565b604051908152602001610475565b3480156104ed57600080fd5b5061043f6104fc366004615856565b611304565b34801561050d57600080fd5b506104d361051c36600461586f565b61138e565b34801561052d57600080fd5b5061054161053c366004615891565b6113b6565b60408051928352602083019190915201610475565b34801561056257600080fd5b506104d36105713660046158b6565b6001600160a01b0316600090815260fd602052604090206001015490565b34801561059b57600080fd5b5061043f6114a9565b3480156105b057600080fd5b5061043f6105bf3660046158b6565b611703565b3480156105d057600080fd5b5061043f6105df3660046158d3565b61176e565b3480156105f057600080fd5b5061043f6105ff3660046158b6565b61183f565b34801561061057600080fd5b5061043f61061f3660046158b6565b611869565b34801561063057600080fd5b5061043f61063f3660046158b6565b6118dc565b34801561065057600080fd5b5060fc54610461906001600160a01b031681565b34801561067057600080fd5b5061043f61067f3660046158b6565b6119b8565b34801561069057600080fd5b506104d361069f36600461586f565b6119e2565b3480156106b057600080fd5b506104616106bf3660046158b6565b611a08565b3480156106d057600080fd5b506104616106df366004615924565b611a29565b3480156106f057600080fd5b5061010254610461906001600160a01b031681565b34801561071157600080fd5b5061043f6107203660046157c6565b611d37565b61043f6107333660046157c6565b611eef565b34801561074457600080fd5b506104d36107533660046158b6565b612152565b34801561076457600080fd5b5061043f6107733660046158b6565b61218e565b61043f61078636600461596f565b6121c8565b34801561079757600080fd5b506104d3612298565b3480156107ac57600080fd5b506104d36122c6565b3480156107c157600080fd5b5061043f6107d03660046157c6565b612379565b3480156107e157600080fd5b5061043f6107f0366004615856565b6123b2565b34801561080157600080fd5b5060c95460ff165b6040519015158152602001610475565b34801561082557600080fd5b5061043f6108343660046157c6565b6123c0565b34801561084557600080fd5b506104d3610854366004615856565b61251e565b34801561086557600080fd5b5061043f6108743660046157c6565b61258d565b34801561088557600080fd5b5061043f610894366004615a41565b612615565b3480156108a557600080fd5b506104616108b43660046158b6565b6001600160a01b03908116600090815260fd60205260409020600301541690565b3480156108e157600080fd5b5061043f6126fc565b3480156108f657600080fd5b5061043f610905366004615a83565b612710565b34801561091657600080fd5b5061043f6109253660046158b6565b6127f4565b34801561093657600080fd5b506104d36109453660046158b6565b6001600160a01b0316600090815260fd602052604090205490565b34801561096c57600080fd5b506104d36101065481565b34801561098357600080fd5b5061043f610992366004615abe565b612867565b3480156109a357600080fd5b506104616109b23660046157c6565b61296c565b3480156109c357600080fd5b5061043f6109d23660046157c6565b61299d565b3480156109e357600080fd5b506104d36109f23660046158b6565b612f38565b348015610a0357600080fd5b506097546001600160a01b0316610461565b348015610a2157600080fd5b5061010154610461906001600160a01b031681565b348015610a4257600080fd5b506104d3670de0b6b3a764000081565b348015610a5e57600080fd5b5060ff54610461906001600160a01b031681565b348015610a7e57600080fd5b506104d3610a8d3660046158b6565b6001600160a01b0316600090815260fd602052604090206005015490565b348015610ab757600080fd5b5061043f610ac63660046158b6565b613110565b348015610ad757600080fd5b5061010054610461906001600160a01b031681565b348015610af857600080fd5b5060fe54610461906001600160a01b031681565b348015610b1857600080fd5b5061010754610461906001600160a01b031681565b348015610b3957600080fd5b506104d36131bc565b348015610b4e57600080fd5b506104d36131d1565b348015610b6357600080fd5b50610809610b723660046157c6565b6131fb565b348015610b8357600080fd5b506104d361322e565b348015610b9857600080fd5b5061010454610461906001600160a01b031681565b348015610bb957600080fd5b5061043f613243565b348015610bce57600080fd5b5061043f610bdd366004615b1d565b613266565b348015610bee57600080fd5b50610461610bfd3660046157c6565b613827565b348015610c0e57600080fd5b50610461610c1d3660046158b6565b6001600160a01b03908116600090815260fd60205260409020600201541690565b348015610c4a57600080fd5b5061043f610c59366004615b65565b613855565b348015610c6a57600080fd5b5061043f610c79366004615924565b6139f7565b348015610c8a57600080fd5b5061043f610c993660046158b6565b613a44565b348015610caa57600080fd5b50610461610cb93660046158b6565b613add565b348015610cca57600080fd5b506104d36101085481565b348015610ce157600080fd5b5061010554610461906001600160a01b031681565b348015610d0257600080fd5b5061043f610d113660046158b6565b613f73565b348015610d2257600080fd5b506104d36101035481565b8133610d3982826131fb565b610d5e5760405162461bcd60e51b8152600401610d5590615b8a565b60405180910390fd5b610d6884846131fb565b80610d7a57506001600160a01b038316155b610de45760405162461bcd60e51b815260206004820152603560248201527f3361363639207468652074726f76652068696e74206d757374206578697374206044820152740696e20746865206c697374206f722062652030783605c1b6064820152608401610d55565b6001600160a01b038316610e13576001600160a01b03808516600090815260fd60205260409020600301541692505b336001600160a01b03841603610e5f576000610e2f858561296c565b9050806001600160a01b0316846001600160a01b031603610e5957610e548585613827565b610e5b565b805b9350505b6001600160a01b038416600090815260fd6020526040902033908490600190610e8b9060030184613fe9565b610eee5760405162461bcd60e51b815260206004820152602e60248201527f33613636392074726f766520636f756c64206e6f742062652072656d6f76656460448201526d08199c9bdb481d1a19481b1a5cdd60921b6064820152608401610d55565b826001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190615bdd565b600003610ff3576001600160a01b038716600090815260fd60205260408120610f81916003909101908590806141d8565b610f9d5760405162461bcd60e51b8152600401610d5590615bf6565b604080516001600160a01b038981168252851660208201526000818301819052606082015290517ff41ecc43fd86bebfc7d02efecacb0a49ee2df40df4ee0bc7fbe9325576c2fdd19181900360800190a16112fb565b6000836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190615bdd565b90506000836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd9190615bdd565b9050818110611191576110cf89611a08565b6001600160a01b0316886001600160a01b03161461118c575b6110f28985613827565b9350836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111569190615bdd565b9050818111801561118757506001600160a01b03808a16600090815260fd6020526040902060040154858216911614155b6110e8575b61125d565b6001600160a01b03898116600090815260fd602052604090206003015489821691161461125d575b6111c3898561296c565b9350836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190615bdd565b9050818110801561125857506001600160a01b03808a16600090815260fd6020526040902060030154858216911614155b6111b9575b6001600160a01b038916600090815260fd602052604090208282119350611289906003018686866141d8565b6112a55760405162461bcd60e51b8152600401610d5590615bf6565b604080516001600160a01b038b811682528781166020830152861681830152841515606082015290517ff41ecc43fd86bebfc7d02efecacb0a49ee2df40df4ee0bc7fbe9325576c2fdd19181900360800190a150505b50505050505050565b61130c614521565b60648111156113695760405162461bcd60e51b8152602060048201526024808201527f6437646338207468652073686172652063616e206e6f74206265206f766572206044820152633130302560e01b6064820152608401610d55565b606461137d670de0b6b3a764000083615c59565b6113879190615c70565b6101085550565b6000670de0b6b3a76400006113a38484615c59565b6113ad9190615c70565b90505b92915050565b60008060008390506000816001600160a01b031663c478b5bd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114229190615bdd565b61010654909150811580611434575080155b1561144857866000945094505050506114a2565b80821061145e57600087945094505050506114a2565b670de0b6b3a7640000816114728285615c59565b61147c9190615c70565b6114869089615c59565b6114909190615c70565b935061149c8488615c92565b94505050505b9250929050565b6114b1614521565b6101005460408051638da5cb5b60e01b815290516001600160a01b03909216918291638da5cb5b9160048083019260209291908290030181865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190615ca5565b60fe80546001600160a01b0319166001600160a01b0392831690811790915560408051637e062a3560e11b815290519284169263fc0c546a916004808201926020929091908290030181865afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a39190615ca5565b6001600160a01b0316146116175760405162461bcd60e51b815260206004820152603560248201527f34313634322074686520537461626c65436f696e206d757374206265206f776e60448201527432b210313c903a3432903a37b5b2b71037bbb732b960591b6064820152608401610d55565b60fe5460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116849190615ca5565b6001600160a01b0316146117005760405162461bcd60e51b815260206004820152603860248201527f3431363432207468697320636f6e7472616374206d757374206265207468652060448201527f6f776e6572206f662074686520746f6b656e206f776e657200000000000000006064820152608401610d55565b50565b61170b614521565b60fe546040516321e6b53d60e01b81526001600160a01b038381166004830152909116906321e6b53d906024015b600060405180830381600087803b15801561175357600080fd5b505af1158015611767573d6000803e3d6000fd5b5050505050565b60ff546040516384ba3f6960e01b81526001600160a01b0380871660048301527f02bc4d5cd45896d0a40a3c1d56314df3d795dcd0457cfff43d579b1df4a08e309286928892909116906384ba3f6990602401602060405180830381865afa1580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190615bdd565b604080516001600160a01b039485168152928416602084015282015290841660608201526080810183905260a0015b60405180910390a150505050565b611847614521565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b611871614521565b61010454604080516001600160a01b03928316815291831660208301527fb11f992e0256b743c656e4155a7c973abdb563505a0fe01ac94e5053aea0f225910160405180910390a161010480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119245760405162461bcd60e51b8152600401610d5590615cc2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661196d600080516020615e3a833981519152546001600160a01b031690565b6001600160a01b0316146119935760405162461bcd60e51b8152600401610d5590615d0e565b61199c8161457b565b6040805160008082526020820190925261170091839190614583565b6119c0614521565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b60006119f683670de0b6b3a7640000615d5a565b6113a3670de0b6b3a764000084615c59565b6001600160a01b03908116600090815260fd60205260409020600401541690565b6000611a96846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a909190615ca5565b856131fb565b611ae25760405162461bcd60e51b815260206004820152601860248201527f646161373038206e6f7420612076616c69642074726f766500000000000000006044820152606401610d55565b336001600160a01b0316846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4e9190615ca5565b6001600160a01b031614611bb25760405162461bcd60e51b815260206004820152602560248201527f646161373038206d73672e73656e646572206d7573742062652074726f76652060448201526437bbb732b960d91b6064820152608401610d55565b61010554600090611bcb906001600160a01b03166146ee565b90506001600160a01b038116611c1c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610d55565b604051630e0cb96960e31b81526001600160a01b038281166004830152861690637065cb4890602401600060405180830381600087803b158015611c5f57600080fd5b505af1158015611c73573d6000803e3d6000fd5b5050604051633d0d630f60e11b81526001600160a01b0388811660048301526024820188905260448201879052939450849384169250637a1ac61e9150606401600060405180830381600087803b158015611ccd57600080fd5b505af1158015611ce1573d6000803e3d6000fd5b5050604080516001600160a01b03858116825233602083015289168183015290517f98e516a83449d577a8e66a6da3d23ffb1d3495a6139972a33c3721b16c00c8629350908190036060019150a1509392505050565b600054610100900460ff1615808015611d575750600054600160ff909116105b80611d715750303b158015611d71575060005460ff166001145b611dd45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d55565b6000805460ff191660011790558015611df7576000805461ff0019166101001790555b611dff61473b565b611e0761476a565b61010080546001600160a01b038581166001600160a01b03199283168117909355610102805491861691909216811790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015611e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea29190615d6d565b508015611eea576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b6101015460408051637e062a3560e11b8152905184926001600160a01b039081169283929185169163fc0c546a916004808201926020929091908290030181865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190615ca5565b6001600160a01b031614611fbc5760405162461bcd60e51b815260206004820152601760248201527f6238323832206e6f7420612076616c69642074726f76650000000000000000006044820152606401610d55565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ff757600080fd5b505af115801561200b573d6000803e3d6000fd5b50506101015460405163a9059cbb60e01b81526001600160a01b038981166004830152346024830152909116935063a9059cbb925060440190506020604051808303816000875af1158015612064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120889190615d6d565b6120ea5760405162461bcd60e51b815260206004820152602d60248201527f623832383220636f756c64206e6f74207472616e73666572207468652072657160448201526c1d595cdd195908185b5bdd5b9d609a1b6064820152608401610d55565b6040516304796e1f60e31b8152600060048201526001600160a01b0384811660248301528316906323cb70f890604401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116600090815260fd602052604081206001810154905461218490670de0b6b3a764000090615c59565b6113b09190615c70565b612196614521565b60fe5460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401611739565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036122105760405162461bcd60e51b8152600401610d5590615cc2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612259600080516020615e3a833981519152546001600160a01b031690565b6001600160a01b03161461227f5760405162461bcd60e51b8152600401610d5590615d0e565b6122888261457b565b61229482826001614583565b5050565b600260646122af670de0b6b3a76400006001615c59565b6122b99190615c70565b6122c39190615c70565b81565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123665760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610d55565b50600080516020615e3a83398151915290565b612381614521565b6001600160a01b03918216600090815260fd6020526040902060020180546001600160a01b03191691909216179055565b6123ba614521565b61010655565b80826123cc82826131fb565b6123e85760405162461bcd60e51b8152600401610d5590615b8a565b60008490506000816001600160a01b031663eaca974b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561242d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124519190615bdd565b9050816001600160a01b03166328a070256040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561248e57600080fd5b505af11580156124a2573d6000803e3d6000fd5b5050610100546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd91506124db90899033908690600401615d8a565b6020604051808303816000875af11580156124fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fb9190615d6d565b61010254604051630631203b60e41b8152600481018390526000916001600160a01b03169063631203b090602401602060405180830381865afa158015612569573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b09190615bdd565b612595614521565b610101546001600160a01b0316156125ef5760405162461bcd60e51b815260206004820152601f60248201527f636439663320574554482063616e206f6e6c7920626520736574206f6e6365006044820152606401610d55565b61010180546001600160a01b0319166001600160a01b0384161790556122948282612379565b823361262182826131fb565b61263d5760405162461bcd60e51b8152600401610d5590615b8a565b8215612676576001600160a01b038516600090815260fd60205260408120805486929061266b908490615d5a565b909155506126a49050565b6001600160a01b038516600090815260fd60205260408120805486929061269e908490615c92565b90915550505b6001600160a01b038516600081815260fd6020908152604091829020548251938452908301527fa7397a34065f9b23fc4f24516f72718d02d2ec2a5a58e2903ca1150bcc0fa10b910160405180910390a15050505050565b612704614521565b61270e6000614799565b565b7fc699869172ddb8efd1d3379b969fec6a7a23e5d91d2389d8b896c773708a240e3332868661010260009054906101000a90046001600160a01b03166001600160a01b0316631f68f20a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ad9190615bdd565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a0810184905260c0810183905260e001611831565b6127fc614521565b61010554604080516001600160a01b03928316815291831660208301527f56d6f0f8bd180def6e72fc21cc85044e0d4d795564afdd60ae3cb0ec12113070910160405180910390a161010580546001600160a01b0319166001600160a01b0392909216919091179055565b600061287286613add565b90506128896001600160a01b0387163383886147eb565b6040516304796e1f60e31b815260006004820181905260248201526001600160a01b038216906323cb70f890604401600060405180830381600087803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b50505050670de0b6b3a7640000831061296457604051636c665a5560e01b81526001600160a01b038581166004830152602482018590528381166044830152821690636c665a5590606401600060405180830381600087803b15801561294b57600080fd5b505af115801561295f573d6000803e3d6000fd5b505050505b505050505050565b6001600160a01b03918216600090815260fd6020908152604080832093851683526006909301905220600101541690565b81816129a982826131fb565b6129c55760405162461bcd60e51b8152600401610d5590615b8a565b6000839050336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a369190615ca5565b6001600160a01b03161480612a5357506001600160a01b03841633145b612ac55760405162461bcd60e51b815260206004820152603760248201527f3137336661206f6e6c7920746865206f776e65722063616e2072656d6f76652060448201527f7468652074726f76652066726f6d20746865206c6973740000000000000000006064820152608401610d55565b806001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b279190615bdd565b15612b8b5760405162461bcd60e51b815260206004820152602e60248201527f3137336661207265706179207468652064656274206265666f72652072656d6f60448201526d76696e67207468652074726f766560901b6064820152608401610d55565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef9190615ca5565b604051634b20406760e11b8152600060048201529091506001600160a01b0383169063964080ce90602401600060405180830381600087803b158015612c3457600080fd5b505af1158015612c48573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03888116600483015260009350841691506370a0823190602401602060405180830381865afa158015612c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb99190615bdd565b90508015612d9a57826001600160a01b0316633c7034a3846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d329190615ca5565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260006044820152606401600060405180830381600087803b158015612d8157600080fd5b505af1158015612d95573d6000803e3d6000fd5b505050505b6001600160a01b038716600090815260fd60205260409020612dbf9060030187613fe9565b612e225760405162461bcd60e51b815260206004820152602e60248201527f31373366612074726f766520636f756c64206e6f742062652072656d6f76656460448201526d08199c9bdb481d1a19481b1a5cdd60921b6064820152608401610d55565b60fe5460405163cfbd488560e01b81526001600160a01b0388811660048301529091169063cfbd488590602401600060405180830381600087803b158015612e6957600080fd5b505af1158015612e7d573d6000803e3d6000fd5b505050506001600160a01b03878116600090815260fd602052604090819020600201549051633518da6560e11b81528883166004820152911690636a31b4ca90602401600060405180830381600087803b158015612eda57600080fd5b505af1158015612eee573d6000803e3d6000fd5b50506040516001600160a01b03891681527f56df94b000d5de0883743a2b4328178bc012bed334409fdace98ae5b36d6a91a9250602001905060405180910390a150505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190615ca5565b9050600060ff60009054906101000a90046001600160a01b03169050600061308f856001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130209190615bdd565b60405163aa41911f60e01b81526001600160a01b03868116600483015285169063aa41911f90602401602060405180830381865afa158015613066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308a9190615bdd565b614849565b604051630241336f60e21b81526001600160a01b03858116600483015291925061310791841690630904cdbc90602401602060405180830381865afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131009190615bdd565b82906149d5565b95945050505050565b613118614521565b60fb80546001600160a01b0319166001600160a01b03831690811790915560408051635336547960e11b8152905183929163a66ca8f29160048083019260209291908290030181865afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190615ca5565b61010780546001600160a01b0319166001600160a01b03929092169190911790555050565b60646122b9670de0b6b3a76400006005615c59565b60646131e6670de0b6b3a76400006001615c59565b6131f09190615c70565b6122c390600a615c59565b6001600160a01b03918216600090815260fd60209081526040808320938516835260069093019052206001015416151590565b60646122b9670de0b6b3a76400006001615c59565b61324b614521565b60c95460ff161561325e5761270e6149eb565b61270e614a3d565b610100546001600160a01b0316670de0b6b3a764000061328587611a08565b6001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e69190615bdd565b116133595760405162461bcd60e51b815260206004820152603f60248201527f61376639392066697273742074726f766520697320756e646572636f6c6c617460448201527f6572616c6973656420616e64206d757374206265206c697175696461746564006064820152608401610d55565b6040516370a0823160e01b815233600482015285906001600160a01b038316906370a0823190602401602060405180830381865afa15801561339f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c39190615bdd565b10156134115760405162461bcd60e51b815260206004820152601f60248201527f613766393920696e73756666696369656e7420466961742062616c616e6365006044820152606401610d55565b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa15801561345d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134819190615bdd565b10156134e45760405162461bcd60e51b815260206004820152602c60248201527f613766393920537461626c65436f696e206973206e6f7420617070726f76656460448201526b20666f7220666163746f727960a01b6064820152608401610d55565b610102546001600160a01b03166134f9615748565b6001600160a01b03881681526080810187905261351588611a08565b6001600160a01b031660a082015261352d8187614a7a565b905061353b81878787614c45565b6060810151909150156121485760408082015190516323b872dd60e01b81526001600160a01b038516916323b872dd9161357c913391309190600401615d8a565b6020604051808303816000875af115801561359b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bf9190615d6d565b50604081810151905163cbb9435960e01b815260048101919091526001600160a01b0383169063cbb94359906024016020604051808303816000875af115801561360d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136319190615d6d565b506000826001600160a01b0316631f68f20a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136969190615bdd565b90506000836001600160a01b031663cd16e7f7866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370b9190615bdd565b670de0b6b3a764000086602001516137239190615c59565b61372d9190615c70565b6040518263ffffffff1660e01b815260040161374b91815260200190565b6020604051808303816000875af115801561376a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378e9190615bdd565b90507f9485a67cba0aacb19621a77dcac069765b67928a650316d414b368154e673e248a84602001518560600151866080015186868960c0015160405161381397969594939291906001600160a01b039788168152602081019690965260408601949094526060850192909252608084015260a083015290911660c082015260e00190565b60405180910390a150505050505050505050565b6001600160a01b03918216600090815260fd6020908152604080832093851683526006909301905220541690565b60003390506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561389a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138be9190615ca5565b90506138ca81336131fb565b6139165760405162461bcd60e51b815260206004820152601760248201527f6662666435206e6f7420612076616c69642074726f76650000000000000000006044820152606401610d55565b821561396a5783610103600082825461392f9190615d5a565b90915550506001600160a01b038116600090815260fd60205260408120600101805486929061395f908490615d5a565b909155506139b39050565b83610103600082825461397d9190615c92565b90915550506001600160a01b038116600090815260fd6020526040812060010180548692906139ad908490615c92565b90915550505b61010354604080516001600160a01b038416815260208101929092527ff95b4220419afa063ecabab77276c7ed0a3c7175e2f140babd24e56208ce58a29101611831565b604080513381526001600160a01b0385166020820152908101839052606081018290527f91aae5057d63fa752409cbc2eaaebd6e31f0beac641e40f0e762b135a62e847990608001611ee1565b613a4c614521565b61010280546001600160a01b0319166001600160a01b038381169182179092556101005460405163095ea7b360e01b8152600481019290925260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015613ab9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122949190615d6d565b60fe546000906001600160a01b031680613b435760405162461bcd60e51b815260206004820152602160248201527f36366331302074686520746f6b656e206f776e6572206d7573742062652073656044820152601d60fa1b6064820152608401610d55565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613baf9190615ca5565b6001600160a01b031614613c2b5760405162461bcd60e51b815260206004820152603760248201527f36366331302074686520746f6b656e206f776e65722773206f776e6572206d7560448201527f7374206265207468652074726f766520666163746f72790000000000000000006064820152608401610d55565b60ff54604051639878cbb360e01b81526001600160a01b0385811660048301526000921690639878cbb390602401602060405180830381865afa158015613c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9a9190615ca5565b6001600160a01b031603613cff5760405162461bcd60e51b815260206004820152602660248201527f36366331302074686520746f6b656e2070726963652066656564206d757374206044820152651899481cd95d60d21b6064820152608401610d55565b61010454600090613d18906001600160a01b03166146ee565b90506001600160a01b038116613d695760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610d55565b60405163485cc95560e01b81526001600160a01b038581166004830152336024830152919350839182169063485cc95590604401600060405180830381600087803b158015613db757600080fd5b505af1158015613dcb573d6000803e3d6000fd5b5050506001600160a01b038516600090815260fd60205260408120613df79250600301908390806141d8565b613e565760405162461bcd60e51b815260206004820152602a60248201527f36366331302074726f766520636f756c64206e6f7420626520616464656420746044820152691bc81d1a19481b1a5cdd60b21b6064820152608401610d55565b6001600160a01b03848116600090815260fd602052604090819020600201549051630fe1df2960e21b81528383166004820152911690633f877ca490602401600060405180830381600087803b158015613eaf57600080fd5b505af1158015613ec3573d6000803e3d6000fd5b5050604051634c1d96ab60e11b81526001600160a01b0384811660048301528516925063983b2d569150602401600060405180830381600087803b158015613f0a57600080fd5b505af1158015613f1e573d6000803e3d6000fd5b5050604080516001600160a01b03858116825288166020820152338183015290517fd73cf983c0299e0b942c23588e67dbf06af623c7a611345b2fa509a38c6c1ed09350908190036060019150a15050919050565b613f7b614521565b6001600160a01b038116613fe05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d55565b61170081614799565b6001600160a01b0380821660009081526003840160209081526040808320815180830190925280548516825260010154909316908301819052909190156141ce5783546001600160a01b038481169116148015614055575060018401546001600160a01b038481169116145b1561407a5783546001600160a01b03199081168555600185018054909116905561417a565b60018401546001600160a01b03908116908416036140d8576020808201516001600160a01b0316600081815260038701909252604090912080546001600160a01b03199081168317909155600186018054909116909117905561417a565b83546001600160a01b039081169084160361412c57805184546001600160a01b039091166001600160a01b03199182168117865560008181526003870160205260409020600101805490921617905561417a565b60208082015182516001600160a01b0391821660008181526003890190945260408085208054949093166001600160a01b031994851681179093559184529220600101805490911690911790555b6001600160a01b0383166000908152600385016020526040902080546001600160a01b0319908116825560019182018054909116905560028501546141bf9190615c92565b600285015550600190506113b0565b5060009392505050565b60006001600160a01b038316158061420e57506001600160a01b0383811660009081526003870160205260409020600101541615155b61425a5760405162461bcd60e51b815260206004820152601f60248201527f3739643364205f726566206e6569746865722076616c6964206e6f72203078006044820152606401610d55565b6001600160a01b038085166000908152600387016020526040902080549091166145135785546001600160a01b03166142cd5780546001600160a01b0386166001600160a01b031991821681178355600180840180548416831790558801805483168217905587549091161786556144f4565b8280156142fa57506001600160a01b03841615806142fa575060018601546001600160a01b038581169116145b1561435857600180870180546001600160a01b03908116600081815260038b01602052604090208054928a166001600160a01b03199384168117909155855483168117865593850180548316909117905581541690911790556144f4565b8215801561438357506001600160a01b0384161580614383575085546001600160a01b038581169116145b156143df5785546001600160a01b0390811660008181526003890160205260409020600190810180546001600160a01b0319908116948a16948517909155845481169092178455830180548216831790558754161786556144f4565b6001600160a01b03808516600090815260038801602090815260409182902082518084019093528054841683526001015490921691810191909152831561448757805182546001600160a01b039182166001600160a01b0319918216178455600180850180548985169084168117909155600090815260038b01602052604080822080548c8716908616811790915586519095168252902001805490911690911790556144f2565b81546001600160a01b038087166001600160a01b031992831681178555602080850180516001808901805492871692881692909217909155600093845260038d01909252604080842090920180548c8616908716811790915590519093168252902080549092161790555b505b6002860154614504906001615d5a565b60028701555060019050614519565b60009150505b949350505050565b6097546001600160a01b0316331461270e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d55565b611700614521565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156145b657611eea83614e93565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015614610575060408051601f3d908101601f1916820190925261460d91810190615bdd565b60015b6146735760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610d55565b600080516020615e3a83398151915281146146e25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610d55565b50611eea838383614f2f565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09392505050565b600054610100900460ff166147625760405162461bcd60e51b8152600401610d5590615dae565b61270e614f54565b600054610100900460ff166147915760405162461bcd60e51b8152600401610d5590615dae565b61270e614f84565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b614843846323b872dd60e01b85858560405160240161480c93929190615d8a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614fb7565b50505050565b60008061486a61485a84600f615c59565b6148648587615c92565b906149d5565b9050600083670de0b6b3a7640000816148838580615c59565b61488d9190615c70565b6148979190615c59565b6148a19190615c70565b905060006148b8670de0b6b3a7640000602c615c59565b6148c386602d615c59565b6148cd9190615c92565b9050600081670de0b6b3a764000060646148e8826001615c59565b6148f29190615c70565b6148fd90600a615c59565b6149079190615c59565b6149119190615c70565b90506000606461492a670de0b6b3a76400006001615c59565b6149349190615c70565b821161496a5760026064614951670de0b6b3a76400006001615c59565b61495b9190615c70565b6149659190615c70565b61499f565b60026064614981670de0b6b3a76400006001615c59565b61498b9190615c70565b6149959190615c70565b61499f9083615c92565b905080836149b5670de0b6b3a764000087615c59565b6149bf9190615c70565b6149c99190615d5a565b98975050505050505050565b60008183106149e457816113ad565b5090919050565b6149f3615089565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b614a456150d2565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258614a203390565b614a82615748565b60a08301516101025460408051630fb4790560e11b815290516000926001600160a01b031691631f68f20a9160048083019260209291908290030181865afa158015614ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614af69190615bdd565b614b038660a00151612f38565b614b0d9190615d5a565b90506000614b1f8287608001516119e2565b90505b826001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b849190615bdd565b6000108015614bf4575080836001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bf19190615bdd565b11155b8015614bff57508482105b15614c3b57614c0e8683615118565b9550614c1d8660a00151612f38565b9150614c2d8287608001516119e2565b90508560a001519250614b22565b5093949350505050565b614c4d615748565b60a08501516101025460408051630fb4790560e11b815290516000926001600160a01b031691631f68f20a9160048083019260209291908290030181865afa158015614c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cc19190615bdd565b614cce8860a00151612f38565b614cd89190615d5a565b905084826001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015614d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d3d9190615bdd565b148015614d4957508581105b15614e88576000614dc8614d61838a608001516119e2565b846001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dc39190615bdd565b6149d5565b9050600080614ddd338b60a00151858a615200565b91509150818a602001818151614df39190615d5a565b9052506000614e02858461138e565b9050600080614e15838e60a001516113b6565b91509150818d604001818151614e2b9190615d5a565b905250614e388286615d5a565b8d608001818151614e499190615c92565b90525060608d018051859190614e60908390615d5a565b90525060a08d01516001600160a01b03811660c08f0152614e8190826152ff565b5050505050505b509495945050505050565b6001600160a01b0381163b614f005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610d55565b600080516020615e3a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b614f38836153db565b600082511180614f455750805b15611eea57614843838361541b565b600054610100900460ff16614f7b5760405162461bcd60e51b8152600401610d5590615dae565b61270e33614799565b600054610100900460ff16614fab5760405162461bcd60e51b8152600401610d5590615dae565b60c9805460ff19169055565b600061500c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166155069092919063ffffffff16565b805190915015611eea578080602001905181019061502a9190615d6d565b611eea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d55565b60c95460ff1661270e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d55565b60c95460ff161561270e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610d55565b615120615748565b600061513484600001518560a0015161296c565b9050600080615147338760a0015161551f565b91509150818660200181815161515d9190615d5a565b905250600061516c868461138e565b905060008061517f838a60a001516113b6565b9150915081896040018181516151959190615d5a565b9052506151a28286615d5a565b896080018181516151b39190615c92565b9052506060890180518591906151ca908390615d5a565b90525060a0890180516001600160a01b0390811660c08c01528716908190526151f390826152ff565b5096979650505050505050565b610100546040516323b872dd60e01b8152600091829186916001600160a01b0316906323b872dd9061523a908a9085908a90600401615d8a565b6020604051808303816000875af1158015615259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061527d9190615d6d565b5060405163bba06f2760e01b81526001600160a01b038881166004830152858116602483015282169063bba06f279060440160408051808303816000875af11580156152cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152f19190615df9565b925092505094509492505050565b801561229457610100546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061533a90339086908690600401615d8a565b6020604051808303816000875af1158015615359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061537d9190615d6d565b5060405163acb7081560e01b8152600060048201526001600160a01b038316602482018190529063acb7081590604401600060405180830381600087803b1580156153c757600080fd5b505af1158015612964573d6000803e3d6000fd5b6153e481614e93565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6154835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610d55565b600080846001600160a01b03168460405161549e9190615e1d565b600060405180830381855af49150503d80600081146154d9576040519150601f19603f3d011682016040523d82523d6000602084013e6154de565b606091505b50915091506131078282604051806060016040528060278152602001615e5a6027913961559b565b606061551584846000856155b4565b90505b9392505050565b6000806155908484856001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015615565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155899190615bdd565b6000615200565b915091509250929050565b606083156155aa575081615518565b61551883836156e5565b6060824710156156155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d55565b6001600160a01b0385163b61566c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d55565b600080866001600160a01b031685876040516156889190615e1d565b60006040518083038185875af1925050503d80600081146156c5576040519150601f19603f3d011682016040523d82523d6000602084013e6156ca565b606091505b50915091506156da82828661570f565b979650505050505050565b8151156156f55781518083602001fd5b8060405162461bcd60e51b8152600401610d559190615823565b6060831561571e575081615518565b82511561572e5782518084602001fd5b8160405162461bcd60e51b8152600401610d559190615823565b60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6001600160a01b038116811461170057600080fd5b600080604083850312156157d957600080fd5b82356157e4816157b1565b915060208301356157f4816157b1565b809150509250929050565b60005b8381101561581a578181015183820152602001615802565b50506000910152565b60208152600082518060208401526158428160408501602087016157ff565b601f01601f19169190910160400192915050565b60006020828403121561586857600080fd5b5035919050565b6000806040838503121561588257600080fd5b50508035926020909101359150565b600080604083850312156158a457600080fd5b8235915060208301356157f4816157b1565b6000602082840312156158c857600080fd5b8135615518816157b1565b600080600080608085870312156158e957600080fd5b84356158f4816157b1565b93506020850135615904816157b1565b92506040850135615914816157b1565b9396929550929360600135925050565b60008060006060848603121561593957600080fd5b8335615944816157b1565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561598257600080fd5b823561598d816157b1565b9150602083013567ffffffffffffffff808211156159aa57600080fd5b818501915085601f8301126159be57600080fd5b8135818111156159d0576159d0615959565b604051601f8201601f19908116603f011681019083821181831017156159f8576159f8615959565b81604052828152886020848701011115615a1157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b801515811461170057600080fd5b600080600060608486031215615a5657600080fd5b8335615a61816157b1565b9250602084013591506040840135615a7881615a33565b809150509250925092565b60008060008060808587031215615a9957600080fd5b8435615aa4816157b1565b966020860135965060408601359560600135945092505050565b600080600080600060a08688031215615ad657600080fd5b8535615ae1816157b1565b9450602086013593506040860135615af8816157b1565b9250606086013591506080860135615b0f816157b1565b809150509295509295909350565b600080600080600060a08688031215615b3557600080fd5b8535615b40816157b1565b94506020860135935060408601359250606086013591506080860135615b0f816157b1565b60008060408385031215615b7857600080fd5b8235915060208301356157f481615a33565b60208082526033908201527f6639666163207468652074726f766520686173206e6f74206265656e20637265604082015272617465642062792074686520666163746f727960681b606082015260800190565b600060208284031215615bef57600080fd5b5051919050565b6020808252602d908201527f33613636392074726f766520636f756c64206e6f7420626520696e736572746560408201526c19081a5b881d1a19481b1a5cdd609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176113b0576113b0615c43565b600082615c8d57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113b0576113b0615c43565b600060208284031215615cb757600080fd5b8151615518816157b1565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b808201808211156113b0576113b0615c43565b600060208284031215615d7f57600080fd5b815161551881615a33565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008060408385031215615e0c57600080fd5b505080516020909101519092909150565b60008251615e2f8184602087016157ff565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220efd1173ca198d8f36eab722e2b468ee85f3253c7337aea418bf744f60699c8d964736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061041a5760003560e01c806379a71baf1161021e578063abdc554111610123578063ddc0e554116100ab578063e7b361541161007a578063e7b3615414610c9e578063ec58839514610cbe578063f0083b4f14610cd5578063f2fde38b14610cf6578063fc7b9c1814610d1657600080fd5b8063ddc0e55414610c02578063deb44c8814610c3e578063e04a3e9014610c5e578063e74b981b14610c7e57600080fd5b8063b85a8b20116100f2578063b85a8b2014610b77578063c11aeb3914610b8c578063c4ae316814610bad578063c531b26614610bc2578063c7089e4314610be257600080fd5b8063abdc554114610b2d578063aceb2d041461078b578063ad09014d14610b42578063b3d5e0ce14610b5757600080fd5b8063914a1ac9116101a657806398d721e01161017557806398d721e014610aab578063992642e514610acb578063a20baee614610a36578063a3e6761014610aec578063a66ca8f214610b0c57600080fd5b8063914a1ac914610a15578063923c1eec14610a365780639385739514610a525780639723ee6014610a7257600080fd5b806380b0dcc9116101ed57806380b0dcc91461097757806381519ef41461099757806382250527146109b757806385ad9175146109d75780638da5cb5b146109f757600080fd5b806379a71baf146108ea5780637deace2d1461090a5780637e059b221461092a57806380054c201461096057600080fd5b8063448d65b41161032457806356e71857116102ac578063631203b01161027b578063631203b01461083957806365d7ddc4146108595780636757634d1461087957806369e5e6e014610899578063715018a6146108d557600080fd5b806356e71857146107b55780635c4f6785146107d55780635c975abb146107f55780635ca7f98d1461081957600080fd5b80634d31a2af116102f35780634d31a2af146107385780634e2f663c146107585780634f1ef28614610778578063517ef1d71461078b57806352d1902d146107a057600080fd5b8063448d65b4146106c457806346904840146106e4578063485cc955146107055780634a7402fb1461072557600080fd5b806321e6b53d116103a75780633659cfe6116103765780633659cfe6146106245780633a297fd8146106445780633e78cf73146106645780633eebf7b9146106845780633f6e0719146106a457600080fd5b806321e6b53d146105a457806328a0e71b146105c45780632aaed16a146105e45780632bcf77411461060457600080fd5b80630cec0d18116103ee5780630cec0d18146104e15780630f2f11461461050157806312552e2514610521578063142af9a21461055657806314ac36d11461058f57600080fd5b80621bed281461041f578063048c661d1461044157806306fdde031461047e578063098d3228146104bd575b600080fd5b34801561042b57600080fd5b5061043f61043a3660046157c6565b610d2d565b005b34801561044d57600080fd5b5060fb54610461906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561048a57600080fd5b50604080518082018252601081526f4f726967696e616c20466163746f727960801b602082015290516104759190615823565b3480156104c957600080fd5b506104d360001981565b604051908152602001610475565b3480156104ed57600080fd5b5061043f6104fc366004615856565b611304565b34801561050d57600080fd5b506104d361051c36600461586f565b61138e565b34801561052d57600080fd5b5061054161053c366004615891565b6113b6565b60408051928352602083019190915201610475565b34801561056257600080fd5b506104d36105713660046158b6565b6001600160a01b0316600090815260fd602052604090206001015490565b34801561059b57600080fd5b5061043f6114a9565b3480156105b057600080fd5b5061043f6105bf3660046158b6565b611703565b3480156105d057600080fd5b5061043f6105df3660046158d3565b61176e565b3480156105f057600080fd5b5061043f6105ff3660046158b6565b61183f565b34801561061057600080fd5b5061043f61061f3660046158b6565b611869565b34801561063057600080fd5b5061043f61063f3660046158b6565b6118dc565b34801561065057600080fd5b5060fc54610461906001600160a01b031681565b34801561067057600080fd5b5061043f61067f3660046158b6565b6119b8565b34801561069057600080fd5b506104d361069f36600461586f565b6119e2565b3480156106b057600080fd5b506104616106bf3660046158b6565b611a08565b3480156106d057600080fd5b506104616106df366004615924565b611a29565b3480156106f057600080fd5b5061010254610461906001600160a01b031681565b34801561071157600080fd5b5061043f6107203660046157c6565b611d37565b61043f6107333660046157c6565b611eef565b34801561074457600080fd5b506104d36107533660046158b6565b612152565b34801561076457600080fd5b5061043f6107733660046158b6565b61218e565b61043f61078636600461596f565b6121c8565b34801561079757600080fd5b506104d3612298565b3480156107ac57600080fd5b506104d36122c6565b3480156107c157600080fd5b5061043f6107d03660046157c6565b612379565b3480156107e157600080fd5b5061043f6107f0366004615856565b6123b2565b34801561080157600080fd5b5060c95460ff165b6040519015158152602001610475565b34801561082557600080fd5b5061043f6108343660046157c6565b6123c0565b34801561084557600080fd5b506104d3610854366004615856565b61251e565b34801561086557600080fd5b5061043f6108743660046157c6565b61258d565b34801561088557600080fd5b5061043f610894366004615a41565b612615565b3480156108a557600080fd5b506104616108b43660046158b6565b6001600160a01b03908116600090815260fd60205260409020600301541690565b3480156108e157600080fd5b5061043f6126fc565b3480156108f657600080fd5b5061043f610905366004615a83565b612710565b34801561091657600080fd5b5061043f6109253660046158b6565b6127f4565b34801561093657600080fd5b506104d36109453660046158b6565b6001600160a01b0316600090815260fd602052604090205490565b34801561096c57600080fd5b506104d36101065481565b34801561098357600080fd5b5061043f610992366004615abe565b612867565b3480156109a357600080fd5b506104616109b23660046157c6565b61296c565b3480156109c357600080fd5b5061043f6109d23660046157c6565b61299d565b3480156109e357600080fd5b506104d36109f23660046158b6565b612f38565b348015610a0357600080fd5b506097546001600160a01b0316610461565b348015610a2157600080fd5b5061010154610461906001600160a01b031681565b348015610a4257600080fd5b506104d3670de0b6b3a764000081565b348015610a5e57600080fd5b5060ff54610461906001600160a01b031681565b348015610a7e57600080fd5b506104d3610a8d3660046158b6565b6001600160a01b0316600090815260fd602052604090206005015490565b348015610ab757600080fd5b5061043f610ac63660046158b6565b613110565b348015610ad757600080fd5b5061010054610461906001600160a01b031681565b348015610af857600080fd5b5060fe54610461906001600160a01b031681565b348015610b1857600080fd5b5061010754610461906001600160a01b031681565b348015610b3957600080fd5b506104d36131bc565b348015610b4e57600080fd5b506104d36131d1565b348015610b6357600080fd5b50610809610b723660046157c6565b6131fb565b348015610b8357600080fd5b506104d361322e565b348015610b9857600080fd5b5061010454610461906001600160a01b031681565b348015610bb957600080fd5b5061043f613243565b348015610bce57600080fd5b5061043f610bdd366004615b1d565b613266565b348015610bee57600080fd5b50610461610bfd3660046157c6565b613827565b348015610c0e57600080fd5b50610461610c1d3660046158b6565b6001600160a01b03908116600090815260fd60205260409020600201541690565b348015610c4a57600080fd5b5061043f610c59366004615b65565b613855565b348015610c6a57600080fd5b5061043f610c79366004615924565b6139f7565b348015610c8a57600080fd5b5061043f610c993660046158b6565b613a44565b348015610caa57600080fd5b50610461610cb93660046158b6565b613add565b348015610cca57600080fd5b506104d36101085481565b348015610ce157600080fd5b5061010554610461906001600160a01b031681565b348015610d0257600080fd5b5061043f610d113660046158b6565b613f73565b348015610d2257600080fd5b506104d36101035481565b8133610d3982826131fb565b610d5e5760405162461bcd60e51b8152600401610d5590615b8a565b60405180910390fd5b610d6884846131fb565b80610d7a57506001600160a01b038316155b610de45760405162461bcd60e51b815260206004820152603560248201527f3361363639207468652074726f76652068696e74206d757374206578697374206044820152740696e20746865206c697374206f722062652030783605c1b6064820152608401610d55565b6001600160a01b038316610e13576001600160a01b03808516600090815260fd60205260409020600301541692505b336001600160a01b03841603610e5f576000610e2f858561296c565b9050806001600160a01b0316846001600160a01b031603610e5957610e548585613827565b610e5b565b805b9350505b6001600160a01b038416600090815260fd6020526040902033908490600190610e8b9060030184613fe9565b610eee5760405162461bcd60e51b815260206004820152602e60248201527f33613636392074726f766520636f756c64206e6f742062652072656d6f76656460448201526d08199c9bdb481d1a19481b1a5cdd60921b6064820152608401610d55565b826001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190615bdd565b600003610ff3576001600160a01b038716600090815260fd60205260408120610f81916003909101908590806141d8565b610f9d5760405162461bcd60e51b8152600401610d5590615bf6565b604080516001600160a01b038981168252851660208201526000818301819052606082015290517ff41ecc43fd86bebfc7d02efecacb0a49ee2df40df4ee0bc7fbe9325576c2fdd19181900360800190a16112fb565b6000836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190615bdd565b90506000836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd9190615bdd565b9050818110611191576110cf89611a08565b6001600160a01b0316886001600160a01b03161461118c575b6110f28985613827565b9350836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111569190615bdd565b9050818111801561118757506001600160a01b03808a16600090815260fd6020526040902060040154858216911614155b6110e8575b61125d565b6001600160a01b03898116600090815260fd602052604090206003015489821691161461125d575b6111c3898561296c565b9350836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190615bdd565b9050818110801561125857506001600160a01b03808a16600090815260fd6020526040902060030154858216911614155b6111b9575b6001600160a01b038916600090815260fd602052604090208282119350611289906003018686866141d8565b6112a55760405162461bcd60e51b8152600401610d5590615bf6565b604080516001600160a01b038b811682528781166020830152861681830152841515606082015290517ff41ecc43fd86bebfc7d02efecacb0a49ee2df40df4ee0bc7fbe9325576c2fdd19181900360800190a150505b50505050505050565b61130c614521565b60648111156113695760405162461bcd60e51b8152602060048201526024808201527f6437646338207468652073686172652063616e206e6f74206265206f766572206044820152633130302560e01b6064820152608401610d55565b606461137d670de0b6b3a764000083615c59565b6113879190615c70565b6101085550565b6000670de0b6b3a76400006113a38484615c59565b6113ad9190615c70565b90505b92915050565b60008060008390506000816001600160a01b031663c478b5bd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114229190615bdd565b61010654909150811580611434575080155b1561144857866000945094505050506114a2565b80821061145e57600087945094505050506114a2565b670de0b6b3a7640000816114728285615c59565b61147c9190615c70565b6114869089615c59565b6114909190615c70565b935061149c8488615c92565b94505050505b9250929050565b6114b1614521565b6101005460408051638da5cb5b60e01b815290516001600160a01b03909216918291638da5cb5b9160048083019260209291908290030181865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190615ca5565b60fe80546001600160a01b0319166001600160a01b0392831690811790915560408051637e062a3560e11b815290519284169263fc0c546a916004808201926020929091908290030181865afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a39190615ca5565b6001600160a01b0316146116175760405162461bcd60e51b815260206004820152603560248201527f34313634322074686520537461626c65436f696e206d757374206265206f776e60448201527432b210313c903a3432903a37b5b2b71037bbb732b960591b6064820152608401610d55565b60fe5460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116849190615ca5565b6001600160a01b0316146117005760405162461bcd60e51b815260206004820152603860248201527f3431363432207468697320636f6e7472616374206d757374206265207468652060448201527f6f776e6572206f662074686520746f6b656e206f776e657200000000000000006064820152608401610d55565b50565b61170b614521565b60fe546040516321e6b53d60e01b81526001600160a01b038381166004830152909116906321e6b53d906024015b600060405180830381600087803b15801561175357600080fd5b505af1158015611767573d6000803e3d6000fd5b5050505050565b60ff546040516384ba3f6960e01b81526001600160a01b0380871660048301527f02bc4d5cd45896d0a40a3c1d56314df3d795dcd0457cfff43d579b1df4a08e309286928892909116906384ba3f6990602401602060405180830381865afa1580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190615bdd565b604080516001600160a01b039485168152928416602084015282015290841660608201526080810183905260a0015b60405180910390a150505050565b611847614521565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b611871614521565b61010454604080516001600160a01b03928316815291831660208301527fb11f992e0256b743c656e4155a7c973abdb563505a0fe01ac94e5053aea0f225910160405180910390a161010480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119245760405162461bcd60e51b8152600401610d5590615cc2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661196d600080516020615e3a833981519152546001600160a01b031690565b6001600160a01b0316146119935760405162461bcd60e51b8152600401610d5590615d0e565b61199c8161457b565b6040805160008082526020820190925261170091839190614583565b6119c0614521565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b60006119f683670de0b6b3a7640000615d5a565b6113a3670de0b6b3a764000084615c59565b6001600160a01b03908116600090815260fd60205260409020600401541690565b6000611a96846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a909190615ca5565b856131fb565b611ae25760405162461bcd60e51b815260206004820152601860248201527f646161373038206e6f7420612076616c69642074726f766500000000000000006044820152606401610d55565b336001600160a01b0316846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4e9190615ca5565b6001600160a01b031614611bb25760405162461bcd60e51b815260206004820152602560248201527f646161373038206d73672e73656e646572206d7573742062652074726f76652060448201526437bbb732b960d91b6064820152608401610d55565b61010554600090611bcb906001600160a01b03166146ee565b90506001600160a01b038116611c1c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610d55565b604051630e0cb96960e31b81526001600160a01b038281166004830152861690637065cb4890602401600060405180830381600087803b158015611c5f57600080fd5b505af1158015611c73573d6000803e3d6000fd5b5050604051633d0d630f60e11b81526001600160a01b0388811660048301526024820188905260448201879052939450849384169250637a1ac61e9150606401600060405180830381600087803b158015611ccd57600080fd5b505af1158015611ce1573d6000803e3d6000fd5b5050604080516001600160a01b03858116825233602083015289168183015290517f98e516a83449d577a8e66a6da3d23ffb1d3495a6139972a33c3721b16c00c8629350908190036060019150a1509392505050565b600054610100900460ff1615808015611d575750600054600160ff909116105b80611d715750303b158015611d71575060005460ff166001145b611dd45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d55565b6000805460ff191660011790558015611df7576000805461ff0019166101001790555b611dff61473b565b611e0761476a565b61010080546001600160a01b038581166001600160a01b03199283168117909355610102805491861691909216811790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015611e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea29190615d6d565b508015611eea576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b6101015460408051637e062a3560e11b8152905184926001600160a01b039081169283929185169163fc0c546a916004808201926020929091908290030181865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190615ca5565b6001600160a01b031614611fbc5760405162461bcd60e51b815260206004820152601760248201527f6238323832206e6f7420612076616c69642074726f76650000000000000000006044820152606401610d55565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ff757600080fd5b505af115801561200b573d6000803e3d6000fd5b50506101015460405163a9059cbb60e01b81526001600160a01b038981166004830152346024830152909116935063a9059cbb925060440190506020604051808303816000875af1158015612064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120889190615d6d565b6120ea5760405162461bcd60e51b815260206004820152602d60248201527f623832383220636f756c64206e6f74207472616e73666572207468652072657160448201526c1d595cdd195908185b5bdd5b9d609a1b6064820152608401610d55565b6040516304796e1f60e31b8152600060048201526001600160a01b0384811660248301528316906323cb70f890604401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116600090815260fd602052604081206001810154905461218490670de0b6b3a764000090615c59565b6113b09190615c70565b612196614521565b60fe5460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401611739565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036122105760405162461bcd60e51b8152600401610d5590615cc2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612259600080516020615e3a833981519152546001600160a01b031690565b6001600160a01b03161461227f5760405162461bcd60e51b8152600401610d5590615d0e565b6122888261457b565b61229482826001614583565b5050565b600260646122af670de0b6b3a76400006001615c59565b6122b99190615c70565b6122c39190615c70565b81565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123665760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610d55565b50600080516020615e3a83398151915290565b612381614521565b6001600160a01b03918216600090815260fd6020526040902060020180546001600160a01b03191691909216179055565b6123ba614521565b61010655565b80826123cc82826131fb565b6123e85760405162461bcd60e51b8152600401610d5590615b8a565b60008490506000816001600160a01b031663eaca974b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561242d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124519190615bdd565b9050816001600160a01b03166328a070256040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561248e57600080fd5b505af11580156124a2573d6000803e3d6000fd5b5050610100546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd91506124db90899033908690600401615d8a565b6020604051808303816000875af11580156124fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fb9190615d6d565b61010254604051630631203b60e41b8152600481018390526000916001600160a01b03169063631203b090602401602060405180830381865afa158015612569573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b09190615bdd565b612595614521565b610101546001600160a01b0316156125ef5760405162461bcd60e51b815260206004820152601f60248201527f636439663320574554482063616e206f6e6c7920626520736574206f6e6365006044820152606401610d55565b61010180546001600160a01b0319166001600160a01b0384161790556122948282612379565b823361262182826131fb565b61263d5760405162461bcd60e51b8152600401610d5590615b8a565b8215612676576001600160a01b038516600090815260fd60205260408120805486929061266b908490615d5a565b909155506126a49050565b6001600160a01b038516600090815260fd60205260408120805486929061269e908490615c92565b90915550505b6001600160a01b038516600081815260fd6020908152604091829020548251938452908301527fa7397a34065f9b23fc4f24516f72718d02d2ec2a5a58e2903ca1150bcc0fa10b910160405180910390a15050505050565b612704614521565b61270e6000614799565b565b7fc699869172ddb8efd1d3379b969fec6a7a23e5d91d2389d8b896c773708a240e3332868661010260009054906101000a90046001600160a01b03166001600160a01b0316631f68f20a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ad9190615bdd565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a0810184905260c0810183905260e001611831565b6127fc614521565b61010554604080516001600160a01b03928316815291831660208301527f56d6f0f8bd180def6e72fc21cc85044e0d4d795564afdd60ae3cb0ec12113070910160405180910390a161010580546001600160a01b0319166001600160a01b0392909216919091179055565b600061287286613add565b90506128896001600160a01b0387163383886147eb565b6040516304796e1f60e31b815260006004820181905260248201526001600160a01b038216906323cb70f890604401600060405180830381600087803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b50505050670de0b6b3a7640000831061296457604051636c665a5560e01b81526001600160a01b038581166004830152602482018590528381166044830152821690636c665a5590606401600060405180830381600087803b15801561294b57600080fd5b505af115801561295f573d6000803e3d6000fd5b505050505b505050505050565b6001600160a01b03918216600090815260fd6020908152604080832093851683526006909301905220600101541690565b81816129a982826131fb565b6129c55760405162461bcd60e51b8152600401610d5590615b8a565b6000839050336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a369190615ca5565b6001600160a01b03161480612a5357506001600160a01b03841633145b612ac55760405162461bcd60e51b815260206004820152603760248201527f3137336661206f6e6c7920746865206f776e65722063616e2072656d6f76652060448201527f7468652074726f76652066726f6d20746865206c6973740000000000000000006064820152608401610d55565b806001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b279190615bdd565b15612b8b5760405162461bcd60e51b815260206004820152602e60248201527f3137336661207265706179207468652064656274206265666f72652072656d6f60448201526d76696e67207468652074726f766560901b6064820152608401610d55565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef9190615ca5565b604051634b20406760e11b8152600060048201529091506001600160a01b0383169063964080ce90602401600060405180830381600087803b158015612c3457600080fd5b505af1158015612c48573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03888116600483015260009350841691506370a0823190602401602060405180830381865afa158015612c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb99190615bdd565b90508015612d9a57826001600160a01b0316633c7034a3846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d329190615ca5565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260006044820152606401600060405180830381600087803b158015612d8157600080fd5b505af1158015612d95573d6000803e3d6000fd5b505050505b6001600160a01b038716600090815260fd60205260409020612dbf9060030187613fe9565b612e225760405162461bcd60e51b815260206004820152602e60248201527f31373366612074726f766520636f756c64206e6f742062652072656d6f76656460448201526d08199c9bdb481d1a19481b1a5cdd60921b6064820152608401610d55565b60fe5460405163cfbd488560e01b81526001600160a01b0388811660048301529091169063cfbd488590602401600060405180830381600087803b158015612e6957600080fd5b505af1158015612e7d573d6000803e3d6000fd5b505050506001600160a01b03878116600090815260fd602052604090819020600201549051633518da6560e11b81528883166004820152911690636a31b4ca90602401600060405180830381600087803b158015612eda57600080fd5b505af1158015612eee573d6000803e3d6000fd5b50506040516001600160a01b03891681527f56df94b000d5de0883743a2b4328178bc012bed334409fdace98ae5b36d6a91a9250602001905060405180910390a150505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190615ca5565b9050600060ff60009054906101000a90046001600160a01b03169050600061308f856001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130209190615bdd565b60405163aa41911f60e01b81526001600160a01b03868116600483015285169063aa41911f90602401602060405180830381865afa158015613066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308a9190615bdd565b614849565b604051630241336f60e21b81526001600160a01b03858116600483015291925061310791841690630904cdbc90602401602060405180830381865afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131009190615bdd565b82906149d5565b95945050505050565b613118614521565b60fb80546001600160a01b0319166001600160a01b03831690811790915560408051635336547960e11b8152905183929163a66ca8f29160048083019260209291908290030181865afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190615ca5565b61010780546001600160a01b0319166001600160a01b03929092169190911790555050565b60646122b9670de0b6b3a76400006005615c59565b60646131e6670de0b6b3a76400006001615c59565b6131f09190615c70565b6122c390600a615c59565b6001600160a01b03918216600090815260fd60209081526040808320938516835260069093019052206001015416151590565b60646122b9670de0b6b3a76400006001615c59565b61324b614521565b60c95460ff161561325e5761270e6149eb565b61270e614a3d565b610100546001600160a01b0316670de0b6b3a764000061328587611a08565b6001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e69190615bdd565b116133595760405162461bcd60e51b815260206004820152603f60248201527f61376639392066697273742074726f766520697320756e646572636f6c6c617460448201527f6572616c6973656420616e64206d757374206265206c697175696461746564006064820152608401610d55565b6040516370a0823160e01b815233600482015285906001600160a01b038316906370a0823190602401602060405180830381865afa15801561339f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c39190615bdd565b10156134115760405162461bcd60e51b815260206004820152601f60248201527f613766393920696e73756666696369656e7420466961742062616c616e6365006044820152606401610d55565b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa15801561345d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134819190615bdd565b10156134e45760405162461bcd60e51b815260206004820152602c60248201527f613766393920537461626c65436f696e206973206e6f7420617070726f76656460448201526b20666f7220666163746f727960a01b6064820152608401610d55565b610102546001600160a01b03166134f9615748565b6001600160a01b03881681526080810187905261351588611a08565b6001600160a01b031660a082015261352d8187614a7a565b905061353b81878787614c45565b6060810151909150156121485760408082015190516323b872dd60e01b81526001600160a01b038516916323b872dd9161357c913391309190600401615d8a565b6020604051808303816000875af115801561359b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bf9190615d6d565b50604081810151905163cbb9435960e01b815260048101919091526001600160a01b0383169063cbb94359906024016020604051808303816000875af115801561360d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136319190615d6d565b506000826001600160a01b0316631f68f20a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136969190615bdd565b90506000836001600160a01b031663cd16e7f7866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370b9190615bdd565b670de0b6b3a764000086602001516137239190615c59565b61372d9190615c70565b6040518263ffffffff1660e01b815260040161374b91815260200190565b6020604051808303816000875af115801561376a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378e9190615bdd565b90507f9485a67cba0aacb19621a77dcac069765b67928a650316d414b368154e673e248a84602001518560600151866080015186868960c0015160405161381397969594939291906001600160a01b039788168152602081019690965260408601949094526060850192909252608084015260a083015290911660c082015260e00190565b60405180910390a150505050505050505050565b6001600160a01b03918216600090815260fd6020908152604080832093851683526006909301905220541690565b60003390506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561389a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138be9190615ca5565b90506138ca81336131fb565b6139165760405162461bcd60e51b815260206004820152601760248201527f6662666435206e6f7420612076616c69642074726f76650000000000000000006044820152606401610d55565b821561396a5783610103600082825461392f9190615d5a565b90915550506001600160a01b038116600090815260fd60205260408120600101805486929061395f908490615d5a565b909155506139b39050565b83610103600082825461397d9190615c92565b90915550506001600160a01b038116600090815260fd6020526040812060010180548692906139ad908490615c92565b90915550505b61010354604080516001600160a01b038416815260208101929092527ff95b4220419afa063ecabab77276c7ed0a3c7175e2f140babd24e56208ce58a29101611831565b604080513381526001600160a01b0385166020820152908101839052606081018290527f91aae5057d63fa752409cbc2eaaebd6e31f0beac641e40f0e762b135a62e847990608001611ee1565b613a4c614521565b61010280546001600160a01b0319166001600160a01b038381169182179092556101005460405163095ea7b360e01b8152600481019290925260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015613ab9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122949190615d6d565b60fe546000906001600160a01b031680613b435760405162461bcd60e51b815260206004820152602160248201527f36366331302074686520746f6b656e206f776e6572206d7573742062652073656044820152601d60fa1b6064820152608401610d55565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613baf9190615ca5565b6001600160a01b031614613c2b5760405162461bcd60e51b815260206004820152603760248201527f36366331302074686520746f6b656e206f776e65722773206f776e6572206d7560448201527f7374206265207468652074726f766520666163746f72790000000000000000006064820152608401610d55565b60ff54604051639878cbb360e01b81526001600160a01b0385811660048301526000921690639878cbb390602401602060405180830381865afa158015613c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9a9190615ca5565b6001600160a01b031603613cff5760405162461bcd60e51b815260206004820152602660248201527f36366331302074686520746f6b656e2070726963652066656564206d757374206044820152651899481cd95d60d21b6064820152608401610d55565b61010454600090613d18906001600160a01b03166146ee565b90506001600160a01b038116613d695760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610d55565b60405163485cc95560e01b81526001600160a01b038581166004830152336024830152919350839182169063485cc95590604401600060405180830381600087803b158015613db757600080fd5b505af1158015613dcb573d6000803e3d6000fd5b5050506001600160a01b038516600090815260fd60205260408120613df79250600301908390806141d8565b613e565760405162461bcd60e51b815260206004820152602a60248201527f36366331302074726f766520636f756c64206e6f7420626520616464656420746044820152691bc81d1a19481b1a5cdd60b21b6064820152608401610d55565b6001600160a01b03848116600090815260fd602052604090819020600201549051630fe1df2960e21b81528383166004820152911690633f877ca490602401600060405180830381600087803b158015613eaf57600080fd5b505af1158015613ec3573d6000803e3d6000fd5b5050604051634c1d96ab60e11b81526001600160a01b0384811660048301528516925063983b2d569150602401600060405180830381600087803b158015613f0a57600080fd5b505af1158015613f1e573d6000803e3d6000fd5b5050604080516001600160a01b03858116825288166020820152338183015290517fd73cf983c0299e0b942c23588e67dbf06af623c7a611345b2fa509a38c6c1ed09350908190036060019150a15050919050565b613f7b614521565b6001600160a01b038116613fe05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d55565b61170081614799565b6001600160a01b0380821660009081526003840160209081526040808320815180830190925280548516825260010154909316908301819052909190156141ce5783546001600160a01b038481169116148015614055575060018401546001600160a01b038481169116145b1561407a5783546001600160a01b03199081168555600185018054909116905561417a565b60018401546001600160a01b03908116908416036140d8576020808201516001600160a01b0316600081815260038701909252604090912080546001600160a01b03199081168317909155600186018054909116909117905561417a565b83546001600160a01b039081169084160361412c57805184546001600160a01b039091166001600160a01b03199182168117865560008181526003870160205260409020600101805490921617905561417a565b60208082015182516001600160a01b0391821660008181526003890190945260408085208054949093166001600160a01b031994851681179093559184529220600101805490911690911790555b6001600160a01b0383166000908152600385016020526040902080546001600160a01b0319908116825560019182018054909116905560028501546141bf9190615c92565b600285015550600190506113b0565b5060009392505050565b60006001600160a01b038316158061420e57506001600160a01b0383811660009081526003870160205260409020600101541615155b61425a5760405162461bcd60e51b815260206004820152601f60248201527f3739643364205f726566206e6569746865722076616c6964206e6f72203078006044820152606401610d55565b6001600160a01b038085166000908152600387016020526040902080549091166145135785546001600160a01b03166142cd5780546001600160a01b0386166001600160a01b031991821681178355600180840180548416831790558801805483168217905587549091161786556144f4565b8280156142fa57506001600160a01b03841615806142fa575060018601546001600160a01b038581169116145b1561435857600180870180546001600160a01b03908116600081815260038b01602052604090208054928a166001600160a01b03199384168117909155855483168117865593850180548316909117905581541690911790556144f4565b8215801561438357506001600160a01b0384161580614383575085546001600160a01b038581169116145b156143df5785546001600160a01b0390811660008181526003890160205260409020600190810180546001600160a01b0319908116948a16948517909155845481169092178455830180548216831790558754161786556144f4565b6001600160a01b03808516600090815260038801602090815260409182902082518084019093528054841683526001015490921691810191909152831561448757805182546001600160a01b039182166001600160a01b0319918216178455600180850180548985169084168117909155600090815260038b01602052604080822080548c8716908616811790915586519095168252902001805490911690911790556144f2565b81546001600160a01b038087166001600160a01b031992831681178555602080850180516001808901805492871692881692909217909155600093845260038d01909252604080842090920180548c8616908716811790915590519093168252902080549092161790555b505b6002860154614504906001615d5a565b60028701555060019050614519565b60009150505b949350505050565b6097546001600160a01b0316331461270e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d55565b611700614521565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156145b657611eea83614e93565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015614610575060408051601f3d908101601f1916820190925261460d91810190615bdd565b60015b6146735760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610d55565b600080516020615e3a83398151915281146146e25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610d55565b50611eea838383614f2f565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09392505050565b600054610100900460ff166147625760405162461bcd60e51b8152600401610d5590615dae565b61270e614f54565b600054610100900460ff166147915760405162461bcd60e51b8152600401610d5590615dae565b61270e614f84565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b614843846323b872dd60e01b85858560405160240161480c93929190615d8a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614fb7565b50505050565b60008061486a61485a84600f615c59565b6148648587615c92565b906149d5565b9050600083670de0b6b3a7640000816148838580615c59565b61488d9190615c70565b6148979190615c59565b6148a19190615c70565b905060006148b8670de0b6b3a7640000602c615c59565b6148c386602d615c59565b6148cd9190615c92565b9050600081670de0b6b3a764000060646148e8826001615c59565b6148f29190615c70565b6148fd90600a615c59565b6149079190615c59565b6149119190615c70565b90506000606461492a670de0b6b3a76400006001615c59565b6149349190615c70565b821161496a5760026064614951670de0b6b3a76400006001615c59565b61495b9190615c70565b6149659190615c70565b61499f565b60026064614981670de0b6b3a76400006001615c59565b61498b9190615c70565b6149959190615c70565b61499f9083615c92565b905080836149b5670de0b6b3a764000087615c59565b6149bf9190615c70565b6149c99190615d5a565b98975050505050505050565b60008183106149e457816113ad565b5090919050565b6149f3615089565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b614a456150d2565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258614a203390565b614a82615748565b60a08301516101025460408051630fb4790560e11b815290516000926001600160a01b031691631f68f20a9160048083019260209291908290030181865afa158015614ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614af69190615bdd565b614b038660a00151612f38565b614b0d9190615d5a565b90506000614b1f8287608001516119e2565b90505b826001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b849190615bdd565b6000108015614bf4575080836001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bf19190615bdd565b11155b8015614bff57508482105b15614c3b57614c0e8683615118565b9550614c1d8660a00151612f38565b9150614c2d8287608001516119e2565b90508560a001519250614b22565b5093949350505050565b614c4d615748565b60a08501516101025460408051630fb4790560e11b815290516000926001600160a01b031691631f68f20a9160048083019260209291908290030181865afa158015614c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cc19190615bdd565b614cce8860a00151612f38565b614cd89190615d5a565b905084826001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015614d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d3d9190615bdd565b148015614d4957508581105b15614e88576000614dc8614d61838a608001516119e2565b846001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dc39190615bdd565b6149d5565b9050600080614ddd338b60a00151858a615200565b91509150818a602001818151614df39190615d5a565b9052506000614e02858461138e565b9050600080614e15838e60a001516113b6565b91509150818d604001818151614e2b9190615d5a565b905250614e388286615d5a565b8d608001818151614e499190615c92565b90525060608d018051859190614e60908390615d5a565b90525060a08d01516001600160a01b03811660c08f0152614e8190826152ff565b5050505050505b509495945050505050565b6001600160a01b0381163b614f005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610d55565b600080516020615e3a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b614f38836153db565b600082511180614f455750805b15611eea57614843838361541b565b600054610100900460ff16614f7b5760405162461bcd60e51b8152600401610d5590615dae565b61270e33614799565b600054610100900460ff16614fab5760405162461bcd60e51b8152600401610d5590615dae565b60c9805460ff19169055565b600061500c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166155069092919063ffffffff16565b805190915015611eea578080602001905181019061502a9190615d6d565b611eea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d55565b60c95460ff1661270e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d55565b60c95460ff161561270e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610d55565b615120615748565b600061513484600001518560a0015161296c565b9050600080615147338760a0015161551f565b91509150818660200181815161515d9190615d5a565b905250600061516c868461138e565b905060008061517f838a60a001516113b6565b9150915081896040018181516151959190615d5a565b9052506151a28286615d5a565b896080018181516151b39190615c92565b9052506060890180518591906151ca908390615d5a565b90525060a0890180516001600160a01b0390811660c08c01528716908190526151f390826152ff565b5096979650505050505050565b610100546040516323b872dd60e01b8152600091829186916001600160a01b0316906323b872dd9061523a908a9085908a90600401615d8a565b6020604051808303816000875af1158015615259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061527d9190615d6d565b5060405163bba06f2760e01b81526001600160a01b038881166004830152858116602483015282169063bba06f279060440160408051808303816000875af11580156152cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152f19190615df9565b925092505094509492505050565b801561229457610100546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061533a90339086908690600401615d8a565b6020604051808303816000875af1158015615359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061537d9190615d6d565b5060405163acb7081560e01b8152600060048201526001600160a01b038316602482018190529063acb7081590604401600060405180830381600087803b1580156153c757600080fd5b505af1158015612964573d6000803e3d6000fd5b6153e481614e93565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6154835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610d55565b600080846001600160a01b03168460405161549e9190615e1d565b600060405180830381855af49150503d80600081146154d9576040519150601f19603f3d011682016040523d82523d6000602084013e6154de565b606091505b50915091506131078282604051806060016040528060278152602001615e5a6027913961559b565b606061551584846000856155b4565b90505b9392505050565b6000806155908484856001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015615565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155899190615bdd565b6000615200565b915091509250929050565b606083156155aa575081615518565b61551883836156e5565b6060824710156156155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d55565b6001600160a01b0385163b61566c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d55565b600080866001600160a01b031685876040516156889190615e1d565b60006040518083038185875af1925050503d80600081146156c5576040519150601f19603f3d011682016040523d82523d6000602084013e6156ca565b606091505b50915091506156da82828661570f565b979650505050505050565b8151156156f55781518083602001fd5b8060405162461bcd60e51b8152600401610d559190615823565b6060831561571e575081615518565b82511561572e5782518084602001fd5b8160405162461bcd60e51b8152600401610d559190615823565b60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6001600160a01b038116811461170057600080fd5b600080604083850312156157d957600080fd5b82356157e4816157b1565b915060208301356157f4816157b1565b809150509250929050565b60005b8381101561581a578181015183820152602001615802565b50506000910152565b60208152600082518060208401526158428160408501602087016157ff565b601f01601f19169190910160400192915050565b60006020828403121561586857600080fd5b5035919050565b6000806040838503121561588257600080fd5b50508035926020909101359150565b600080604083850312156158a457600080fd5b8235915060208301356157f4816157b1565b6000602082840312156158c857600080fd5b8135615518816157b1565b600080600080608085870312156158e957600080fd5b84356158f4816157b1565b93506020850135615904816157b1565b92506040850135615914816157b1565b9396929550929360600135925050565b60008060006060848603121561593957600080fd5b8335615944816157b1565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561598257600080fd5b823561598d816157b1565b9150602083013567ffffffffffffffff808211156159aa57600080fd5b818501915085601f8301126159be57600080fd5b8135818111156159d0576159d0615959565b604051601f8201601f19908116603f011681019083821181831017156159f8576159f8615959565b81604052828152886020848701011115615a1157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b801515811461170057600080fd5b600080600060608486031215615a5657600080fd5b8335615a61816157b1565b9250602084013591506040840135615a7881615a33565b809150509250925092565b60008060008060808587031215615a9957600080fd5b8435615aa4816157b1565b966020860135965060408601359560600135945092505050565b600080600080600060a08688031215615ad657600080fd5b8535615ae1816157b1565b9450602086013593506040860135615af8816157b1565b9250606086013591506080860135615b0f816157b1565b809150509295509295909350565b600080600080600060a08688031215615b3557600080fd5b8535615b40816157b1565b94506020860135935060408601359250606086013591506080860135615b0f816157b1565b60008060408385031215615b7857600080fd5b8235915060208301356157f481615a33565b60208082526033908201527f6639666163207468652074726f766520686173206e6f74206265656e20637265604082015272617465642062792074686520666163746f727960681b606082015260800190565b600060208284031215615bef57600080fd5b5051919050565b6020808252602d908201527f33613636392074726f766520636f756c64206e6f7420626520696e736572746560408201526c19081a5b881d1a19481b1a5cdd609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176113b0576113b0615c43565b600082615c8d57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113b0576113b0615c43565b600060208284031215615cb757600080fd5b8151615518816157b1565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b808201808211156113b0576113b0615c43565b600060208284031215615d7f57600080fd5b815161551881615a33565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008060408385031215615e0c57600080fd5b505080516020909101519092909150565b60008251615e2f8184602087016157ff565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220efd1173ca198d8f36eab722e2b468ee85f3253c7337aea418bf744f60699c8d964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "containsTrove(address,address)": {
        "details": "returns and checks if such trove exists for this token"
      },
      "createNewServiceFee(address,uint256,uint256)": {
        "details": "creates new ServiceFeeGenerator for user",
        "params": {
          "_feeAmount": "amount of fee to take (must be >= minimal borrow)",
          "_feeInterval": "interval required for payments",
          "_trove": "any valid trove that user owns"
        }
      },
      "createTrove(address)": {
        "details": "creates a trove if the token is supported",
        "params": {
          "_token": "any supported token address"
        }
      },
      "createTroveAndBorrow(address,uint256,address,uint256,address)": {
        "details": "creates a trove with collateral and borrows from it",
        "params": {
          "_borrowAmount": "the value of the minting",
          "_collateralAmount": "a positive amount of collateral to transfer from the sender's account or zero",
          "_nextTrove": "is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions",
          "_recipient": "is the address to which the newly minted tokens will be transferred",
          "_token": "any supported token address"
        }
      },
      "emitLiquidationEvent(address,address,address,uint256)": {
        "details": "to emit Liquidation event, to be called from a trove after liquidation.",
        "params": {
          "_token": "address of token",
          "_trove": "address of the Trove",
          "collateral": "uint256 amount of collateral",
          "stabilityPoolLiquidation": "address of StabilityPool, 0x0 if Community LiquidationPool"
        }
      },
      "emitTroveCollateralUpdate(address,uint256,uint256)": {
        "details": "to emit Collateral update event, to be called from trove",
        "params": {
          "_newAmount": "new trove's Collateral value",
          "_newCollateralization": "new trove's collateralization value",
          "_token": "address of token"
        }
      },
      "emitTroveDebtUpdate(address,uint256,uint256,uint256)": {
        "details": "to emit Trove's debt update event, to be called from trove",
        "params": {
          "_newAmount": "new trove's debt value",
          "_newCollateralization": "new trove's collateralization value",
          "_token": "address of token"
        }
      },
      "firstTrove(address)": {
        "details": "returns the first trove by minimal collaterization ratio"
      },
      "getBorrowingFee(uint256)": {
        "details": "returns fee from borrowing the amount"
      },
      "getRedemptionAmount(uint256,uint256)": {
        "details": "returns amount to be used in redemption excluding fee,"
      },
      "getRedemptionFee(uint256,uint256)": {
        "details": "returns fee from redeeming the amount"
      },
      "getRedemptionFeeRatio(address)": {
        "details": "returns fee from redeeming the amount"
      },
      "getReducedFeeAndRefundAmount(uint256,address)": {
        "details": "returns reduced fee and amount to repay based on trove BONQ stake"
      },
      "increaseCollateralNative(address,address)": {
        "details": "deposits native token into trove after wrapping the ETH (EWT, AVAX, etc) into WETH (WEWT, WAVAX, etc)",
        "params": {
          "_newNextTrove": "hint for next trove position",
          "_trove": "tove to be deposited in"
        }
      },
      "insertTrove(address,address)": {
        "details": "insert a trove in the sorted list of troves. the troves must be sorted by collateralisation ratio CR the sender must be the trove which will be inserted in the list",
        "params": {
          "_newNextTrove": "is the trove before which the trove will be added"
        }
      },
      "lastTrove(address)": {
        "details": "returns the last trove by maximum collaterization ratio"
      },
      "liquidationPool(address)": {
        "details": "returns contract address of LiquidationPool for specific token"
      },
      "nextTrove(address,address)": {
        "details": "returns the next trove by collaterization ratio"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "prevTrove(address,address)": {
        "details": "returns the previous trove by collaterization ratio"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemStableCoinForCollateral(address,uint256,uint256,uint256,address)": {
        "details": "redeem desired StableCoin amount for desired collateral tokens",
        "params": {
          "_lastTroveCurrentICR": "ICR of the last trove to be redeemed, if matches then the hint is working and it redeems",
          "_lastTroveNewPositionHint": "hint for the of the nextNewTrove after redemption for the latest trove",
          "_maxRate": "is max fee (in % with 1e18 precision) allowed to pay",
          "_stableAmount": "the desired amount of StableCoin to pay for redemption"
        }
      },
      "removeTrove(address,address)": {
        "details": "remove a trove from the list and send any remaining token balance to the owner",
        "params": {
          "_trove": "is the trove which will be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setArbitragePool(address)": {
        "details": "sets contract address of ArbitragePool"
      },
      "setArbitrageShareRatio(uint256)": {
        "details": "set the ratio of the arbitrage gains which should go to the sender of the message",
        "params": {
          "_arbitrageShareRatio": "the ratio by which the arbitrage gains will be multiplied"
        }
      },
      "setFeeRecipient(address)": {
        "details": "sets contract address of FeeRecipient"
      },
      "setLiquidationPool(address,address)": {
        "details": "sets contract address of LiquidationPool for specific token"
      },
      "setMaxTroveBONQStake(uint256)": {
        "details": "sets new amount for trove BONQ state at which redemption fee refunding equals to 100%"
      },
      "setServiceFeeImplementation(address)": {
        "details": "sets address of the service-fee-generator implementation for minimal clones"
      },
      "setStabilityPool(address)": {
        "details": "sets contract address of StabilityPool"
      },
      "setTokenOwner()": {
        "details": "sets address of the contract for stableCoin issuance"
      },
      "setTokenPriceFeed(address)": {
        "details": "sets contract address of TokenPriceFeed"
      },
      "setTroveImplementation(address)": {
        "details": "sets address of the Trove implementation for minimal clones"
      },
      "setWETH(address,address)": {
        "details": "sets contract address of Wrapped native token, along with liquidationPool"
      },
      "togglePause()": {
        "details": "toggles the pause state of the contract if the contract is paused borrowing is disabled and liquidation with Stability Pool is impossible (Community liquidations still allowed)"
      },
      "tokenCollateralization(address)": {
        "details": "returns total collateral ratio averaged between troves for specific token"
      },
      "totalCollateral(address)": {
        "details": "returns total collateral among all troves for specific token"
      },
      "totalDebtForToken(address)": {
        "details": "returns total debt among all troves for specific token"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTokenOwnerOwnership(address)": {
        "details": "transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters"
      },
      "transferTokenOwnership(address)": {
        "details": "transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters"
      },
      "troveCount(address)": {
        "details": "returns the number of troves for specific token"
      },
      "updateTotalCollateral(address,uint256,bool)": {
        "details": "function to be called from trove to update total collateral value of all troves of this tokens",
        "params": {
          "_increase": "bool that indicates \"+\" or \"-\" operation"
        }
      },
      "updateTotalDebt(uint256,bool)": {
        "details": "function to be called from trove to change totalDebt",
        "params": {
          "_borrow": "indicates if it is borrow or repay/liquidatin"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 630,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 633,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 612,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 927,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1453,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 949,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 1054,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13494,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IStabilityPoolBase)7641"
      },
      {
        "astId": 13497,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "arbitragePool",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 13502,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_troves",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_struct(TroveList)13472_storage)"
      },
      {
        "astId": 13506,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "tokenOwner",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IMintableTokenOwner)7400"
      },
      {
        "astId": 13510,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "tokenToPriceFeed",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(ITokenPriceFeed)7750"
      },
      {
        "astId": 13514,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "stableCoin",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IMintableToken)7364"
      },
      {
        "astId": 13517,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "WETHContract",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IWETH)8227"
      },
      {
        "astId": 13521,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IFeeRecipient)7284"
      },
      {
        "astId": 13524,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "totalDebt",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 13526,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "troveImplementation",
        "offset": 0,
        "slot": "260",
        "type": "t_address"
      },
      {
        "astId": 13528,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "serviceFeeImplementation",
        "offset": 0,
        "slot": "261",
        "type": "t_address"
      },
      {
        "astId": 13532,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "maxTroveBONQStake",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 13536,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "bonqToken",
        "offset": 0,
        "slot": "263",
        "type": "t_contract(IERC20)3472"
      },
      {
        "astId": 13538,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "arbitrageShareRatio",
        "offset": 0,
        "slot": "264",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3472": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeRecipient)7284": {
        "encoding": "inplace",
        "label": "contract IFeeRecipient",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidationPool)7323": {
        "encoding": "inplace",
        "label": "contract ILiquidationPool",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)7364": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableTokenOwner)7400": {
        "encoding": "inplace",
        "label": "contract IMintableTokenOwner",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPoolBase)7641": {
        "encoding": "inplace",
        "label": "contract IStabilityPoolBase",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenPriceFeed)7750": {
        "encoding": "inplace",
        "label": "contract ITokenPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)8227": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(EntryLink)18431_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LinkedAddressList.EntryLink)",
        "numberOfBytes": "32",
        "value": "t_struct(EntryLink)18431_storage"
      },
      "t_mapping(t_address,t_struct(TroveList)13472_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveFactory.TroveList)",
        "numberOfBytes": "32",
        "value": "t_struct(TroveList)13472_storage"
      },
      "t_struct(EntryLink)18431_storage": {
        "encoding": "inplace",
        "label": "struct LinkedAddressList.EntryLink",
        "members": [
          {
            "astId": 18428,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18430,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(List)18443_storage": {
        "encoding": "inplace",
        "label": "struct LinkedAddressList.List",
        "members": [
          {
            "astId": 18433,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_last",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18435,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_first",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18437,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18442,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_values",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(EntryLink)18431_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TroveList)13472_storage": {
        "encoding": "inplace",
        "label": "struct TroveFactory.TroveList",
        "members": [
          {
            "astId": 13463,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "totalCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13465,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "totalDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13468,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "liquidationPool",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ILiquidationPool)7323"
          },
          {
            "astId": 13471,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "list",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(List)18443_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}