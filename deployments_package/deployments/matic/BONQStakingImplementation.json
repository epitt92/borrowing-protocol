{
  "address": "0xE2056443d0a46a0cc7d8d691e234Ef9005Be0a25",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_bonqTokenAddress",
          "type": "address"
        }
      ],
      "name": "BonqTokenAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_factoryAddress",
          "type": "address"
        }
      ],
      "name": "FactoryAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_F_StableCoin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_redemptionFee",
          "type": "bool"
        }
      ],
      "name": "FeeTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveAddress",
          "type": "address"
        }
      ],
      "name": "RewardRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stableCoinAddress",
          "type": "address"
        }
      ],
      "name": "StableCoinAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newStake",
          "type": "uint256"
        }
      ],
      "name": "StakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_F_StableCoin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stableGains",
          "type": "uint256"
        }
      ],
      "name": "StakerSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalBONQStaked",
          "type": "uint256"
        }
      ],
      "name": "TotalBONQStakedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "F_StableCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "F_StableCoinSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alpha",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonqToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentBaseRate",
          "type": "uint256"
        }
      ],
      "name": "calcDecayedBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ITroveFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnpaidStableCoinGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_increase",
          "type": "uint256"
        }
      ],
      "name": "increaseBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonqToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFeeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minuteDecayFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_troveAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "redeemReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_alpha",
          "type": "uint256"
        }
      ],
      "name": "setAlphaValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_beta",
          "type": "uint256"
        }
      ],
      "name": "setBetaValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryAddress",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "setInitialLastFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeeCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setMaxFeeCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinuteDecayFactor",
          "type": "uint256"
        }
      ],
      "name": "setMinuteDecayFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stableCoinUserGains",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bonqAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "takeFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBONQStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bonqAmount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0a0b6edd8beb91f801a42ab44abc0762e49179466eb302fd740794d6cba505f",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0xE2056443d0a46a0cc7d8d691e234Ef9005Be0a25",
    "transactionIndex": 56,
    "gasUsed": "2164291",
    "logsBloom": "0x
    "blockHash": "0xd2094878bcb559e6e59b6214a28451c745b5f3bb58deaa77d85acf86416a421a",
    "transactionHash": "0xc0a0b6edd8beb91f801a42ab44abc0762e49179466eb302fd740794d6cba505f",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 36542568,
        "transactionHash": "0xc0a0b6edd8beb91f801a42ab44abc0762e49179466eb302fd740794d6cba505f",
        "address": "0xE2056443d0a46a0cc7d8d691e234Ef9005Be0a25",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 172,
        "blockHash": "0xd2094878bcb559e6e59b6214a28451c745b5f3bb58deaa77d85acf86416a421a"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 36542568,
        "transactionHash": "0xc0a0b6edd8beb91f801a42ab44abc0762e49179466eb302fd740794d6cba505f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001267ef4e26a63e30000000000000000000000000000000000000000000000078256e6050ca8482b0000000000000000000000000000000000000000000051756240261e33d52dd9000000000000000000000000000000000000000000000007813067102a3de4480000000000000000000000000000000000000000000051756366a513163f91bc",
        "logIndex": 173,
        "blockHash": "0xd2094878bcb559e6e59b6214a28451c745b5f3bb58deaa77d85acf86416a421a"
      }
    ],
    "blockNumber": 36542568,
    "cumulativeGasUsed": "8677360",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d4309507180ad8123e30dbce5d19e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bonqTokenAddress\",\"type\":\"address\"}],\"name\":\"BonqTokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"}],\"name\":\"FactoryAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_F_StableCoin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_redemptionFee\",\"type\":\"bool\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveAddress\",\"type\":\"address\"}],\"name\":\"RewardRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"StableCoinAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newStake\",\"type\":\"uint256\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_F_StableCoin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stableGains\",\"type\":\"uint256\"}],\"name\":\"StakerSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalBONQStaked\",\"type\":\"uint256\"}],\"name\":\"TotalBONQStakedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"F_StableCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"F_StableCoinSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonqToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentBaseRate\",\"type\":\"uint256\"}],\"name\":\"calcDecayedBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ITroveFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnpaidStableCoinGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increase\",\"type\":\"uint256\"}],\"name\":\"increaseBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonqToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minuteDecayFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_troveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_alpha\",\"type\":\"uint256\"}],\"name\":\"setAlphaValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beta\",\"type\":\"uint256\"}],\"name\":\"setBetaValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setInitialLastFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeeCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setMaxFeeCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinuteDecayFactor\",\"type\":\"uint256\"}],\"name\":\"setMinuteDecayFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinUserGains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonqAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBONQStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonqAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcDecayedBaseRate(uint256)\":{\"details\":\"calculates the rate dacayed by time passed since last fee, uses `decPow` from BONQMath\",\"params\":{\"_currentBaseRate\":\"current rate to decay\"},\"returns\":{\"_0\":\"uint256 decayed baseRate in uint256\"}},\"getBorrowingFee(uint256)\":{\"details\":\"returns fee from borrowing the amount\",\"params\":{\"_amount\":\"amount to borrow\"},\"returns\":{\"_0\":\"uint256 resulting fee\"}},\"getRewardsTotal()\":{\"details\":\"reads the unpaid rewards of the user\"},\"getUnpaidStableCoinGain(address)\":{\"details\":\"reads the unpaid rewards of the user\",\"params\":{\"_user\":\"the user to check\"}},\"increaseBaseRate(uint256)\":{\"details\":\"updates baseRate\",\"params\":{\"_increase\":\"value to add to baseRate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemReward(uint256,address,address)\":{\"details\":\"to redeem StableCoin rewards, transfers the amount only to repay debt of the Trove\",\"params\":{\"_amount\":\"amount of StableCoin to repay the debt\",\"_newNextTrove\":\"hint for the newNextTrove position (next trove)\",\"_troveAddress\":\"address of the valid trove to repay the debt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAlphaValue(uint256)\":{\"details\":\"set the new alpha value\",\"params\":{\"_alpha\":\"uint256 value\"}},\"setBetaValue(uint256)\":{\"details\":\"set the new beta value\",\"params\":{\"_beta\":\"uint256 value\"}},\"setFactory(address)\":{\"details\":\"sets the TroveFactory contract, if address was updated\"},\"setInitialLastFee(uint256)\":{\"details\":\"set timestamp to calculate next decayed rate from\",\"params\":{\"_timestamp\":\"uint256 in seconds\"}},\"setMaxFeeCollateralRatio(uint256)\":{\"details\":\"set the maximum Collateral Ratio threshold to return 100% feeRatio\",\"params\":{\"_maxFeeCollateralRatio\":\"uint256 value\"}},\"setMinuteDecayFactor(uint256)\":{\"details\":\"set the new fee decay factor per minute\",\"params\":{\"_newMinuteDecayFactor\":\"uint256 value\"}},\"stake(uint256)\":{\"details\":\"to stake BONQ\",\"params\":{\"_bonqAmount\":\"amount of BONQ to stake\"}},\"takeFees(uint256)\":{\"details\":\"to pay fee in StableCoin, transfer the amount specified\",\"params\":{\"_amount\":\"amount of StableCoin to pay as fee\"}},\"totalStake()\":{\"details\":\"to get total BONQ stkae amount\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"details\":\"to unstake BONQ\",\"params\":{\"_bonqAmount\":\"amount of BONQ to unstake\"}},\"updateStableCoin()\":{\"details\":\"sets the StableCoin token contract, if address was updated\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"BONQ Staking contract, rewards stakers in StableCoin that is used to pay fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"increaseBaseRate(uint256)\":{\"notice\":\"_increase\"},\"redeemReward(uint256,address,address)\":{\"notice\":\"user can redeem StableCoin rewards only to repay the debt of the troves\"},\"stake(uint256)\":{\"notice\":\"If caller has a pre-existing stake, records any accumulated StableCoin gains to them.\"},\"takeFees(uint256)\":{\"notice\":\"Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains. If requested amount > stake, send their entire stake.\"},\"unstake(uint256)\":{\"notice\":\"Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains. If requested amount > stake, send their entire stake.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BONQ-staking.sol\":\"BONQStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x7554657b651d884f77e786ef65ea098bebbcfedda5ca06126cf7825d6121a368\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe14e576c8651a2409b41db02dd05638d0ceced067a4dbc2918f448e0cb2397e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb671f26ab94e1519cbd14bf10f094873a4d94fe92892666cf3e8846eecbb73fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/BONQ-staking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IBONQStaking.sol\\\";\\nimport \\\"./interfaces/IFeeRecipient.sol\\\";\\nimport \\\"./interfaces/ITroveFactory.sol\\\";\\nimport \\\"./interfaces/ITrove.sol\\\";\\nimport \\\"./utils/BONQMath.sol\\\";\\n\\n/// @title BONQ Staking contract, rewards stakers in StableCoin that is used to pay fee\\ncontract BONQStaking is IBONQStaking, IFeeRecipient, OwnableUpgradeable, UUPSUpgradeable, Constants {\\n  using BONQMath for uint256;\\n  // --- Data ---\\n  string public constant NAME = \\\"BONQStaking\\\";\\n  // constants\\n\\n  uint256 public override baseRate;\\n\\n  uint256 public minuteDecayFactor;\\n  uint256 public beta;\\n  uint256 public alpha;\\n  uint256 public maxFeeCollateralRatio;\\n\\n  mapping(address => uint256) public stakes;\\n  uint256 public totalBONQStaked;\\n\\n  uint256 public F_StableCoin; // Running sum of StableCoin fees per-BONQ-staked\\n  uint256 public lastFeeOperationTime;\\n\\n  // User snapshots of F_BONQ and F_StableCoin, taken at the point at which their latest deposit was made\\n  mapping(address => uint256) public F_StableCoinSnapshots;\\n  mapping(address => uint256) public stableCoinUserGains;\\n\\n  ITroveFactory public factory;\\n  IERC20 public bonqToken;\\n  IERC20 public stableCoin;\\n\\n  // --- Events ---\\n\\n  event FactoryAddressSet(address _factoryAddress);\\n  event BonqTokenAddressSet(address _bonqTokenAddress);\\n  event StableCoinAddressSet(address _stableCoinAddress);\\n\\n  event StakeChanged(address indexed _staker, uint256 _newStake);\\n  event TotalBONQStakedUpdated(uint256 _totalBONQStaked);\\n  event RewardRedeemed(address _account, uint256 _stableAmount, address _troveAddress);\\n  event StakerSnapshotsUpdated(address _staker, uint256 _F_StableCoin, uint256 _stableGains);\\n  event FeeTaken(uint256 _amount, uint256 _F_StableCoin, bool _redemptionFee);\\n\\n  constructor() {\\n    // to prevent contract implementation to be reinitialized by someone else\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _bonqToken) public initializer {\\n    __Ownable_init();\\n    minuteDecayFactor = 999037758833783000;\\n    beta = 25000000000000000000;\\n    alpha = 56000000000000000;\\n    maxFeeCollateralRatio = 5100000000000000000;\\n    bonqToken = IERC20(_bonqToken);\\n  }\\n\\n  // for UUPS implementation\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  function name() public view virtual returns (string memory) {\\n    return NAME;\\n  }\\n\\n  // --- Functions ---\\n\\n  /// @dev set the new fee decay factor per minute\\n  /// @param _newMinuteDecayFactor uint256 value\\n  function setMinuteDecayFactor(uint256 _newMinuteDecayFactor) public onlyOwner {\\n    minuteDecayFactor = _newMinuteDecayFactor;\\n  }\\n\\n  /// @dev set the new alpha value\\n  /// @param _alpha uint256 value\\n  function setAlphaValue(uint256 _alpha) public onlyOwner {\\n    alpha = _alpha;\\n  }\\n\\n  /// @dev set the new beta value\\n  /// @param _beta uint256 value\\n  function setBetaValue(uint256 _beta) public onlyOwner {\\n    beta = _beta;\\n  }\\n\\n  /// @dev set the maximum Collateral Ratio threshold to return 100% feeRatio\\n  /// @param _maxFeeCollateralRatio uint256 value\\n  function setMaxFeeCollateralRatio(uint256 _maxFeeCollateralRatio) public onlyOwner {\\n    maxFeeCollateralRatio = _maxFeeCollateralRatio;\\n  }\\n\\n  /// @dev set timestamp to calculate next decayed rate from\\n  /// @param _timestamp uint256 in seconds\\n  function setInitialLastFee(uint256 _timestamp) public onlyOwner {\\n    lastFeeOperationTime = _timestamp > 0 ? _timestamp : block.timestamp;\\n  }\\n\\n  /// @dev calculates the rate dacayed by time passed since last fee, uses `decPow` from BONQMath\\n  /// @param _currentBaseRate current rate to decay\\n  /// @return uint256 decayed baseRate in uint256\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view override returns (uint256) {\\n    uint256 minutesPassed = (block.timestamp - lastFeeOperationTime) / (1 minutes);\\n    // The _decPow function is a custom function\\n    uint256 decayFactor = BONQMath._decPow(minuteDecayFactor, minutesPassed);\\n    return (_currentBaseRate * decayFactor) / DECIMAL_PRECISION;\\n  }\\n\\n  /// @dev returns fee from borrowing the amount\\n  /// @param _amount amount to borrow\\n  /// @return uint256 resulting fee\\n  function getBorrowingFee(uint256 _amount) public view override returns (uint256) {\\n    return (_amount * BONQMath.min(MAX_BORROWING_RATE, (PERCENT_05 + baseRate))) / DECIMAL_PRECISION;\\n  }\\n\\n  /// @dev sets the TroveFactory contract, if address was updated\\n  function setFactory(address _factoryAddress) external onlyOwner {\\n    factory = ITroveFactory(_factoryAddress);\\n    stableCoin = IERC20(address(factory.stableCoin()));\\n    emit FactoryAddressSet(address(factory));\\n    emit StableCoinAddressSet(address(stableCoin));\\n  }\\n\\n  /// @dev sets the StableCoin token contract, if address was updated\\n  function updateStableCoin() external {\\n    require(address(factory.stableCoin()) != address(stableCoin), \\\"4e1ea nothing to update\\\");\\n    stableCoin = IERC20(address(factory.stableCoin()));\\n    emit StableCoinAddressSet(address(stableCoin));\\n  }\\n\\n  /// @dev to stake BONQ\\n  /// @param _bonqAmount amount of BONQ to stake\\n  /// @notice If caller has a pre-existing stake, records any accumulated StableCoin gains to them.\\n  function stake(uint256 _bonqAmount) external override {\\n    _requireNonZeroAmount(_bonqAmount);\\n\\n    uint256 currentStake = stakes[msg.sender];\\n\\n    // Transfer BONQ from caller to this contract\\n    require(bonqToken.transferFrom(msg.sender, address(this), _bonqAmount), \\\"4e1ea transfer from failed\\\");\\n\\n    // Grab and record accumulated StableCoin gains from the current stake and update Snapshot\\n    uint256 currentTotalBONQStaked = totalBONQStaked;\\n    if (currentTotalBONQStaked == 0) stableCoinUserGains[msg.sender] += F_StableCoin;\\n    _updateUserSnapshot(msg.sender);\\n\\n    // Increase user\\u2019s stake and total BONQ staked\\n    uint256 newTotalBONQStaked = currentTotalBONQStaked + _bonqAmount;\\n    totalBONQStaked = newTotalBONQStaked;\\n    uint256 newUserStake = currentStake + _bonqAmount;\\n    stakes[msg.sender] = newUserStake;\\n\\n    emit TotalBONQStakedUpdated(newTotalBONQStaked);\\n    emit StakeChanged(msg.sender, newUserStake);\\n  }\\n\\n  /// @dev to unstake BONQ\\n  /// @param _bonqAmount amount of BONQ to unstake\\n  /// @notice Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains.\\n  /// If requested amount > stake, send their entire stake.\\n  function unstake(uint256 _bonqAmount) external override {\\n    _requireNonZeroAmount(_bonqAmount);\\n    uint256 currentStake = stakes[msg.sender];\\n    _requireUserHasStake(currentStake);\\n\\n    // Grab and record accumulated StableCoin gains from the current stake and update Snapshot\\n    _updateUserSnapshot(msg.sender);\\n\\n    uint256 BONQToWithdraw = _bonqAmount.min(currentStake);\\n\\n    uint256 newStake = currentStake - BONQToWithdraw;\\n\\n    // Decrease user's stake and total BONQ staked\\n    stakes[msg.sender] = newStake;\\n    totalBONQStaked = totalBONQStaked - BONQToWithdraw;\\n    emit TotalBONQStakedUpdated(totalBONQStaked);\\n\\n    // Transfer unstaked BONQ to user\\n    bonqToken.transfer(msg.sender, BONQToWithdraw);\\n\\n    emit StakeChanged(msg.sender, newStake);\\n  }\\n\\n  // --- Reward-per-unit-staked increase functions. Called by BONQ core contracts ---\\n\\n  /// @dev to pay fee in StableCoin, transfer the amount specified\\n  /// @param _amount amount of StableCoin to pay as fee\\n  /// @notice Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains.\\n  /// If requested amount > stake, send their entire stake.\\n  function takeFees(uint256 _amount) external override returns (bool) {\\n    _requireNonZeroAmount(_amount);\\n    stableCoin.transferFrom(msg.sender, address(this), _amount);\\n    uint256 totalBONQStaked_cached = totalBONQStaked;\\n    uint256 amountPerBONQStaked = _amount;\\n    if (totalBONQStaked_cached > 0) {\\n      amountPerBONQStaked = ((_amount) * DECIMAL_PRECISION) / totalBONQStaked_cached;\\n    }\\n    uint256 newF_StableCoin = F_StableCoin + amountPerBONQStaked;\\n    F_StableCoin = newF_StableCoin;\\n\\n    lastFeeOperationTime = block.timestamp;\\n    emit FeeTaken(_amount, newF_StableCoin, msg.sender == address(factory));\\n    return true;\\n  }\\n\\n  /// @dev updates baseRate\\n  /// @param _increase value to add to baseRate\\n  /// @notice _increase\\n  function increaseBaseRate(uint256 _increase) external override returns (uint256) {\\n    require(msg.sender == address(factory), \\\"10bcb only factory increases baseRate\\\");\\n    baseRate += _increase;\\n    return baseRate;\\n  }\\n\\n  // --- Pending reward functions ---\\n\\n  /// @dev to redeem StableCoin rewards, transfers the amount only to repay debt of the Trove\\n  /// @param _amount amount of StableCoin to repay the debt\\n  /// @param _troveAddress address of the valid trove to repay the debt\\n  /// @param _newNextTrove hint for the newNextTrove position (next trove)\\n  /// @notice user can redeem StableCoin rewards only to repay the debt of the troves\\n  function redeemReward(\\n    uint256 _amount,\\n    address _troveAddress,\\n    address _newNextTrove\\n  ) external override {\\n    _requireNonZeroAmount(_amount);\\n    address account = msg.sender;\\n    ITrove trove = ITrove(_troveAddress);\\n    require(factory.containsTrove(address(trove.token()), _troveAddress), \\\"2ff8c must be called for a valid trove\\\");\\n    _amount = trove.netDebt().min(_amount);\\n    require((_getUnpaidStableCoinGain(msg.sender)) >= _amount, \\\"2ff8c _amount must fit rewards amount\\\");\\n    _updateUserSnapshot(account);\\n    stableCoinUserGains[account] = stableCoinUserGains[account] - _amount;\\n    // TODO: check how much gas can be saved by storing the approved troves in a mapping\\n    // TODO: check the gas difference in using transfer instead of transferFrom for repayment\\n    if (stableCoin.allowance(address(this), address(trove)) < _amount) {\\n      stableCoin.approve(address(trove), MAX_INT);\\n    }\\n    trove.repay(_amount, _newNextTrove);\\n    emit RewardRedeemed(msg.sender, _amount, _troveAddress);\\n  }\\n\\n  /// @dev to get total BONQ stkae amount\\n  function totalStake() external view override returns (uint256) {\\n    return totalBONQStaked;\\n  }\\n\\n  /// @dev reads the unpaid rewards of the user\\n  /// @param _user the user to check\\n  function getUnpaidStableCoinGain(address _user) external view override returns (uint256) {\\n    return _getUnpaidStableCoinGain(_user);\\n  }\\n\\n  /// @dev reads the unpaid rewards of the user\\n  function getRewardsTotal() external view override returns (uint256) {\\n    return F_StableCoin;\\n  }\\n\\n  // --- Internal helper functions ---\\n\\n  function _getPendingStableCoinGain(address _user) internal view returns (uint256) {\\n    uint256 F_StableCoin_Snapshot = F_StableCoinSnapshots[_user];\\n    uint256 stableCoinGain = (stakes[_user] * (F_StableCoin - F_StableCoin_Snapshot)) / DECIMAL_PRECISION;\\n    return stableCoinGain;\\n  }\\n\\n  function _getUnpaidStableCoinGain(address _user) internal view returns (uint256) {\\n    return stableCoinUserGains[_user] + _getPendingStableCoinGain(_user);\\n  }\\n\\n  function _recordStableCoinGain(address _user) internal {\\n    uint256 userStake = stakes[_user];\\n    if (userStake > 0) {\\n      uint256 F_StableCoin_Snapshot = F_StableCoinSnapshots[_user];\\n      uint256 stableCoinGain = (userStake * (F_StableCoin - F_StableCoin_Snapshot)) / DECIMAL_PRECISION;\\n      stableCoinUserGains[_user] += stableCoinGain;\\n    }\\n  }\\n\\n  function _updateUserSnapshot(address _user) internal {\\n    _recordStableCoinGain(_user);\\n    uint256 currentF_StableCoin = F_StableCoin;\\n    F_StableCoinSnapshots[_user] = currentF_StableCoin;\\n    emit StakerSnapshotsUpdated(_user, currentF_StableCoin, stableCoinUserGains[_user]);\\n  }\\n\\n  // --- 'require' functions ---\\n\\n  function _requireUserHasStake(uint256 currentStake) internal pure {\\n    require(currentStake > 0, \\\"fcdb3 User must have a non-zero stake\\\");\\n  }\\n\\n  function _requireNonZeroAmount(uint256 _amount) internal pure {\\n    require(_amount > 0, \\\"8c64b Amount must be non-zero\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x068bf0d68a12b5d0ac65ed3e3f55ba8f2679e4e875906a2369d4676cab9bcfc0\",\"license\":\"MIT\"},\"contracts/interfaces/IBONQStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface IBONQStaking {\\n  /* view */\\n  function totalStake() external view returns (uint256);\\n\\n  function getRewardsTotal() external view returns (uint256);\\n\\n  function getUnpaidStableCoinGain(address _user) external view returns (uint256);\\n\\n  /* state changes*/\\n  function stake(uint256 _amount) external;\\n\\n  function unstake(uint256 _amount) external;\\n\\n  function redeemReward(\\n    uint256 _amount,\\n    address _troveAddress,\\n    address _newNextTrove\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1363daea2dc22be920366f786b189e2a385b6e98165f50ad80e73d9fb0a34dc0\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFeeRecipient {\\n  function baseRate() external view returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view returns (uint256);\\n\\n  /**\\n     @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n     fees from the msg.sender\\n     @param _amount the amount in Wei of fees to transfer\\n     */\\n  function takeFees(uint256 _amount) external returns (bool);\\n\\n  function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x63f8b8fb3c45189659e28d534cadcf7226f06feb6f51b6211b88ed66020f3d57\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface ILiquidationPool {\\n  function collateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liqTokenRate() external view returns (uint256);\\n\\n  function claimCollateralAndDebt(uint256 _unclaimedCollateral, uint256 _unclaimedDebt) external;\\n\\n  function approveTrove(address _trove) external;\\n\\n  function unapproveTrove(address _trove) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x7e7c6bfd1345b762f1373273b6fc007cbda9b1c16e8466bf98110ad59f83906f\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IStabilityPoolBase.sol\\\";\\n\\ninterface IStabilityPool is IStabilityPoolBase {\\n  function arbitrage(\\n    uint256 _amountIn,\\n    address[] calldata _path,\\n    uint256 _deadline\\n  ) external;\\n\\n  function setRouter(address _router) external;\\n}\\n\",\"keccak256\":\"0x6219ebb5d7ff3a0947af1133b6db587ba335b0bfc92145d6ed637cc95be0239a\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IStabilityPoolBase {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function totalDeposit() external view returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function redeemReward() external;\\n\\n  function liquidate() external;\\n\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external;\\n\\n  function setBONQAmountForRewards() external;\\n\\n  function getDepositorBONQGain(address _depositor) external view returns (uint256);\\n\\n  function getWithdrawableDeposit(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf604d75783438cc84d31e72e6becbf359d4233e1d57bacf399767563507750ba\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n  struct TokenInfo {\\n    address priceFeed;\\n    uint256 mcr;\\n    uint256 mrf; // Maximum Redemption Fee\\n  }\\n\\n  function tokenPriceFeed(address) external view returns (address);\\n\\n  function tokenPrice(address _token) external view returns (uint256);\\n\\n  function mcr(address _token) external view returns (uint256);\\n\\n  function mrf(address _token) external view returns (uint256);\\n\\n  function setTokenPriceFeed(\\n    address _token,\\n    address _priceFeed,\\n    uint256 _mcr,\\n    uint256 _maxRedemptionFeeBasisPoints\\n  ) external;\\n\\n  function emitPriceUpdate(\\n    address _token,\\n    uint256 _priceAverage,\\n    uint256 _pricePoint\\n  ) external;\\n\\n  event NewTokenPriceFeed(address _token, address _priceFeed, string _name, string _symbol, uint256 _mcr, uint256 _mrf);\\n  event PriceUpdate(address token, uint256 priceAverage, uint256 pricePoint);\\n}\\n\",\"keccak256\":\"0x1464b339e10e5bcdff774c69d9092696bc4e64c2a1fcbe66120fcdcd72d17a2d\",\"license\":\"MIT\"},\"contracts/interfaces/ITrove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITrove is IOwnable {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function token() external view returns (IERC20);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TOKEN_PRECISION() external view returns (uint256);\\n\\n  function mcr() external view returns (uint256);\\n\\n  function collateralization() external view returns (uint256);\\n\\n  function collateralValue() external view returns (uint256);\\n\\n  function collateral() external view returns (uint256);\\n\\n  function recordedCollateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function netDebt() external view returns (uint256);\\n\\n  //  function rewardRatioSnapshot() external view returns (uint256);\\n\\n  function initialize(\\n    //    address _factory,\\n    address _token,\\n    address _troveOwner\\n  ) external;\\n\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) external;\\n\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function repay(uint256 _amount, address _newNextTrove) external;\\n\\n  function redeem(address _recipient, address _newNextTrove)\\n    external\\n    returns (uint256 _stableAmount, uint256 _collateralRecieved);\\n\\n  function setArbitrageParticipation(bool _state) external;\\n}\\n\",\"keccak256\":\"0x29c912a3de6b59148fc901b0130d2026f5222674ba8f672ac489e4c49af09f8a\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITokenPriceFeed.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\nimport \\\"./IMintableTokenOwner.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\nimport \\\"./ILiquidationPool.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./ITrove.sol\\\";\\n\\ninterface ITroveFactory {\\n  /* view */\\n  function lastTrove(address _trove) external view returns (address);\\n\\n  function firstTrove(address _trove) external view returns (address);\\n\\n  function nextTrove(address _token, address _trove) external view returns (address);\\n\\n  function prevTrove(address _token, address _trove) external view returns (address);\\n\\n  function containsTrove(address _token, address _trove) external view returns (bool);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function tokenOwner() external view returns (IMintableTokenOwner);\\n\\n  function tokenToPriceFeed() external view returns (ITokenPriceFeed);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function troveCount(address _token) external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function totalCollateral(address _token) external view returns (uint256);\\n\\n  function totalDebtForToken(address _token) external view returns (uint256);\\n\\n  function liquidationPool(address _token) external view returns (ILiquidationPool);\\n\\n  function stabilityPool() external view returns (IStabilityPool);\\n\\n  function arbitragePool() external view returns (address);\\n\\n  function getRedemptionFeeRatio(address _trove) external view returns (uint256);\\n\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) external pure returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  /* state changes*/\\n  function createTrove(address _token) external returns (ITrove trove);\\n\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) external;\\n\\n  function removeTrove(address _token, address _trove) external;\\n\\n  function insertTrove(address _trove, address _newNextTrove) external;\\n\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) external;\\n\\n  function updateTotalDebt(uint256 _amount, bool _borrow) external;\\n\\n  function setStabilityPool(address _stabilityPool) external;\\n\\n  function setArbitragePool(address _arbitragePool) external;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external;\\n\\n  function increaseCollateralNative(address _trove, address _newNextTrove) external payable;\\n\\n  /* utils */\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) external;\\n\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external;\\n\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc6ece0cc4694034657c92f2367ac375a835c1051ef54f29d2ef4f81ecf1114b5\",\"license\":\"MIT\"},\"contracts/utils/BONQMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary BONQMath {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\n  /// @dev return the smaller of two numbers\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @dev return the bigger of two numbers\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Multiply two decimal numbers and use normal rounding rules:\\n   *  -round product up if 19'th mantissa digit >= 5\\n   *  -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n    uint256 prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by function that represent time in units of minutes:\\n   * 1) IFeeRecipient.calcDecayedBaseRate\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   * @param _base number to exponentially increase\\n   * @param _minutes power in minutes passed\\n   */\\n  function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint256 y = DECIMAL_PRECISION;\\n    uint256 x = _base;\\n    uint256 n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n}\\n\",\"keccak256\":\"0x0a20a2bf799abe4603a95b343d4d701c0884a57fb61951354dcb7a06075fb0ab\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n  uint256 public constant BORROWING_RATE = PERCENT_05;\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n}\\n\",\"keccak256\":\"0x6a665a01a9a7f729c66450e6b996c07ac47009851acacc6fcb11eb974ef20b5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516125bb6200012060003960008181610f8001528181610fc00152818161105f0152818161109f015261117101526125bb6000f3fe6080604052600436106102935760003560e01c80638b0e9f3f1161015a578063b835f032116100c1578063cbb943591161007a578063cbb9435914610760578063cd16e7f714610790578063d380a37c146107b0578063dabc41a7146107c6578063db1d0fd5146107e6578063f2fde38b146107fc57600080fd5b8063b835f032146106b5578063b85a8b20146106d5578063bc006c38146106ea578063be20e5f114610700578063c45a015514610720578063c4d66de81461074057600080fd5b8063a3f4df7e11610113578063a3f4df7e14610614578063a66ca8f21461064b578063a694fc3a1461066b578063abdc55411461068b578063aceb2d0414610484578063ad09014d146106a057600080fd5b80638b0e9f3f1461057b5780638da5cb5b14610590578063923c1eec146105c2578063992642e5146105de5780639faa3c91146105fe578063a20baee6146105c257600080fd5b806348fd2f5a116101fe5780635bb47808116101b75780635bb47808146104c35780635d1f9d62146104e3578063631203b01461050357806365aedf97146105235780636fb084c414610539578063715018a61461056657600080fd5b806348fd2f5a1461043b5780634f1ef28614610451578063501da27214610464578063517ef1d71461048457806352d1902d146104995780635b13ae08146104ae57600080fd5b80632150efa5116102505780632150efa5146103835780632288437f146103a35780632e17de78146103b85780632fcb6d54146103d85780633659cfe6146103ee578063413b1abf1461040e57600080fd5b806306fb0f6c1461029857806306fdde03146102cb578063098d32281461030857806316934fc41461031e5780631b93740a1461034b5780631f68f20a1461036d575b600080fd5b3480156102a457600080fd5b506102b86102b3366004612198565b61081c565b6040519081526020015b60405180910390f35b3480156102d757600080fd5b5060408051808201909152600b81526a424f4e515374616b696e6760a81b60208201525b6040516102c291906121d5565b34801561031457600080fd5b506102b860001981565b34801561032a57600080fd5b506102b861033936600461221d565b60ce6020526000908152604090205481565b34801561035757600080fd5b5061036b61036636600461223a565b610870565b005b34801561037957600080fd5b506102b860c95481565b34801561038f57600080fd5b5061036b61039e366004612198565b610c82565b3480156103af57600080fd5b5061036b610c8f565b3480156103c457600080fd5b5061036b6103d3366004612198565b610e25565b3480156103e457600080fd5b506102b860cf5481565b3480156103fa57600080fd5b5061036b61040936600461221d565b610f76565b34801561041a57600080fd5b506102b861042936600461221d565b60d26020526000908152604090205481565b34801561044757600080fd5b506102b860d05481565b61036b61045f366004612292565b611055565b34801561047057600080fd5b506102b861047f36600461221d565b611125565b34801561049057600080fd5b506102b8611136565b3480156104a557600080fd5b506102b8611164565b3480156104ba57600080fd5b5060d0546102b8565b3480156104cf57600080fd5b5061036b6104de36600461221d565b611217565b3480156104ef57600080fd5b5061036b6104fe366004612198565b611332565b34801561050f57600080fd5b506102b861051e366004612198565b61133f565b34801561052f57600080fd5b506102b860cd5481565b34801561054557600080fd5b506102b861055436600461221d565b60d36020526000908152604090205481565b34801561057257600080fd5b5061036b6113b5565b34801561058757600080fd5b5060cf546102b8565b34801561059c57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016102c2565b3480156105ce57600080fd5b506102b8670de0b6b3a764000081565b3480156105ea57600080fd5b5060d6546105aa906001600160a01b031681565b34801561060a57600080fd5b506102b860cb5481565b34801561062057600080fd5b506102fb6040518060400160405280600b81526020016a424f4e515374616b696e6760a81b81525081565b34801561065757600080fd5b5060d5546105aa906001600160a01b031681565b34801561067757600080fd5b5061036b610686366004612198565b6113c9565b34801561069757600080fd5b506102b8611594565b3480156106ac57600080fd5b506102b86115a9565b3480156106c157600080fd5b5061036b6106d0366004612198565b6115d3565b3480156106e157600080fd5b506102b86115e0565b3480156106f657600080fd5b506102b860ca5481565b34801561070c57600080fd5b5061036b61071b366004612198565b6115f5565b34801561072c57600080fd5b5060d4546105aa906001600160a01b031681565b34801561074c57600080fd5b5061036b61075b36600461221d565b611602565b34801561076c57600080fd5b5061078061077b366004612198565b61175f565b60405190151581526020016102c2565b34801561079c57600080fd5b506102b86107ab366004612198565b611886565b3480156107bc57600080fd5b506102b860d15481565b3480156107d257600080fd5b5061036b6107e1366004612198565b611911565b3480156107f257600080fd5b506102b860cc5481565b34801561080857600080fd5b5061036b61081736600461221d565b61192f565b600080603c60d1544261082f919061236c565b6108399190612395565b9050600061084960ca54836119a5565b9050670de0b6b3a764000061085e82866123a9565b6108689190612395565b949350505050565b61087983611a5a565b60d45460408051637e062a3560e11b81529051339285926001600160a01b039182169263b3d5e0ce9285169163fc0c546a9160048083019260209291908290030181865afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f391906123c0565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529087166024820152604401602060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096391906123dd565b6109c35760405162461bcd60e51b815260206004820152602660248201527f3266663863206d7573742062652063616c6c656420666f7220612076616c69646044820152652074726f766560d01b60648201526084015b60405180910390fd5b610a2f85826001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2991906123ff565b90611aaa565b945084610a3b33611ac2565b1015610a975760405162461bcd60e51b815260206004820152602560248201527f3266663863205f616d6f756e74206d75737420666974207265776172647320616044820152641b5bdd5b9d60da1b60648201526084016109ba565b610aa082611af0565b6001600160a01b038216600090815260d36020526040902054610ac490869061236c565b6001600160a01b03838116600090815260d36020526040908190209290925560d6549151636eb1769f60e11b8152306004820152838216602482015287929091169063dd62ed3e90604401602060405180830381865afa158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5091906123ff565b1015610bd05760d65460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce91906123dd565b505b60405163acb7081560e01b8152600481018690526001600160a01b03848116602483015282169063acb7081590604401600060405180830381600087803b158015610c1a57600080fd5b505af1158015610c2e573d6000803e3d6000fd5b505060408051338152602081018990526001600160a01b0388168183015290517f554a7c404e78f8dcda2f3ae4ba95a40c05dafc822fb45865a27f0e43dad4edcf9350908190036060019150a15050505050565b610c8a611b5c565b60cd55565b60d65460d4546040805163992642e560e01b815290516001600160a01b03938416939092169163992642e5916004808201926020929091908290030181865afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0491906123c0565b6001600160a01b031603610d5a5760405162461bcd60e51b815260206004820152601760248201527f3465316561206e6f7468696e6720746f2075706461746500000000000000000060448201526064016109ba565b60d460009054906101000a90046001600160a01b03166001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd191906123c0565b60d680546001600160a01b0319166001600160a01b039290921691821790556040519081527f8b3e443d01c14c05684786a0273fdb48381417285bd830b7e71354d3ce6016669060200160405180910390a1565b610e2e81611a5a565b33600090815260ce6020526040902054610e4781611bb6565b610e5033611af0565b6000610e5c8383611aaa565b90506000610e6a828461236c565b33600090815260ce6020526040902081905560cf54909150610e8d90839061236c565b60cf8190556040519081527fa3303db2a247bc4a95eedbd499e30c2b0398e6293d3f5f9010e8d7d90cf0f6599060200160405180910390a160d55460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a91906123dd565b5060405181815233907f39df0e5286a3ef2f42a0bf52f32cfe2c58e5b0405f47fe512f2c2439e4cfe2049060200160405180910390a250505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fbe5760405162461bcd60e51b81526004016109ba90612418565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661100760008051602061253f833981519152546001600160a01b031690565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016109ba90612464565b61103681611c14565b6040805160008082526020820190925261105291839190611c1c565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361109d5760405162461bcd60e51b81526004016109ba90612418565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110e660008051602061253f833981519152546001600160a01b031690565b6001600160a01b03161461110c5760405162461bcd60e51b81526004016109ba90612464565b61111582611c14565b61112182826001611c1c565b5050565b600061113082611ac2565b92915050565b6002606461114d670de0b6b3a764000060016123a9565b6111579190612395565b6111619190612395565b81565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112045760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016109ba565b5060008051602061253f83398151915290565b61121f611b5c565b60d480546001600160a01b0319166001600160a01b0383169081179091556040805163992642e560e01b8152905163992642e5916004808201926020929091908290030181865afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c91906123c0565b60d680546001600160a01b0319166001600160a01b0392831617905560d454604051911681527f9d910c9fad7f6caea97ddebdae1c9588dcbeee40ac58fbea43811e3554b6d7279060200160405180910390a160d6546040516001600160a01b0390911681527f8b3e443d01c14c05684786a0273fdb48381417285bd830b7e71354d3ce6016669060200160405180910390a150565b61133a611b5c565b60cc55565b6000670de0b6b3a76400006113a1606461135a8360056123a9565b6113649190612395565b60c9546002606461137e670de0b6b3a764000060016123a9565b6113889190612395565b6113929190612395565b61139c91906124b0565b611aaa565b6113ab90846123a9565b6111309190612395565b6113bd611b5c565b6113c76000611d8c565b565b6113d281611a5a565b33600081815260ce6020526040908190205460d55491516323b872dd60e01b8152600481019390935230602484015260448301849052916001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906123dd565b6114ad5760405162461bcd60e51b815260206004820152601a60248201527f3465316561207472616e736665722066726f6d206661696c656400000000000060448201526064016109ba565b60cf5460008190036114e15760d05433600090815260d36020526040812080549091906114db9084906124b0565b90915550505b6114ea33611af0565b60006114f684836124b0565b60cf8190559050600061150985856124b0565b33600090815260ce602052604090819020829055519091507fa3303db2a247bc4a95eedbd499e30c2b0398e6293d3f5f9010e8d7d90cf0f659906115509084815260200190565b60405180910390a160405181815233907f39df0e5286a3ef2f42a0bf52f32cfe2c58e5b0405f47fe512f2c2439e4cfe2049060200160405180910390a25050505050565b6064611157670de0b6b3a764000060056123a9565b60646115be670de0b6b3a764000060016123a9565b6115c89190612395565b61116190600a6123a9565b6115db611b5c565b60ca55565b6064611157670de0b6b3a764000060016123a9565b6115fd611b5c565b60cb55565b600054610100900460ff16158080156116225750600054600160ff909116105b8061163c5750303b15801561163c575060005460ff166001145b61169f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109ba565b6000805460ff1916600117905580156116c2576000805461ff0019166101001790555b6116ca611dde565b670ddd4b8c6c7d70d860ca5568015af1d78b58c4000060cb5566c6f3b40b6c000060cc556746c6d6faa27e000060cd5560d580546001600160a01b0319166001600160a01b0384161790558015611121576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b600061176a82611a5a565b60d6546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e591906123dd565b5060cf548281156118105781611803670de0b6b3a7640000866123a9565b61180d9190612395565b90505b60008160d05461182091906124b0565b60d08190554260d15560d45460408051888152602081018490526001600160a01b039092163314908201529091507f62747fbd5ac2f0c08a49c2f926da70c4bb6c33e4db33a42674de054ae5c2dd269060600160405180910390a1506001949350505050565b60d4546000906001600160a01b031633146118f15760405162461bcd60e51b815260206004820152602560248201527f3130626362206f6e6c7920666163746f727920696e6372656173657320626173604482015264655261746560d81b60648201526084016109ba565b8160c9600082825461190391906124b0565b909155505060c95492915050565b611919611b5c565b600081116119275742611929565b805b60d15550565b611937611b5c565b6001600160a01b03811661199c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109ba565b61105281611d8c565b6000631f5405008211156119bb57631f54050091505b816000036119d25750670de0b6b3a7640000611130565b670de0b6b3a764000083835b6001811115611a46576119f26002826124c3565b600003611a1757611a038283611e0d565b9150611a10600282612395565b90506119de565b611a218284611e0d565b9250611a2d8283611e0d565b91506002611a3c60018361236c565b611a109190612395565b611a508284611e0d565b9695505050505050565b600081116110525760405162461bcd60e51b815260206004820152601d60248201527f386336346220416d6f756e74206d757374206265206e6f6e2d7a65726f00000060448201526064016109ba565b6000818310611ab95781611abb565b825b9392505050565b6000611acd82611e3a565b6001600160a01b038316600090815260d3602052604090205461113091906124b0565b611af981611e90565b60d0546001600160a01b038216600081815260d26020908152604080832085905560d3825291829020548251938452908301849052908201527f6b5cf27595af4428271524e0a5abd2b63f6fee1a61e31970490f5a10e257a1cd90606001611753565b6033546001600160a01b031633146113c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109ba565b600081116110525760405162461bcd60e51b815260206004820152602560248201527f66636462332055736572206d75737420686176652061206e6f6e2d7a65726f206044820152647374616b6560d81b60648201526084016109ba565b611052611b5c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c5457611c4f83611f2f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611cae575060408051601f3d908101601f19168201909252611cab918101906123ff565b60015b611d115760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016109ba565b60008051602061253f8339815191528114611d805760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016109ba565b50611c4f838383611fcb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e055760405162461bcd60e51b81526004016109ba906124d7565b6113c7611ff6565b600080611e1a83856123a9565b9050670de0b6b3a7640000611e30600282612395565b61085e90836124b0565b6001600160a01b038116600090815260d2602052604081205460d0548290670de0b6b3a764000090611e6d90849061236c565b6001600160a01b038616600090815260ce602052604090205461085e91906123a9565b6001600160a01b038116600090815260ce60205260409020548015611121576001600160a01b038216600090815260d2602052604081205460d054909190670de0b6b3a764000090611ee390849061236c565b611eed90856123a9565b611ef79190612395565b6001600160a01b038516600090815260d36020526040812080549293508392909190611f249084906124b0565b909155505050505050565b6001600160a01b0381163b611f9c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016109ba565b60008051602061253f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611fd483612026565b600082511180611fe15750805b15611c4f57611ff08383612066565b50505050565b600054610100900460ff1661201d5760405162461bcd60e51b81526004016109ba906124d7565b6113c733611d8c565b61202f81611f2f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120ce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016109ba565b600080846001600160a01b0316846040516120e99190612522565b600060405180830381855af49150503d8060008114612124576040519150601f19603f3d011682016040523d82523d6000602084013e612129565b606091505b5091509150612151828260405180606001604052806027815260200161255f6027913961215a565b95945050505050565b60608315612169575081611abb565b611abb838381511561217e5781518083602001fd5b8060405162461bcd60e51b81526004016109ba91906121d5565b6000602082840312156121aa57600080fd5b5035919050565b60005b838110156121cc5781810151838201526020016121b4565b50506000910152565b60208152600082518060208401526121f48160408501602087016121b1565b601f01601f19169190910160400192915050565b6001600160a01b038116811461105257600080fd5b60006020828403121561222f57600080fd5b8135611abb81612208565b60008060006060848603121561224f57600080fd5b83359250602084013561226181612208565b9150604084013561227181612208565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156122a557600080fd5b82356122b081612208565b9150602083013567ffffffffffffffff808211156122cd57600080fd5b818501915085601f8301126122e157600080fd5b8135818111156122f3576122f361227c565b604051601f8201601f19908116603f0116810190838211818310171561231b5761231b61227c565b8160405282815288602084870101111561233457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561113057611130612356565b634e487b7160e01b600052601260045260246000fd5b6000826123a4576123a461237f565b500490565b808202811582820484141761113057611130612356565b6000602082840312156123d257600080fd5b8151611abb81612208565b6000602082840312156123ef57600080fd5b81518015158114611abb57600080fd5b60006020828403121561241157600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082018082111561113057611130612356565b6000826124d2576124d261237f565b500690565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516125348184602087016121b1565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208f6e9e644d78f149d6503c7447da92c7733550f3bc45707fd289790fbe9b0eb264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102935760003560e01c80638b0e9f3f1161015a578063b835f032116100c1578063cbb943591161007a578063cbb9435914610760578063cd16e7f714610790578063d380a37c146107b0578063dabc41a7146107c6578063db1d0fd5146107e6578063f2fde38b146107fc57600080fd5b8063b835f032146106b5578063b85a8b20146106d5578063bc006c38146106ea578063be20e5f114610700578063c45a015514610720578063c4d66de81461074057600080fd5b8063a3f4df7e11610113578063a3f4df7e14610614578063a66ca8f21461064b578063a694fc3a1461066b578063abdc55411461068b578063aceb2d0414610484578063ad09014d146106a057600080fd5b80638b0e9f3f1461057b5780638da5cb5b14610590578063923c1eec146105c2578063992642e5146105de5780639faa3c91146105fe578063a20baee6146105c257600080fd5b806348fd2f5a116101fe5780635bb47808116101b75780635bb47808146104c35780635d1f9d62146104e3578063631203b01461050357806365aedf97146105235780636fb084c414610539578063715018a61461056657600080fd5b806348fd2f5a1461043b5780634f1ef28614610451578063501da27214610464578063517ef1d71461048457806352d1902d146104995780635b13ae08146104ae57600080fd5b80632150efa5116102505780632150efa5146103835780632288437f146103a35780632e17de78146103b85780632fcb6d54146103d85780633659cfe6146103ee578063413b1abf1461040e57600080fd5b806306fb0f6c1461029857806306fdde03146102cb578063098d32281461030857806316934fc41461031e5780631b93740a1461034b5780631f68f20a1461036d575b600080fd5b3480156102a457600080fd5b506102b86102b3366004612198565b61081c565b6040519081526020015b60405180910390f35b3480156102d757600080fd5b5060408051808201909152600b81526a424f4e515374616b696e6760a81b60208201525b6040516102c291906121d5565b34801561031457600080fd5b506102b860001981565b34801561032a57600080fd5b506102b861033936600461221d565b60ce6020526000908152604090205481565b34801561035757600080fd5b5061036b61036636600461223a565b610870565b005b34801561037957600080fd5b506102b860c95481565b34801561038f57600080fd5b5061036b61039e366004612198565b610c82565b3480156103af57600080fd5b5061036b610c8f565b3480156103c457600080fd5b5061036b6103d3366004612198565b610e25565b3480156103e457600080fd5b506102b860cf5481565b3480156103fa57600080fd5b5061036b61040936600461221d565b610f76565b34801561041a57600080fd5b506102b861042936600461221d565b60d26020526000908152604090205481565b34801561044757600080fd5b506102b860d05481565b61036b61045f366004612292565b611055565b34801561047057600080fd5b506102b861047f36600461221d565b611125565b34801561049057600080fd5b506102b8611136565b3480156104a557600080fd5b506102b8611164565b3480156104ba57600080fd5b5060d0546102b8565b3480156104cf57600080fd5b5061036b6104de36600461221d565b611217565b3480156104ef57600080fd5b5061036b6104fe366004612198565b611332565b34801561050f57600080fd5b506102b861051e366004612198565b61133f565b34801561052f57600080fd5b506102b860cd5481565b34801561054557600080fd5b506102b861055436600461221d565b60d36020526000908152604090205481565b34801561057257600080fd5b5061036b6113b5565b34801561058757600080fd5b5060cf546102b8565b34801561059c57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016102c2565b3480156105ce57600080fd5b506102b8670de0b6b3a764000081565b3480156105ea57600080fd5b5060d6546105aa906001600160a01b031681565b34801561060a57600080fd5b506102b860cb5481565b34801561062057600080fd5b506102fb6040518060400160405280600b81526020016a424f4e515374616b696e6760a81b81525081565b34801561065757600080fd5b5060d5546105aa906001600160a01b031681565b34801561067757600080fd5b5061036b610686366004612198565b6113c9565b34801561069757600080fd5b506102b8611594565b3480156106ac57600080fd5b506102b86115a9565b3480156106c157600080fd5b5061036b6106d0366004612198565b6115d3565b3480156106e157600080fd5b506102b86115e0565b3480156106f657600080fd5b506102b860ca5481565b34801561070c57600080fd5b5061036b61071b366004612198565b6115f5565b34801561072c57600080fd5b5060d4546105aa906001600160a01b031681565b34801561074c57600080fd5b5061036b61075b36600461221d565b611602565b34801561076c57600080fd5b5061078061077b366004612198565b61175f565b60405190151581526020016102c2565b34801561079c57600080fd5b506102b86107ab366004612198565b611886565b3480156107bc57600080fd5b506102b860d15481565b3480156107d257600080fd5b5061036b6107e1366004612198565b611911565b3480156107f257600080fd5b506102b860cc5481565b34801561080857600080fd5b5061036b61081736600461221d565b61192f565b600080603c60d1544261082f919061236c565b6108399190612395565b9050600061084960ca54836119a5565b9050670de0b6b3a764000061085e82866123a9565b6108689190612395565b949350505050565b61087983611a5a565b60d45460408051637e062a3560e11b81529051339285926001600160a01b039182169263b3d5e0ce9285169163fc0c546a9160048083019260209291908290030181865afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f391906123c0565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529087166024820152604401602060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096391906123dd565b6109c35760405162461bcd60e51b815260206004820152602660248201527f3266663863206d7573742062652063616c6c656420666f7220612076616c69646044820152652074726f766560d01b60648201526084015b60405180910390fd5b610a2f85826001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2991906123ff565b90611aaa565b945084610a3b33611ac2565b1015610a975760405162461bcd60e51b815260206004820152602560248201527f3266663863205f616d6f756e74206d75737420666974207265776172647320616044820152641b5bdd5b9d60da1b60648201526084016109ba565b610aa082611af0565b6001600160a01b038216600090815260d36020526040902054610ac490869061236c565b6001600160a01b03838116600090815260d36020526040908190209290925560d6549151636eb1769f60e11b8152306004820152838216602482015287929091169063dd62ed3e90604401602060405180830381865afa158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5091906123ff565b1015610bd05760d65460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce91906123dd565b505b60405163acb7081560e01b8152600481018690526001600160a01b03848116602483015282169063acb7081590604401600060405180830381600087803b158015610c1a57600080fd5b505af1158015610c2e573d6000803e3d6000fd5b505060408051338152602081018990526001600160a01b0388168183015290517f554a7c404e78f8dcda2f3ae4ba95a40c05dafc822fb45865a27f0e43dad4edcf9350908190036060019150a15050505050565b610c8a611b5c565b60cd55565b60d65460d4546040805163992642e560e01b815290516001600160a01b03938416939092169163992642e5916004808201926020929091908290030181865afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0491906123c0565b6001600160a01b031603610d5a5760405162461bcd60e51b815260206004820152601760248201527f3465316561206e6f7468696e6720746f2075706461746500000000000000000060448201526064016109ba565b60d460009054906101000a90046001600160a01b03166001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd191906123c0565b60d680546001600160a01b0319166001600160a01b039290921691821790556040519081527f8b3e443d01c14c05684786a0273fdb48381417285bd830b7e71354d3ce6016669060200160405180910390a1565b610e2e81611a5a565b33600090815260ce6020526040902054610e4781611bb6565b610e5033611af0565b6000610e5c8383611aaa565b90506000610e6a828461236c565b33600090815260ce6020526040902081905560cf54909150610e8d90839061236c565b60cf8190556040519081527fa3303db2a247bc4a95eedbd499e30c2b0398e6293d3f5f9010e8d7d90cf0f6599060200160405180910390a160d55460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a91906123dd565b5060405181815233907f39df0e5286a3ef2f42a0bf52f32cfe2c58e5b0405f47fe512f2c2439e4cfe2049060200160405180910390a250505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fbe5760405162461bcd60e51b81526004016109ba90612418565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661100760008051602061253f833981519152546001600160a01b031690565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016109ba90612464565b61103681611c14565b6040805160008082526020820190925261105291839190611c1c565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361109d5760405162461bcd60e51b81526004016109ba90612418565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110e660008051602061253f833981519152546001600160a01b031690565b6001600160a01b03161461110c5760405162461bcd60e51b81526004016109ba90612464565b61111582611c14565b61112182826001611c1c565b5050565b600061113082611ac2565b92915050565b6002606461114d670de0b6b3a764000060016123a9565b6111579190612395565b6111619190612395565b81565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112045760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016109ba565b5060008051602061253f83398151915290565b61121f611b5c565b60d480546001600160a01b0319166001600160a01b0383169081179091556040805163992642e560e01b8152905163992642e5916004808201926020929091908290030181865afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c91906123c0565b60d680546001600160a01b0319166001600160a01b0392831617905560d454604051911681527f9d910c9fad7f6caea97ddebdae1c9588dcbeee40ac58fbea43811e3554b6d7279060200160405180910390a160d6546040516001600160a01b0390911681527f8b3e443d01c14c05684786a0273fdb48381417285bd830b7e71354d3ce6016669060200160405180910390a150565b61133a611b5c565b60cc55565b6000670de0b6b3a76400006113a1606461135a8360056123a9565b6113649190612395565b60c9546002606461137e670de0b6b3a764000060016123a9565b6113889190612395565b6113929190612395565b61139c91906124b0565b611aaa565b6113ab90846123a9565b6111309190612395565b6113bd611b5c565b6113c76000611d8c565b565b6113d281611a5a565b33600081815260ce6020526040908190205460d55491516323b872dd60e01b8152600481019390935230602484015260448301849052916001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906123dd565b6114ad5760405162461bcd60e51b815260206004820152601a60248201527f3465316561207472616e736665722066726f6d206661696c656400000000000060448201526064016109ba565b60cf5460008190036114e15760d05433600090815260d36020526040812080549091906114db9084906124b0565b90915550505b6114ea33611af0565b60006114f684836124b0565b60cf8190559050600061150985856124b0565b33600090815260ce602052604090819020829055519091507fa3303db2a247bc4a95eedbd499e30c2b0398e6293d3f5f9010e8d7d90cf0f659906115509084815260200190565b60405180910390a160405181815233907f39df0e5286a3ef2f42a0bf52f32cfe2c58e5b0405f47fe512f2c2439e4cfe2049060200160405180910390a25050505050565b6064611157670de0b6b3a764000060056123a9565b60646115be670de0b6b3a764000060016123a9565b6115c89190612395565b61116190600a6123a9565b6115db611b5c565b60ca55565b6064611157670de0b6b3a764000060016123a9565b6115fd611b5c565b60cb55565b600054610100900460ff16158080156116225750600054600160ff909116105b8061163c5750303b15801561163c575060005460ff166001145b61169f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109ba565b6000805460ff1916600117905580156116c2576000805461ff0019166101001790555b6116ca611dde565b670ddd4b8c6c7d70d860ca5568015af1d78b58c4000060cb5566c6f3b40b6c000060cc556746c6d6faa27e000060cd5560d580546001600160a01b0319166001600160a01b0384161790558015611121576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b600061176a82611a5a565b60d6546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e591906123dd565b5060cf548281156118105781611803670de0b6b3a7640000866123a9565b61180d9190612395565b90505b60008160d05461182091906124b0565b60d08190554260d15560d45460408051888152602081018490526001600160a01b039092163314908201529091507f62747fbd5ac2f0c08a49c2f926da70c4bb6c33e4db33a42674de054ae5c2dd269060600160405180910390a1506001949350505050565b60d4546000906001600160a01b031633146118f15760405162461bcd60e51b815260206004820152602560248201527f3130626362206f6e6c7920666163746f727920696e6372656173657320626173604482015264655261746560d81b60648201526084016109ba565b8160c9600082825461190391906124b0565b909155505060c95492915050565b611919611b5c565b600081116119275742611929565b805b60d15550565b611937611b5c565b6001600160a01b03811661199c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109ba565b61105281611d8c565b6000631f5405008211156119bb57631f54050091505b816000036119d25750670de0b6b3a7640000611130565b670de0b6b3a764000083835b6001811115611a46576119f26002826124c3565b600003611a1757611a038283611e0d565b9150611a10600282612395565b90506119de565b611a218284611e0d565b9250611a2d8283611e0d565b91506002611a3c60018361236c565b611a109190612395565b611a508284611e0d565b9695505050505050565b600081116110525760405162461bcd60e51b815260206004820152601d60248201527f386336346220416d6f756e74206d757374206265206e6f6e2d7a65726f00000060448201526064016109ba565b6000818310611ab95781611abb565b825b9392505050565b6000611acd82611e3a565b6001600160a01b038316600090815260d3602052604090205461113091906124b0565b611af981611e90565b60d0546001600160a01b038216600081815260d26020908152604080832085905560d3825291829020548251938452908301849052908201527f6b5cf27595af4428271524e0a5abd2b63f6fee1a61e31970490f5a10e257a1cd90606001611753565b6033546001600160a01b031633146113c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109ba565b600081116110525760405162461bcd60e51b815260206004820152602560248201527f66636462332055736572206d75737420686176652061206e6f6e2d7a65726f206044820152647374616b6560d81b60648201526084016109ba565b611052611b5c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c5457611c4f83611f2f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611cae575060408051601f3d908101601f19168201909252611cab918101906123ff565b60015b611d115760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016109ba565b60008051602061253f8339815191528114611d805760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016109ba565b50611c4f838383611fcb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e055760405162461bcd60e51b81526004016109ba906124d7565b6113c7611ff6565b600080611e1a83856123a9565b9050670de0b6b3a7640000611e30600282612395565b61085e90836124b0565b6001600160a01b038116600090815260d2602052604081205460d0548290670de0b6b3a764000090611e6d90849061236c565b6001600160a01b038616600090815260ce602052604090205461085e91906123a9565b6001600160a01b038116600090815260ce60205260409020548015611121576001600160a01b038216600090815260d2602052604081205460d054909190670de0b6b3a764000090611ee390849061236c565b611eed90856123a9565b611ef79190612395565b6001600160a01b038516600090815260d36020526040812080549293508392909190611f249084906124b0565b909155505050505050565b6001600160a01b0381163b611f9c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016109ba565b60008051602061253f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611fd483612026565b600082511180611fe15750805b15611c4f57611ff08383612066565b50505050565b600054610100900460ff1661201d5760405162461bcd60e51b81526004016109ba906124d7565b6113c733611d8c565b61202f81611f2f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120ce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016109ba565b600080846001600160a01b0316846040516120e99190612522565b600060405180830381855af49150503d8060008114612124576040519150601f19603f3d011682016040523d82523d6000602084013e612129565b606091505b5091509150612151828260405180606001604052806027815260200161255f6027913961215a565b95945050505050565b60608315612169575081611abb565b611abb838381511561217e5781518083602001fd5b8060405162461bcd60e51b81526004016109ba91906121d5565b6000602082840312156121aa57600080fd5b5035919050565b60005b838110156121cc5781810151838201526020016121b4565b50506000910152565b60208152600082518060208401526121f48160408501602087016121b1565b601f01601f19169190910160400192915050565b6001600160a01b038116811461105257600080fd5b60006020828403121561222f57600080fd5b8135611abb81612208565b60008060006060848603121561224f57600080fd5b83359250602084013561226181612208565b9150604084013561227181612208565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156122a557600080fd5b82356122b081612208565b9150602083013567ffffffffffffffff808211156122cd57600080fd5b818501915085601f8301126122e157600080fd5b8135818111156122f3576122f361227c565b604051601f8201601f19908116603f0116810190838211818310171561231b5761231b61227c565b8160405282815288602084870101111561233457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561113057611130612356565b634e487b7160e01b600052601260045260246000fd5b6000826123a4576123a461237f565b500490565b808202811582820484141761113057611130612356565b6000602082840312156123d257600080fd5b8151611abb81612208565b6000602082840312156123ef57600080fd5b81518015158114611abb57600080fd5b60006020828403121561241157600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082018082111561113057611130612356565b6000826124d2576124d261237f565b500690565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516125348184602087016121b1565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208f6e9e644d78f149d6503c7447da92c7733550f3bc45707fd289790fbe9b0eb264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calcDecayedBaseRate(uint256)": {
        "details": "calculates the rate dacayed by time passed since last fee, uses `decPow` from BONQMath",
        "params": {
          "_currentBaseRate": "current rate to decay"
        },
        "returns": {
          "_0": "uint256 decayed baseRate in uint256"
        }
      },
      "getBorrowingFee(uint256)": {
        "details": "returns fee from borrowing the amount",
        "params": {
          "_amount": "amount to borrow"
        },
        "returns": {
          "_0": "uint256 resulting fee"
        }
      },
      "getRewardsTotal()": {
        "details": "reads the unpaid rewards of the user"
      },
      "getUnpaidStableCoinGain(address)": {
        "details": "reads the unpaid rewards of the user",
        "params": {
          "_user": "the user to check"
        }
      },
      "increaseBaseRate(uint256)": {
        "details": "updates baseRate",
        "params": {
          "_increase": "value to add to baseRate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemReward(uint256,address,address)": {
        "details": "to redeem StableCoin rewards, transfers the amount only to repay debt of the Trove",
        "params": {
          "_amount": "amount of StableCoin to repay the debt",
          "_newNextTrove": "hint for the newNextTrove position (next trove)",
          "_troveAddress": "address of the valid trove to repay the debt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAlphaValue(uint256)": {
        "details": "set the new alpha value",
        "params": {
          "_alpha": "uint256 value"
        }
      },
      "setBetaValue(uint256)": {
        "details": "set the new beta value",
        "params": {
          "_beta": "uint256 value"
        }
      },
      "setFactory(address)": {
        "details": "sets the TroveFactory contract, if address was updated"
      },
      "setInitialLastFee(uint256)": {
        "details": "set timestamp to calculate next decayed rate from",
        "params": {
          "_timestamp": "uint256 in seconds"
        }
      },
      "setMaxFeeCollateralRatio(uint256)": {
        "details": "set the maximum Collateral Ratio threshold to return 100% feeRatio",
        "params": {
          "_maxFeeCollateralRatio": "uint256 value"
        }
      },
      "setMinuteDecayFactor(uint256)": {
        "details": "set the new fee decay factor per minute",
        "params": {
          "_newMinuteDecayFactor": "uint256 value"
        }
      },
      "stake(uint256)": {
        "details": "to stake BONQ",
        "params": {
          "_bonqAmount": "amount of BONQ to stake"
        }
      },
      "takeFees(uint256)": {
        "details": "to pay fee in StableCoin, transfer the amount specified",
        "params": {
          "_amount": "amount of StableCoin to pay as fee"
        }
      },
      "totalStake()": {
        "details": "to get total BONQ stkae amount"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "details": "to unstake BONQ",
        "params": {
          "_bonqAmount": "amount of BONQ to unstake"
        }
      },
      "updateStableCoin()": {
        "details": "sets the StableCoin token contract, if address was updated"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "BONQ Staking contract, rewards stakers in StableCoin that is used to pay fee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "increaseBaseRate(uint256)": {
        "notice": "_increase"
      },
      "redeemReward(uint256,address,address)": {
        "notice": "user can redeem StableCoin rewards only to repay the debt of the troves"
      },
      "stake(uint256)": {
        "notice": "If caller has a pre-existing stake, records any accumulated StableCoin gains to them."
      },
      "takeFees(uint256)": {
        "notice": "Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains. If requested amount > stake, send their entire stake."
      },
      "unstake(uint256)": {
        "notice": "Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains. If requested amount > stake, send their entire stake."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 630,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 633,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1453,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 612,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 927,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5169,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "baseRate",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 5171,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "minuteDecayFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 5173,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "beta",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 5175,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "alpha",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 5177,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "maxFeeCollateralRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 5181,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5183,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "totalBONQStaked",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 5185,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "F_StableCoin",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 5187,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 5191,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "F_StableCoinSnapshots",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5195,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "stableCoinUserGains",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5198,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "factory",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(ITroveFactory)9417"
      },
      {
        "astId": 5201,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "bonqToken",
        "offset": 0,
        "slot": "213",
        "type": "t_contract(IERC20)3472"
      },
      {
        "astId": 5204,
        "contract": "contracts/BONQ-staking.sol:BONQStaking",
        "label": "stableCoin",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IERC20)3472"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3472": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveFactory)9417": {
        "encoding": "inplace",
        "label": "contract ITroveFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}