{
  "address": "0xe1E771dFBF2046CAc51b3256F4e09fa0b9118822",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrageParticipation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrageState",
      "outputs": [
        {
          "internalType": "contract IArbitragePool",
          "name": "arbitragePool",
          "type": "address"
        },
        {
          "internalType": "contract IMintableToken",
          "name": "apToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastApPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "decreaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ITroveFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "increaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqTokenRateSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mcr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recordedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralRecieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ownerToRemove",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setArbitrageParticipation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedArbitrageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedCollateralRewardAndDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd20c83cbfcbe44a6645fbde9405d5e7b377894153bc0a8832954da9f84f8c782",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0xe1E771dFBF2046CAc51b3256F4e09fa0b9118822",
    "transactionIndex": 35,
    "gasUsed": "4325423",
    "logsBloom": "0x
    "blockHash": "0xf468612f749390cf3d17d8bd21688ae0540f7c734769b3525073c06d1cf88e00",
    "transactionHash": "0xd20c83cbfcbe44a6645fbde9405d5e7b377894153bc0a8832954da9f84f8c782",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 37020364,
        "transactionHash": "0xd20c83cbfcbe44a6645fbde9405d5e7b377894153bc0a8832954da9f84f8c782",
        "address": "0xe1E771dFBF2046CAc51b3256F4e09fa0b9118822",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0xf468612f749390cf3d17d8bd21688ae0540f7c734769b3525073c06d1cf88e00"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 37020364,
        "transactionHash": "0xd20c83cbfcbe44a6645fbde9405d5e7b377894153bc0a8832954da9f84f8c782",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002116c320bcd7740000000000000000000000000000000000000000000000006bfb1ebd87c37c04a0000000000000000000000000000000000000000000004fee6df842e7642d71e000000000000000000000000000000000000000000000006bda07fa6706a490a0000000000000000000000000000000000000000000004fee8f0f06082104e5e",
        "logIndex": 132,
        "blockHash": "0xf468612f749390cf3d17d8bd21688ae0540f7c734769b3525073c06d1cf88e00"
      }
    ],
    "blockNumber": 37020364,
    "cumulativeGasUsed": "9929880",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3bB7fFD08f46620beA3a9Ae7F096cF2b213768B3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0ad91dfc9da538af5d7b10d9f4978a6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrageParticipation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrageState\",\"outputs\":[{\"internalType\":\"contract IArbitragePool\",\"name\":\"arbitragePool\",\"type\":\"address\"},{\"internalType\":\"contract IMintableToken\",\"name\":\"apToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastApPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"decreaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ITroveFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"increaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqTokenRateSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRecieved\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerToRemove\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setArbitrageParticipation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedArbitrageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedCollateralRewardAndDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"add an address to the list of owners\",\"params\":{\"_newOwner\":\"the address of the new owner\"}},\"borrow(address,uint256,address)\":{\"details\":\"mint some stable coins and pay the issuance fee. The transaction will fail if the resulting ICR < MCR\",\"params\":{\"_amount\":\"the value of the minting\",\"_newNextTrove\":\"is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\",\"_recipient\":\"is the address to which the newly minted tokens will be transferred\"}},\"collateral()\":{\"details\":\"this function will return the actual collateral (balance of the collateral token) including any liquidation rewards from community liquidation\"},\"collateralValue()\":{\"details\":\"the value of the collateral * the current price as returned by the price feed contract for the collateral token\"},\"collateralization()\":{\"details\":\"the Individual Collateralisation Ratio (ICR) of the trove\"},\"debt()\":{\"details\":\"this function will return the actual debt including any liquidation liabilities from community liquidation\"},\"decreaseCollateral(address,uint256,address)\":{\"details\":\"send some or all of the balance of the trove to an arbitrary address. Only the owner of the trove can do this as long as the debt is Zero, the transfer is performed without further checks. once the debt is not zero, the trove position in the trove list is changed to keep the list ordered by collateralisation ratio\",\"params\":{\"_amount\":\"amount of collateral\",\"_newNextTrove\":\"hint for next trove after reorder\",\"_recipient\":\"the address which will receive the tokens\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseCollateral(uint256,address)\":{\"details\":\"there are two options to increase the collateral: 1. transfer the tokens to the trove and call increaseCollateral with amount = 0 2. grant the trove permission to transfer from your account and call increaseCollateral with amount > 0\",\"params\":{\"_amount\":\"a positive amount to transfer from the sender's account or zero\",\"_newNextTrove\":\"once the trove is better collateralised, its position in the list will change, the caller should indicate the new position in order to reduce gas consumption\"}},\"liquidate()\":{\"details\":\"is called to liquidate the trove, if ICR < MCR then all the collateral is sent to the liquidation pool and the debt is forgiven the msg.sender is allowed to transfer the liquidation reserve out of the trove\"},\"mcr()\":{\"details\":\"the Minimum Collateralisation Ratio for this trove as set in the Token to Price Feed contract.\"},\"netDebt()\":{\"details\":\"the net debt is the debt minus the liquidation reserve\"},\"redeem(address,address)\":{\"details\":\"is called to redeem StableCoin for token, called by factory when MCR > ICR, amount of StableCoin is taken from balance and must be <= netDebt. uses priceFeed to calculate collateral amount. returns amount of StableCoin used and collateral recieved\",\"params\":{\"_newNextTrove\":\"hint for next trove after reorder, if it's not full redemption\",\"_recipient\":\"the address which recieves redeemed token\"}},\"removeOwner(address)\":{\"details\":\"add an address to the list of owners\",\"params\":{\"_ownerToRemove\":\"the address of the new owner\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"repay(uint256,address)\":{\"details\":\"repay a portion of the debt by either sending some stable coins to the trove or allowing the trove to take tokens out of your balance\",\"params\":{\"_amount\":\"the amount of stable coins to reduce the debt with\",\"_newNextTrove\":\"is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setArbitrageParticipation(bool)\":{\"details\":\"configuration function to enable or disable collateral participation in ArbitragePool\",\"params\":{\"_state\":\"true/false to turn the state on/off\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"transfers user's trove ownership after revoking other roles from other addresses\",\"params\":{\"_newOwner\":\"the address of the new owner\"}},\"transferToken(address,address)\":{\"details\":\"security function to make sure that if tokens are sent to the trove by mistake, they're not lost. It will always send the entire balance This function can not be used to transfer the collateral token\",\"params\":{\"_recipient\":\"the address the transfer should go to\",\"_token\":\"the ERC20 to transfer\"}},\"unclaimedArbitrageReward()\":{\"details\":\"the reward in the liquidation pool which has not been claimed yet\"},\"unclaimedCollateralRewardAndDebt()\":{\"details\":\"the reward in the liquidation pool which has not been claimed yet\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/trove.sol\":\"Trove\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/interfaces/IArbitragePool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IArbitragePool is IOwnable {\\n  function collateralToAPToken(address) external returns (IMintableToken);\\n\\n  function getAPtokenPrice(address _collateralToken) external view returns (uint256);\\n\\n  function deposit(address _collateralToken, uint256 _amount) external;\\n\\n  function withdraw(address _collateralToken, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x87507351dd96378359f90ed978cf5310efdd039027f98b0cdd0d3ec97d829626\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFeeRecipient {\\n  function baseRate() external view returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view returns (uint256);\\n\\n  /**\\n     @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n     fees from the msg.sender\\n     @param _amount the amount in Wei of fees to transfer\\n     */\\n  function takeFees(uint256 _amount) external returns (bool);\\n\\n  function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x63f8b8fb3c45189659e28d534cadcf7226f06feb6f51b6211b88ed66020f3d57\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface ILiquidationPool {\\n  function collateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liqTokenRate() external view returns (uint256);\\n\\n  function claimCollateralAndDebt(uint256 _unclaimedCollateral, uint256 _unclaimedDebt) external;\\n\\n  function approveTrove(address _trove) external;\\n\\n  function unapproveTrove(address _trove) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x7e7c6bfd1345b762f1373273b6fc007cbda9b1c16e8466bf98110ad59f83906f\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRouter {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] memory path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    address token0,\\n    address token1\\n  ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x40829a7cac80293da8bed7237bd94dd0342aeee2fe801366137ff632952aff96\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IStabilityPoolBase {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function totalDeposit() external view returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function redeemReward() external;\\n\\n  function liquidate() external;\\n\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external;\\n\\n  function setBONQAmountForRewards() external;\\n\\n  function getDepositorBONQGain(address _depositor) external view returns (uint256);\\n\\n  function getWithdrawableDeposit(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf604d75783438cc84d31e72e6becbf359d4233e1d57bacf399767563507750ba\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n  struct TokenInfo {\\n    address priceFeed;\\n    uint256 mcr;\\n    uint256 mrf; // Maximum Redemption Fee\\n  }\\n\\n  function tokenPriceFeed(address) external view returns (address);\\n\\n  function tokenPrice(address _token) external view returns (uint256);\\n\\n  function mcr(address _token) external view returns (uint256);\\n\\n  function mrf(address _token) external view returns (uint256);\\n\\n  function setTokenPriceFeed(\\n    address _token,\\n    address _priceFeed,\\n    uint256 _mcr,\\n    uint256 _maxRedemptionFeeBasisPoints\\n  ) external;\\n\\n  function emitPriceUpdate(\\n    address _token,\\n    uint256 _priceAverage,\\n    uint256 _pricePoint\\n  ) external;\\n\\n  event NewTokenPriceFeed(address _token, address _priceFeed, string _name, string _symbol, uint256 _mcr, uint256 _mrf);\\n  event PriceUpdate(address token, uint256 priceAverage, uint256 pricePoint);\\n}\\n\",\"keccak256\":\"0x1464b339e10e5bcdff774c69d9092696bc4e64c2a1fcbe66120fcdcd72d17a2d\",\"license\":\"MIT\"},\"contracts/interfaces/ITrove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITrove is IOwnable {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function token() external view returns (IERC20);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TOKEN_PRECISION() external view returns (uint256);\\n\\n  function mcr() external view returns (uint256);\\n\\n  function collateralization() external view returns (uint256);\\n\\n  function collateralValue() external view returns (uint256);\\n\\n  function collateral() external view returns (uint256);\\n\\n  function recordedCollateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function netDebt() external view returns (uint256);\\n\\n  //  function rewardRatioSnapshot() external view returns (uint256);\\n\\n  function initialize(\\n    //    address _factory,\\n    address _token,\\n    address _troveOwner\\n  ) external;\\n\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) external;\\n\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function repay(uint256 _amount, address _newNextTrove) external;\\n\\n  function redeem(address _recipient, address _newNextTrove)\\n    external\\n    returns (uint256 _stableAmount, uint256 _collateralRecieved);\\n\\n  function setArbitrageParticipation(bool _state) external;\\n}\\n\",\"keccak256\":\"0x29c912a3de6b59148fc901b0130d2026f5222674ba8f672ac489e4c49af09f8a\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITokenPriceFeed.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\nimport \\\"./IMintableTokenOwner.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\nimport \\\"./ILiquidationPool.sol\\\";\\nimport \\\"./IStabilityPoolBase.sol\\\";\\nimport \\\"./ITrove.sol\\\";\\n\\ninterface ITroveFactory {\\n  /* view */\\n  function lastTrove(address _trove) external view returns (address);\\n\\n  function firstTrove(address _trove) external view returns (address);\\n\\n  function nextTrove(address _token, address _trove) external view returns (address);\\n\\n  function prevTrove(address _token, address _trove) external view returns (address);\\n\\n  function containsTrove(address _token, address _trove) external view returns (bool);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function tokenOwner() external view returns (IMintableTokenOwner);\\n\\n  function tokenToPriceFeed() external view returns (ITokenPriceFeed);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function troveCount(address _token) external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function totalCollateral(address _token) external view returns (uint256);\\n\\n  function totalDebtForToken(address _token) external view returns (uint256);\\n\\n  function liquidationPool(address _token) external view returns (ILiquidationPool);\\n\\n  function stabilityPool() external view returns (IStabilityPoolBase);\\n\\n  function arbitragePool() external view returns (address);\\n\\n  function getRedemptionFeeRatio(address _trove) external view returns (uint256);\\n\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) external pure returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  /* state changes*/\\n  function createTrove(address _token) external returns (ITrove trove);\\n\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) external;\\n\\n  function removeTrove(address _token, address _trove) external;\\n\\n  function insertTrove(address _trove, address _newNextTrove) external;\\n\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) external;\\n\\n  function updateTotalDebt(uint256 _amount, bool _borrow) external;\\n\\n  function setStabilityPool(address _stabilityPool) external;\\n\\n  function setArbitragePool(address _arbitragePool) external;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external;\\n\\n  function increaseCollateralNative(address _trove, address _newNextTrove) external payable;\\n\\n  /* utils */\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) external;\\n\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external;\\n\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea02f3280364aeb657922582ccd3ac1e4e3a84f09695c62e1e4d19143a9667\",\"license\":\"MIT\"},\"contracts/trove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITroveFactory.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IArbitragePool.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./interfaces/IFeeRecipient.sol\\\";\\nimport \\\"./utils/BONQMath.sol\\\";\\n\\ncontract Trove is ITrove, Ownable, Initializable, AccessControlEnumerable, Constants {\\n  using BONQMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n  struct ArbitrageState {\\n    IArbitragePool arbitragePool;\\n    IMintableToken apToken;\\n    uint256 lastApPrice;\\n  }\\n\\n  ITroveFactory public immutable override factory;\\n  IERC20 public override token;\\n  // solhint-disable-next-line var-name-mixedcase\\n  uint256 public override TOKEN_PRECISION;\\n\\n  uint256 private _debt;\\n  uint256 public liquidationReserve;\\n  uint256 public override recordedCollateral;\\n  uint256 public liqTokenRateSnapshot;\\n  bool public arbitrageParticipation;\\n  ArbitrageState public arbitrageState;\\n\\n  event Liquidated(address trove, uint256 debt, uint256 collateral);\\n\\n  /**\\n   * @dev restrict the call to be from the factory contract\\n   */\\n  modifier onlyFactory() {\\n    require(msg.sender == address(factory), \\\"1210a only callable from factory\\\");\\n    _;\\n  }\\n\\n  modifier onlyTroveOwner() {\\n    require(hasRole(OWNER_ROLE, msg.sender), \\\"cfa3b address is missing OWNER_ROLE\\\");\\n    _;\\n  }\\n\\n  modifier whenFactoryNotPaused() {\\n    require(!Pausable(address(factory)).paused(), \\\"cfa4b Trove Factory is paused\\\");\\n    _;\\n  }\\n\\n  constructor(address _factory) {\\n    factory = ITroveFactory(_factory);\\n  }\\n\\n  function initialize(address _token, address _troveOwner) public override initializer {\\n    //    require(_factory != address(0x0), \\\"41fe68 _factory must not be address 0x0\\\");\\n    require(_token != address(0x0), \\\"41fe68 _token must not be address 0x0\\\");\\n    require(_troveOwner != address(0x0), \\\"41fe68 _troveOwner must not be address 0x0\\\");\\n    //    factory = ITroveFactory(_factory);\\n    _transferOwnership(_troveOwner);\\n    _initializeMainOwners(_troveOwner, address(factory));\\n    token = IERC20(_token);\\n    TOKEN_PRECISION = 10**(IERC20Metadata(_token).decimals());\\n    liqTokenRateSnapshot = factory.liquidationPool(_token).liqTokenRate();\\n    // allow the fee recipient contract to transfer as many tokens as it wants from the trove\\n    factory.stableCoin().approve(address(factory.feeRecipient()), MAX_INT);\\n  }\\n\\n  function owner() public view override(Ownable, IOwnable) returns (address) {\\n    return Ownable.owner();\\n  }\\n\\n  /**\\n   * @dev the Minimum Collateralisation Ratio for this trove as set in the Token to Price Feed contract.\\n   */\\n  function mcr() public view override returns (uint256) {\\n    return factory.tokenToPriceFeed().mcr(address(token));\\n  }\\n\\n  /**\\n   * @dev the reward in the liquidation pool which has not been claimed yet\\n   */\\n  function unclaimedArbitrageReward() public view returns (uint256) {\\n    uint256 apBalance = arbitrageState.apToken.balanceOf(address(this));\\n    uint256 newApPrice = arbitrageState.arbitragePool.getAPtokenPrice(address(token));\\n    uint256 priceChange = newApPrice - arbitrageState.lastApPrice;\\n    return (apBalance * priceChange) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev the reward in the liquidation pool which has not been claimed yet\\n   */\\n  function unclaimedCollateralRewardAndDebt() public view returns (uint256, uint256) {\\n    ILiquidationPool pool = factory.liquidationPool(address(token));\\n    uint256 currentLiqTokenRate = pool.liqTokenRate();\\n    return _unclaimedCollateralRewardAndDebt(pool, currentLiqTokenRate);\\n  }\\n\\n  /**\\n   * @dev this function will return the actual collateral (balance of the collateral token) including any liquidation rewards from community liquidation\\n   */\\n  function collateral() public view override returns (uint256) {\\n    (uint256 unclaimedCollateral, ) = unclaimedCollateralRewardAndDebt();\\n    uint256 baseValue = token.balanceOf(address(this)) + unclaimedCollateral;\\n    if (arbitrageParticipation) {\\n      uint256 apBalance = arbitrageState.apToken.balanceOf(address(this));\\n      uint256 newApPrice = arbitrageState.arbitragePool.getAPtokenPrice(address(token));\\n      return baseValue + (apBalance * newApPrice) / DECIMAL_PRECISION;\\n    }\\n    return baseValue;\\n  }\\n\\n  /**\\n   * @dev this function will return the actual debt including any liquidation liabilities from community liquidation\\n   */\\n  function debt() public view override returns (uint256) {\\n    (, uint256 unclaimedDebt) = unclaimedCollateralRewardAndDebt();\\n    return _debt + unclaimedDebt;\\n  }\\n\\n  /**\\n   * @dev the net debt is the debt minus the liquidation reserve\\n   */\\n  function netDebt() public view override returns (uint256) {\\n    return debt() - liquidationReserve;\\n  }\\n\\n  function normalisedDecimals(uint256 tokenAmount) private view returns (uint256) {\\n    return (tokenAmount * DECIMAL_PRECISION) / TOKEN_PRECISION;\\n  }\\n\\n  /**\\n   * @dev the value of the collateral * the current price as returned by the price feed contract for the collateral token\\n   */\\n  function collateralValue() public view override returns (uint256) {\\n    return\\n      (normalisedDecimals(collateral()) * factory.tokenToPriceFeed().tokenPrice(address(token))) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev the Individual Collateralisation Ratio (ICR) of the trove\\n   */\\n  function collateralization() public view override returns (uint256) {\\n    uint256 troveDebt = debt();\\n    if (troveDebt > 0) {\\n      return (DECIMAL_PRECISION * collateralValue()) / troveDebt;\\n    } else {\\n      return MAX_INT;\\n    }\\n  }\\n\\n  /**\\n   * @dev the Individual Collateralisation Ratio (ICR) of the trove. this private function can be used when it is certain\\n   * that the _debt state variable has been updated correctly beforehand\\n   */\\n  function _collateralization() private view returns (uint256) {\\n    if (_debt > 0) {\\n      // the token price is multiplied by DECIMAL_PRECISION\\n      return (normalisedDecimals(recordedCollateral) * factory.tokenToPriceFeed().tokenPrice(address(token))) / _debt;\\n    } else {\\n      return MAX_INT;\\n    }\\n  }\\n\\n  /**\\n   * @dev transfers user's trove ownership after revoking other roles from other addresses\\n   * @param _newOwner the address of the new owner\\n   */\\n  function transferOwnership(address _newOwner) public override(Ownable, IOwnable) {\\n    Ownable.transferOwnership(_newOwner);\\n    for (uint256 i = getRoleMemberCount(OWNER_ROLE); i > 0; i--) {\\n      _revokeRole(OWNER_ROLE, getRoleMember(OWNER_ROLE, i - 1));\\n    }\\n    _initializeMainOwners(_newOwner, address(factory));\\n  }\\n\\n  /**\\n   * @dev add an address to the list of owners\\n   * @param _newOwner the address of the new owner\\n   */\\n  function addOwner(address _newOwner) public onlyTroveOwner {\\n    _grantRole(OWNER_ROLE, _newOwner);\\n  }\\n\\n  /**\\n   * @dev add an address to the list of owners\\n   * @param _ownerToRemove the address of the new owner\\n   */\\n  function removeOwner(address _ownerToRemove) public onlyTroveOwner {\\n    require(owner() != _ownerToRemove, \\\"604e3 do not remove main owner\\\");\\n    _revokeRole(OWNER_ROLE, _ownerToRemove);\\n  }\\n\\n  /**\\n   * @dev used to set the OWNER_ROLE for _troveOwner and _factory\\n   * @param _troveOwner the address of the new owner\\n   * @param _factory the address of the factory\\n   */\\n  function _initializeMainOwners(address _troveOwner, address _factory) private {\\n    _grantRole(OWNER_ROLE, _troveOwner);\\n    _grantRole(OWNER_ROLE, _factory);\\n  }\\n\\n  /**\\n   * @dev insert the trove in the factory contract in the right spot of the list of troves with the same token\\n   * @param _newNextTrove is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\\n   */\\n  function insertTrove(address _newNextTrove) private {\\n    // insertTrove is only called after updateCollateral has been invoked and the _debt variable has been updated\\n    require(_collateralization() >= mcr(), \\\"41670 TCR must be > MCR\\\");\\n    // only call insertTrove if there are more than one troves in the list\\n    address tokenAddress = address(token);\\n    if (factory.troveCount(tokenAddress) > 1) {\\n      factory.insertTrove(tokenAddress, _newNextTrove);\\n    }\\n  }\\n\\n  /**\\n   * @dev mint some stable coins and pay the issuance fee. The transaction will fail if the resulting ICR < MCR\\n   * @param _recipient is the address to which the newly minted tokens will be transferred\\n   * @param _amount the value of the minting\\n   * @param _newNextTrove is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\\n   */\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) public override onlyTroveOwner whenFactoryNotPaused {\\n    uint256 feeAmount = _borrow(_amount, _newNextTrove);\\n    IERC20(factory.stableCoin()).safeTransfer(_recipient, _amount);\\n    // the event is emitted by the factory so that we don't need to spy on each trove to get the system status in PGSQL\\n    factory.emitTroveDebtUpdate(address(token), _debt, _collateralization(), feeAmount);\\n  }\\n\\n  /**\\n   * @dev repay a portion of the debt by either sending some stable coins to the trove or allowing the trove to take tokens out of your balance\\n   * @param _amount the amount of stable coins to reduce the debt with\\n   * @param _newNextTrove is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\\n   */\\n  function repay(uint256 _amount, address _newNextTrove) public override {\\n    // updates collateral and debt state variables hence there is no need to call the debt() function later\\n    _updateCollateral();\\n    require(_debt > 0, \\\"e37b2 debt must be gt than 0\\\");\\n    IMintableToken stableCoin = factory.stableCoin();\\n    uint256 liquidationReserve_cache = liquidationReserve;\\n    if (_amount > 0) {\\n      _amount = _amount.min(_debt - liquidationReserve_cache);\\n      IERC20(stableCoin).safeTransferFrom(msg.sender, address(this), _amount);\\n    } else {\\n      _amount = _debt.min(stableCoin.balanceOf(address(this)) - liquidationReserve_cache);\\n      require(_amount > 0, \\\"e37b2 insufficient funds\\\");\\n    }\\n\\n    stableCoin.burn(_amount);\\n    _debt -= _amount;\\n    if (_debt == liquidationReserve_cache) {\\n      stableCoin.burn(liquidationReserve_cache);\\n      _amount += liquidationReserve_cache;\\n      _debt = 0;\\n      liquidationReserve = 0;\\n    }\\n    // reduce total debt (false == reduction)\\n    factory.updateTotalDebt(_amount, false);\\n    insertTrove(_newNextTrove);\\n\\n    factory.emitTroveDebtUpdate(address(token), _debt, _collateralization(), 0);\\n  }\\n\\n  /**\\n   * @dev if there have been liquidations since the last time this trove's state was updated, it should fetch the available rewards and debt\\n   */\\n  function getLiquidationRewards() internal {\\n    IERC20 token_cache = token;\\n    ILiquidationPool pool = factory.liquidationPool(address(token_cache));\\n    uint256 currentLiqTokenRate = pool.liqTokenRate();\\n    (uint256 unclaimedCollateral, uint256 unclaimedDebt) = _unclaimedCollateralRewardAndDebt(pool, currentLiqTokenRate);\\n    if (unclaimedCollateral > 0) {\\n      pool.claimCollateralAndDebt(unclaimedCollateral, unclaimedDebt);\\n      recordedCollateral += unclaimedCollateral;\\n      _debt += unclaimedDebt;\\n      liqTokenRateSnapshot = currentLiqTokenRate;\\n      if (arbitrageParticipation) {\\n        arbitrageState.arbitragePool.deposit(address(token_cache), unclaimedCollateral);\\n        arbitrageState.lastApPrice = arbitrageState.arbitragePool.getAPtokenPrice(address(token_cache));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev mint some stable coins and pay the issuance fee. The transaction will fail if the resulting ICR < MCR\\n   * @param _amount the value of the minting\\n   * @param _newNextTrove is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\\n   * @param _feeAmount it's the minting fee\\n   */\\n  function _borrow(uint256 _amount, address _newNextTrove) private returns (uint256 _feeAmount) {\\n    require(_amount >= DECIMAL_PRECISION, \\\"cb29c amount must be gt 1 token\\\");\\n    _updateCollateral();\\n    IFeeRecipient feeRecipient = factory.feeRecipient();\\n    _feeAmount = feeRecipient.getBorrowingFee(_amount);\\n    uint256 amountToMint = _amount + _feeAmount;\\n\\n    if (liquidationReserve == 0) {\\n      liquidationReserve = LIQUIDATION_RESERVE;\\n      amountToMint += LIQUIDATION_RESERVE;\\n    }\\n    _debt += amountToMint;\\n    insertTrove(_newNextTrove);\\n    factory.tokenOwner().mint(address(this), amountToMint);\\n    feeRecipient.takeFees(_feeAmount);\\n    // TODO: add debt to the parameters and call emitTroveDebtUpdate from updateTotalDebt to avoid two calls\\n    factory.updateTotalDebt(amountToMint, true);\\n  }\\n\\n  /**\\n   * @dev the reward in the liquidation pool which has not been claimed yet\\n   */\\n  function _unclaimedCollateralRewardAndDebt(ILiquidationPool _pool, uint256 _currentLiqTokenRate)\\n    private\\n    view\\n    returns (uint256, uint256)\\n  {\\n    uint256 _liqTokenRateSnapshot = liqTokenRateSnapshot;\\n    // we use the recordedCollateral because the collateralPerStakedToken is computed with the explicitly added collateral only\\n    uint256 unclaimedCollateral;\\n    uint256 unclaimedDebt;\\n\\n    if (_currentLiqTokenRate > _liqTokenRateSnapshot) {\\n      uint256 poolCollateral = _pool.collateral();\\n      if (poolCollateral > 0) {\\n        uint256 recordedCollateralCache = recordedCollateral;\\n\\n        unclaimedCollateral =\\n          ((recordedCollateralCache * _currentLiqTokenRate) / _liqTokenRateSnapshot) -\\n          recordedCollateralCache;\\n        unclaimedDebt = (_pool.debt() * unclaimedCollateral) / _pool.collateral();\\n      }\\n    }\\n    return (unclaimedCollateral, unclaimedDebt);\\n  }\\n\\n  /**\\n   * @dev update the state variables recordedCollateral and rewardRatioSnapshot and get all the collateral into the trove\\n   */\\n  function _updateCollateral() private returns (uint256) {\\n    getLiquidationRewards();\\n    uint256 startRecordedCollateral = recordedCollateral;\\n    // make sure all tokens sent to or transferred out of the contract are taken into account\\n    IERC20 token_cache = token;\\n    uint256 newRecordedCollateral;\\n    if (arbitrageParticipation) {\\n      uint256 tokenBalance = token_cache.balanceOf(address(this));\\n      if (tokenBalance > 0) arbitrageState.arbitragePool.deposit(address(token_cache), tokenBalance);\\n      newRecordedCollateral = arbitrageState.apToken.balanceOf(address(this));\\n      arbitrageState.lastApPrice = arbitrageState.arbitragePool.getAPtokenPrice(address(token_cache));\\n    } else {\\n      newRecordedCollateral = token_cache.balanceOf(address(this));\\n    }\\n    recordedCollateral = newRecordedCollateral;\\n    // getLiquidationRewards updates recordedCollateral\\n\\n    if (newRecordedCollateral != startRecordedCollateral) {\\n      factory.updateTotalCollateral(\\n        address(token_cache),\\n        newRecordedCollateral.max(startRecordedCollateral) - newRecordedCollateral.min(startRecordedCollateral),\\n        newRecordedCollateral >= startRecordedCollateral\\n      );\\n    }\\n    return newRecordedCollateral;\\n  }\\n\\n  /**\\n   * @dev there are two options to increase the collateral:\\n   * 1. transfer the tokens to the trove and call increaseCollateral with amount = 0\\n   * 2. grant the trove permission to transfer from your account and call increaseCollateral with amount > 0\\n   * @param _amount a positive amount to transfer from the sender's account or zero\\n   * @param _newNextTrove once the trove is better collateralised, its position in the list will change, the caller\\n   * should indicate the new position in order to reduce gas consumption\\n   */\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) public override {\\n    IERC20 token_cache = token;\\n    if (_amount > 0) {\\n      token_cache.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n    uint256 newRecordedCollateral = _updateCollateral();\\n\\n    if (_debt > 0) {\\n      insertTrove(_newNextTrove);\\n    }\\n    factory.emitTroveCollateralUpdate(address(token_cache), newRecordedCollateral, _collateralization());\\n  }\\n\\n  /**\\n   * @dev send some or all of the balance of the trove to an arbitrary address. Only the owner of the trove can do this\\n   * as long as the debt is Zero, the transfer is performed without further checks.\\n   * once the debt is not zero, the trove position in the trove list is changed to keep the list ordered by\\n   * collateralisation ratio\\n   * @param _recipient the address which will receive the tokens\\n   * @param _amount amount of collateral\\n   * @param _newNextTrove hint for next trove after reorder\\n   */\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) public override onlyTroveOwner {\\n    // make sure all the tokens are held by the trove before attempting to transfer\\n    getLiquidationRewards();\\n    IERC20 token_cache = token;\\n    if (arbitrageParticipation) {\\n      uint256 withdrawAmount = (_amount * TOKEN_PRECISION) /\\n        arbitrageState.arbitragePool.getAPtokenPrice(address(token_cache));\\n      arbitrageState.arbitragePool.withdraw(address(token_cache), withdrawAmount);\\n    }\\n    /* solhint-disable reentrancy */\\n    // recordedCollateral is updated by calling _updateCollateral() before borrowing, repaying or increasing collateral.\\n    // Calling this function in a reentrant way would not allow the attacker to get anything more\\n    token_cache.safeTransfer(_recipient, _amount);\\n    uint256 newRecordedCollateral = _updateCollateral();\\n    /* solhint-disable reentrancy */\\n\\n    if (_debt > 0) {\\n      // the ICR will be checked in insertTrove\\n      insertTrove(_newNextTrove);\\n    }\\n    factory.emitTroveCollateralUpdate(address(token_cache), newRecordedCollateral, _collateralization());\\n  }\\n\\n  /**\\n   * @dev is called to redeem StableCoin for token, called by factory when MCR > ICR,\\n   * amount of StableCoin is taken from balance and must be <= netDebt.\\n   * uses priceFeed to calculate collateral amount.\\n   * returns amount of StableCoin used and collateral recieved\\n   * @param _recipient the address which recieves redeemed token\\n   * @param _newNextTrove hint for next trove after reorder, if it's not full redemption\\n   */\\n  function redeem(address _recipient, address _newNextTrove)\\n    public\\n    override\\n    onlyFactory\\n    returns (uint256 _stableAmount, uint256 _collateralRecieved)\\n  {\\n    getLiquidationRewards();\\n    require(mcr() <= _collateralization(), \\\"e957f TCR must be gte MCR\\\");\\n    _stableAmount = factory.stableCoin().balanceOf(address(this)) - liquidationReserve;\\n    require(\\n      _newNextTrove == address(0) ? _stableAmount == netDebt() : _stableAmount <= netDebt(),\\n      \\\"e957f amount != debt and no hint\\\"\\n    );\\n\\n    IERC20 token_cache = token;\\n\\n    uint256 collateralToTransfer = (((_stableAmount * DECIMAL_PRECISION) /\\n      factory.tokenToPriceFeed().tokenPrice(address(token_cache))) * TOKEN_PRECISION) / DECIMAL_PRECISION;\\n\\n    if (arbitrageParticipation) {\\n      uint256 withdrawAmount = (collateralToTransfer * TOKEN_PRECISION) /\\n        arbitrageState.arbitragePool.getAPtokenPrice(address(token_cache));\\n      arbitrageState.arbitragePool.withdraw(address(token_cache), withdrawAmount);\\n    }\\n\\n    token_cache.safeTransfer(_recipient, collateralToTransfer);\\n    _collateralRecieved = collateralToTransfer;\\n\\n    repay(0, _newNextTrove); // repays from trove balance transfered before call\\n    return (_stableAmount, _collateralRecieved);\\n  }\\n\\n  /**\\n   * @dev is called to liquidate the trove, if ICR < MCR then all the collateral is sent to the liquidation pool and the debt is forgiven\\n   * the msg.sender is allowed to transfer the liquidation reserve out of the trove\\n   */\\n  function liquidate() public {\\n    _updateCollateral();\\n    require(_collateralization() < mcr(), \\\"454f4 CR must lt MCR\\\");\\n    IERC20 token_cache = token;\\n    IStabilityPoolBase stabilityPool = factory.stabilityPool();\\n    // allow the sender to retrieve the liquidationReserve\\n    factory.stableCoin().approve(msg.sender, liquidationReserve);\\n    if (arbitrageParticipation) {\\n      setArbitrageParticipation(false);\\n    }\\n    if (\\n      !Pausable(address(factory)).paused() &&\\n      (_collateralization() > DECIMAL_PRECISION) &&\\n      (stabilityPool.totalDeposit() >= debt())\\n    ) {\\n      token_cache.safeApprove(address(stabilityPool), recordedCollateral);\\n      // the collateral is transferred to the stabilityPool and is not used as collateral anymore\\n      factory.updateTotalCollateral(address(token_cache), recordedCollateral, false);\\n      factory.updateTotalDebt(_debt, false);\\n      stabilityPool.liquidate();\\n    } else {\\n      ILiquidationPool pool = factory.liquidationPool(address(token_cache));\\n      token_cache.safeApprove(address(pool), recordedCollateral);\\n      pool.liquidate();\\n      liqTokenRateSnapshot = pool.liqTokenRate();\\n    }\\n    _debt -= liquidationReserve;\\n    emit Liquidated(address(this), _debt, recordedCollateral);\\n    _debt = 0;\\n    liquidationReserve = 0;\\n    recordedCollateral = 0;\\n    // liquidated troves have no debt and no collateral and should be removed from the list of troves\\n    factory.removeTrove(address(token_cache), address(this));\\n  }\\n\\n  /**\\n   * @dev security function to make sure that if tokens are sent to the trove by mistake, they're not lost.\\n   * It will always send the entire balance\\n   * This function can not be used to transfer the collateral token\\n   * @param _token the ERC20 to transfer\\n   * @param _recipient the address the transfer should go to\\n   */\\n  function transferToken(address _token, address _recipient) public onlyTroveOwner {\\n    require(_token != address(token), \\\"7a810 can't transfer collateral\\\");\\n    require(_token != address(factory.stableCoin()), \\\"7a810 can't transfer stable coin\\\");\\n    uint256 _amount = IERC20(_token).balanceOf(address(this));\\n    IERC20(_token).safeTransfer(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev configuration function to enable or disable collateral participation in ArbitragePool\\n   * @param _state true/false to turn the state on/off\\n   */\\n  function setArbitrageParticipation(bool _state) public override onlyTroveOwner {\\n    if (arbitrageParticipation == _state) return;\\n    _updateCollateral();\\n    IERC20 tokenCache = token;\\n    arbitrageParticipation = _state;\\n    IArbitragePool _arbitragePool = IArbitragePool(factory.arbitragePool());\\n    if (_state) {\\n      tokenCache.safeApprove(address(_arbitragePool), MAX_INT);\\n      IMintableToken _apToken = _arbitragePool.collateralToAPToken(address(tokenCache));\\n      _apToken.approve(address(_arbitragePool), MAX_INT);\\n      arbitrageState.arbitragePool = _arbitragePool;\\n      arbitrageState.apToken = _apToken;\\n      uint256 tokenBalance = tokenCache.balanceOf(address(this));\\n      if (tokenBalance > 0) _arbitragePool.deposit(address(tokenCache), tokenBalance);\\n      arbitrageState.lastApPrice = _arbitragePool.getAPtokenPrice(address(tokenCache));\\n    } else {\\n      tokenCache.safeApprove(address(_arbitragePool), 0);\\n      uint256 arbitrageBalance = arbitrageState.apToken.balanceOf(address(this));\\n      if (arbitrageBalance > 0) arbitrageState.arbitragePool.withdraw(address(tokenCache), arbitrageBalance);\\n      delete arbitrageState;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf5d07794f66d22fa39ddccae63ecd3f58e92e1959f324493f8d07ca25293c14\",\"license\":\"MIT\"},\"contracts/utils/BONQMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary BONQMath {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\n  /// @dev return the smaller of two numbers\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @dev return the bigger of two numbers\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Multiply two decimal numbers and use normal rounding rules:\\n   *  -round product up if 19'th mantissa digit >= 5\\n   *  -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n    uint256 prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by function that represent time in units of minutes:\\n   * 1) IFeeRecipient.calcDecayedBaseRate\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   * @param _base number to exponentially increase\\n   * @param _minutes power in minutes passed\\n   */\\n  function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint256 y = DECIMAL_PRECISION;\\n    uint256 x = _base;\\n    uint256 n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n}\\n\",\"keccak256\":\"0x0a20a2bf799abe4603a95b343d4d701c0884a57fb61951354dcb7a06075fb0ab\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n  uint256 public constant BORROWING_RATE = PERCENT_05;\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n}\\n\",\"keccak256\":\"0x6a665a01a9a7f729c66450e6b996c07ac47009851acacc6fcb11eb974ef20b5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004ee338038062004ee38339810160408190526200003491620000a1565b6200003f3362000051565b6001600160a01b0316608052620000d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b457600080fd5b81516001600160a01b0381168114620000cc57600080fd5b9392505050565b608051614cf8620001eb60003960008181610525015281816107300152818161084f015281816108d3015281816109dd01528181610b3b01528181610bb801528181610c9801528181610e7301528181610f0d0152818161122f015281816114640152818161152c01528181611618015281816116a801528181611838015281816119fd01528181611adf01528181611b7f01528181611d6d015281816122fe0152818161259c01528181612619015281816126cf015281816127ca015281816128a201528181612a3801528181612ca30152818161301e01528181613372015281816134aa01528181613543015281816135810152818161385401528181613bc501528181613d090152613e710152614cf86000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c806391d1485411610167578063bba06f27116100ce578063d8dfeb4511610087578063d8dfeb451461057e578063d91d2f6014610586578063e58378bb1461058e578063eaca974b146105a3578063f2fde38b146105ac578063fc0c546a146105bf57600080fd5b8063bba06f27146104f8578063c45a015514610520578063c661689414610547578063c8c33edc14610550578063ca15c87314610558578063d547741f1461056b57600080fd5b8063abdc554111610120578063abdc5541146104c5578063acb70815146104cd578063aceb2d04146103bc578063ad09014d146104e0578063b85a8b20146104e8578063b8caedc4146104f057600080fd5b806391d1485414610480578063923c1eec14610493578063964080ce146104a257806397828c02146104b5578063a20baee614610493578063a217fddf146104bd57600080fd5b80633c7034a31161020b5780636c665a55116101c45780636c665a55146104115780637065cb4814610424578063715018a6146104375780637d4113c91461043f5780638da5cb5b146104485780639010d07c1461046d57600080fd5b80633c7034a314610383578063485cc9551461039657806348ae238f146103a9578063517ef1d7146103bc5780635b8462d9146103c4578063673a1ac21461040857600080fd5b8063249db00c1161025d578063249db00c1461033857806328a07025146103455780632f2ff15d1461034d578063315330291461036057806336568abe146103685780633746403c1461037b57600080fd5b806301ffc9a7146102a5578063098d3228146102cd5780630dca59c1146102e4578063173825d9146102ec57806323cb70f814610301578063248a9ca314610314575b600080fd5b6102b86102b33660046147c5565b6105d2565b60405190151581526020015b60405180910390f35b6102d660001981565b6040519081526020016102c4565b6102d66105fd565b6102ff6102fa366004614804565b61061f565b005b6102ff61030f366004614821565b6106e9565b6102d6610322366004614851565b6000908152600160208190526040909120015490565b6009546102b89060ff1681565b6102ff6107d4565b6102ff61035b366004614821565b610ed4565b6102d6610f00565b6102ff610376366004614821565b611023565b6102d66110a1565b6102ff61039136600461486a565b6110b8565b6102ff6103a43660046148ac565b6112d3565b6102ff6103b73660046148ac565b6117a4565b6102d6611999565b600a54600b54600c546103e2926001600160a01b0390811692169083565b604080516001600160a01b039485168152939092166020840152908201526060016102c4565b6102d660075481565b6102ff61041f36600461486a565b6119c7565b6102ff610432366004614804565b611bf2565b6102ff611c3e565b6102d660085481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102c4565b61045561047b3660046148da565b611ca4565b6102b861048e366004614821565b611cc3565b6102d6670de0b6b3a764000081565b6102ff6104b036600461490a565b611cee565b6102d6612169565b6102d6600081565b6102d661228a565b6102ff6104db366004614821565b61229f565b6102d661268c565b6102d66126b6565b6102d66126cb565b61050b6105063660046148ac565b6127bc565b604080519283526020830191909152016102c4565b6104557f000000000000000000000000000000000000000000000000000000000000000081565b6102d660045481565b61050b612c7a565b6102d6610566366004614851565b612d8a565b6102ff610579366004614821565b612da1565b6102d6612dc8565b6102d6612f73565b6102d6600080516020614ca383398151915281565b6102d660065481565b6102ff6105ba366004614804565b612fb4565b600354610455906001600160a01b031681565b60006001600160e01b03198216635a05180f60e01b14806105f757506105f782613042565b92915050565b600080610608612c7a565b91505080600554610619919061493d565b91505090565b610637600080516020614ca383398151915233611cc3565b61065c5760405162461bcd60e51b815260040161065390614950565b60405180910390fd5b806001600160a01b03166106786000546001600160a01b031690565b6001600160a01b0316036106ce5760405162461bcd60e51b815260206004820152601e60248201527f363034653320646f206e6f742072656d6f7665206d61696e206f776e657200006044820152606401610653565b6106e6600080516020614ca383398151915282613077565b50565b6003546001600160a01b03168215610710576107106001600160a01b038216333086613099565b600061071a61310a565b6005549091501561072e5761072e83613424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e04a3e908383610767613571565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201526064015b600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b5050505050505050565b6107dc61310a565b506107e56126cb565b6107ed613571565b106108315760405162461bcd60e51b81526020600482015260146024820152731a1a9a331a1021a91036bab9ba10363a1026a1a960611b6044820152606401610653565b6000600360009054906101000a90046001600160a01b0316905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663048c661d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190614993565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109539190614993565b6001600160a01b031663095ea7b3336006546040518363ffffffff1660e01b81526004016109829291906149b0565b6020604051808303816000875af11580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c591906149c9565b5060095460ff16156109db576109db6000611cee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d91906149c9565b158015610a785750670de0b6b3a7640000610a76613571565b115b8015610aec5750610a876105fd565b816001600160a01b031663f6153ccd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906149e6565b10155b15610c7657600754610b0a906001600160a01b038416908390613680565b600754604051636757634d60e01b81526001600160a01b0384811660048301526024820192909252600060448201527f000000000000000000000000000000000000000000000000000000000000000090911690636757634d90606401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b5050600554604051631bd6899160e31b81526004810191909152600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063deb44c889150604401600060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b50505050806001600160a01b03166328a070256040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b50505050610de1565b604051633770395560e21b81526001600160a01b0383811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ddc0e55490602401602060405180830381865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190614993565b9050610d2781600754856001600160a01b03166136809092919063ffffffff16565b806001600160a01b03166328a070256040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b50505050806001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906149e6565b600855505b60065460056000828254610df591906149ff565b90915550506005546007546040805130815260208101939093528201527f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f9060600160405180910390a1600060058190556006819055600755604051638225052760e01b81526001600160a01b0383811660048301523060248301527f000000000000000000000000000000000000000000000000000000000000000016906382250527906044015b600060405180830381600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050505050565b60008281526001602081905260409091200154610ef18133613784565b610efb83836137e8565b505050565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190614993565b6003546040516384ba3f6960e01b81526001600160a01b0391821660048201529116906384ba3f6990602401602060405180830381865afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906149e6565b61100a611005612dc8565b61380a565b6110149190614a12565b61101e9190614a29565b905090565b6001600160a01b03811633146110935760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610653565b61109d8282613077565b5050565b60006006546110ae6105fd565b61101e91906149ff565b6110d0600080516020614ca383398151915233611cc3565b6110ec5760405162461bcd60e51b815260040161065390614950565b6110f461382c565b6003546009546001600160a01b039091169060ff16156111fb57600a5460405163053342c960e11b81526001600160a01b0383811660048301526000921690630a66859290602401602060405180830381865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d91906149e6565b60045461118a9086614a12565b6111949190614a29565b600a5460405163f3fef3a360e01b81529192506001600160a01b03169063f3fef3a3906111c790859085906004016149b0565b600060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b50505050505b61120f6001600160a01b0382168585613abf565b600061121961310a565b6005549091501561122d5761122d83613424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e04a3e908383611266613571565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b1580156112b457600080fd5b505af11580156112c8573d6000803e3d6000fd5b505050505050505050565b600054600160a81b900460ff166112f757600054600160a01b900460ff16156112fb565b303b155b61135e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610653565b600054600160a81b900460ff16158015611388576000805461ffff60a01b191661010160a01b1790555b6001600160a01b0383166113ec5760405162461bcd60e51b815260206004820152602560248201527f343166653638205f746f6b656e206d757374206e6f7420626520616464726573604482015264073203078360dc1b6064820152608401610653565b6001600160a01b0382166114555760405162461bcd60e51b815260206004820152602a60248201527f343166653638205f74726f76654f776e6572206d757374206e6f7420626520616044820152690646472657373203078360b41b6064820152608401610653565b61145e82613ade565b611488827f0000000000000000000000000000000000000000000000000000000000000000613b2e565b600380546001600160a01b0319166001600160a01b0385169081179091556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156114e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115059190614a4b565b61151090600a614b52565b6004908155604051633770395560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163ddc0e5549161156e918791016001600160a01b0391909116815260200190565b602060405180830381865afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190614993565b6001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161091906149e6565b6008819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190614993565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190614993565b6000196040518363ffffffff1660e01b81526004016117489291906149b0565b6020604051808303816000875af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b91906149c9565b508015610efb576000805460ff60a81b19169055505050565b6117bc600080516020614ca383398151915233611cc3565b6117d85760405162461bcd60e51b815260040161065390614950565b6003546001600160a01b03908116908316036118365760405162461bcd60e51b815260206004820152601f60248201527f37613831302063616e2774207472616e7366657220636f6c6c61746572616c006044820152606401610653565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190614993565b6001600160a01b0316826001600160a01b0316036119185760405162461bcd60e51b815260206004820181905260248201527f37613831302063616e2774207472616e7366657220737461626c6520636f696e6044820152606401610653565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198391906149e6565b9050610efb6001600160a01b0384168383613abf565b600260646119b0670de0b6b3a76400006001614a12565b6119ba9190614a29565b6119c49190614a29565b81565b6119df600080516020614ca383398151915233611cc3565b6119fb5760405162461bcd60e51b815260040161065390614950565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d91906149c9565b15611aca5760405162461bcd60e51b815260206004820152601d60248201527f63666134622054726f766520466163746f7279206973207061757365640000006044820152606401610653565b6000611ad68383613b5e565b9050611b6f84847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5f9190614993565b6001600160a01b03169190613abf565b6003546005546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926379a71baf92911690611bb2613571565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201526064810184905260840161079c565b611c0a600080516020614ca383398151915233611cc3565b611c265760405162461bcd60e51b815260040161065390614950565b6106e6600080516020614ca3833981519152826137e8565b6000546001600160a01b03163314611c985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610653565b611ca26000613ade565b565b6000828152600260205260408120611cbc9083613edd565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611d06600080516020614ca383398151915233611cc3565b611d225760405162461bcd60e51b815260040161065390614950565b60095460ff161515811515146106e657611d3a61310a565b506003546009805460ff1916831515179055604080516307452ffb60e31b815290516001600160a01b03928316926000927f000000000000000000000000000000000000000000000000000000000000000090911691633a297fd8916004808201926020929091908290030181865afa158015611dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddf9190614993565b9050821561205357611dfd6001600160a01b03831682600019613680565b604051634b1c143560e01b81526001600160a01b03838116600483015260009190831690634b1c1435906024016020604051808303816000875af1158015611e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6d9190614993565b60405163095ea7b360e01b81529091506001600160a01b0382169063095ea7b390611ea0908590600019906004016149b0565b6020604051808303816000875af1158015611ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee391906149c9565b50600a80546001600160a01b038481166001600160a01b031992831617909255600b805484841692169190911790556040516370a0823160e01b81523060048201526000918516906370a0823190602401602060405180830381865afa158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7591906149e6565b90508015611fde576040516311f9fbc960e21b81526001600160a01b038416906347e7ef2490611fab90879085906004016149b0565b600060405180830381600087803b158015611fc557600080fd5b505af1158015611fd9573d6000803e3d6000fd5b505050505b60405163053342c960e11b81526001600160a01b038581166004830152841690630a66859290602401602060405180830381865afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204891906149e6565b600c5550610efb9050565b6120686001600160a01b038316826000613680565b600b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d591906149e6565b9050801561214257600a5460405163f3fef3a360e01b81526001600160a01b039091169063f3fef3a39061210f90869085906004016149b0565b600060405180830381600087803b15801561212957600080fd5b505af115801561213d573d6000803e3d6000fd5b505050505b50600a80546001600160a01b0319908116909155600b805490911690556000600c55505050565b600b546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121da91906149e6565b600a5460035460405163053342c960e11b81526001600160a01b039182166004820152929350600092911690630a66859290602401602060405180830381865afa15801561222c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225091906149e6565b600c5490915060009061226390836149ff565b9050670de0b6b3a76400006122788285614a12565b6122829190614a29565b935050505090565b60646119ba670de0b6b3a76400006005614a12565b6122a761310a565b506000600554116122fa5760405162461bcd60e51b815260206004820152601c60248201527f65333762322064656274206d757374206265206774207468616e2030000000006044820152606401610653565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e9190614993565b60065490915083156123be576123a28160055461239b91906149ff565b8590613ee9565b93506123b96001600160a01b038316333087613099565b612491565b6040516370a0823160e01b815230600482015261243f9082906001600160a01b038516906370a0823190602401602060405180830381865afa158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906149e6565b61243691906149ff565b60055490613ee9565b9350600084116124915760405162461bcd60e51b815260206004820152601860248201527f653337623220696e73756666696369656e742066756e647300000000000000006044820152606401610653565b604051630852cd8d60e31b8152600481018590526001600160a01b038316906342966c6890602401600060405180830381600087803b1580156124d357600080fd5b505af11580156124e7573d6000803e3d6000fd5b5050505083600560008282546124fd91906149ff565b909155505060055481900361257f57604051630852cd8d60e31b8152600481018290526001600160a01b038316906342966c6890602401600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050508084612572919061493d565b6000600581905560065593505b604051631bd6899160e31b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063deb44c8890604401600060405180830381600087803b1580156125e857600080fd5b505af11580156125fc573d6000803e3d6000fd5b5050505061260983613424565b6003546005546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926379a71baf9291169061264c613571565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201526000606482015260840161079c565b60646126a1670de0b6b3a76400006001614a12565b6126ab9190614a29565b6119c490600a614a12565b60646119ba670de0b6b3a76400006001614a12565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa15801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f9190614993565b60035460405163aa41911f60e01b81526001600160a01b03918216600482015291169063aa41911f90602401602060405180830381865afa158015612798573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e91906149e6565b600080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146128375760405162461bcd60e51b815260206004820181905260248201527f3132313061206f6e6c792063616c6c61626c652066726f6d20666163746f72796044820152606401610653565b61283f61382c565b612847613571565b61284f6126cb565b111561289d5760405162461bcd60e51b815260206004820152601960248201527f653935376620544352206d75737420626520677465204d4352000000000000006044820152606401610653565b6006547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129229190614993565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015612968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298c91906149e6565b61299691906149ff565b91506001600160a01b038316156129b7576129af6110a1565b8211156129c2565b6129bf6110a1565b82145b612a0e5760405162461bcd60e51b815260206004820181905260248201527f653935376620616d6f756e7420213d206465627420616e64206e6f2068696e746044820152606401610653565b6000600360009054906101000a90046001600160a01b031690506000670de0b6b3a76400006004547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab89190614993565b6040516384ba3f6960e01b81526001600160a01b03868116600483015291909116906384ba3f6990602401602060405180830381865afa158015612b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2491906149e6565b612b36670de0b6b3a764000088614a12565b612b409190614a29565b612b4a9190614a12565b612b549190614a29565b60095490915060ff1615612c4f57600a5460405163053342c960e11b81526001600160a01b0384811660048301526000921690630a66859290602401602060405180830381865afa158015612bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd191906149e6565b600454612bde9084614a12565b612be89190614a29565b600a5460405163f3fef3a360e01b81529192506001600160a01b03169063f3fef3a390612c1b90869085906004016149b0565b600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b50505050505b612c636001600160a01b0383168783613abf565b809250612c7160008661229f565b50509250929050565b600354604051633770395560e21b81526001600160a01b039182166004820152600091829182917f0000000000000000000000000000000000000000000000000000000000000000169063ddc0e55490602401602060405180830381865afa158015612cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190614993565b90506000816001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7491906149e6565b9050612d808282613eff565b9350935050509091565b60008181526002602052604081206105f79061408d565b60008281526001602081905260409091200154612dbe8133613784565b610efb8383613077565b600080612dd3612c7a565b506003546040516370a0823160e01b815230600482015291925060009183916001600160a01b0316906370a0823190602401602060405180830381865afa158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4691906149e6565b612e50919061493d565b60095490915060ff16156105f757600b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecb91906149e6565b600a5460035460405163053342c960e11b81526001600160a01b039182166004820152929350600092911690630a66859290602401602060405180830381865afa158015612f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4191906149e6565b9050670de0b6b3a7640000612f568284614a12565b612f609190614a29565b612f6a908461493d565b94505050505090565b600080612f7e6105fd565b90508015612fab5780612f8f610f00565b612fa190670de0b6b3a7640000614a12565b6106199190614a29565b60001991505090565b612fbd81614097565b6000612fd6600080516020614ca3833981519152612d8a565b90505b801561301757613005600080516020614ca38339815191526130008161047b6001866149ff565b613077565b8061300f81614b61565b915050612fd9565b506106e6817f0000000000000000000000000000000000000000000000000000000000000000613b2e565b60006001600160e01b03198216637965db0b60e01b14806105f757506301ffc9a760e01b6001600160e01b03198316146105f7565b613081828261415f565b6000828152600260205260409020610efb90826141c6565b6040516001600160a01b03808516602483015283166044820152606481018290526131049085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526141db565b50505050565b600061311461382c565b6007546003546009546001600160a01b039091169060009060ff16156132f1576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561317b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319f91906149e6565b9050801561320c57600a546040516311f9fbc960e21b81526001600160a01b03909116906347e7ef24906131d990869085906004016149b0565b600060405180830381600087803b1580156131f357600080fd5b505af1158015613207573d6000803e3d6000fd5b505050505b600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015613254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327891906149e6565b600a5460405163053342c960e11b81526001600160a01b038681166004830152929450911690630a66859290602401602060405180830381865afa1580156132c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e891906149e6565b600c555061335c565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335991906149e6565b90505b6007819055828114611cbc576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016636757634d836133a28487613ee9565b6133ac85886142ad565b6133b691906149ff565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152858410156044820152606401600060405180830381600087803b15801561340557600080fd5b505af1158015613419573d6000803e3d6000fd5b505050509392505050565b61342c6126cb565b613434613571565b10156134825760405162461bcd60e51b815260206004820152601760248201527f343136373020544352206d757374206265203e204d43520000000000000000006044820152606401610653565b6003546040516304b91f7360e51b81526001600160a01b0391821660048201819052916001917f000000000000000000000000000000000000000000000000000000000000000090911690639723ee6090602401602060405180830381865afa1580156134f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351791906149e6565b111561109d5760405162037da560e31b81526001600160a01b03828116600483015283811660248301527f00000000000000000000000000000000000000000000000000000000000000001690621bed2890604401610e9e565b60055460009015613679576005547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136019190614993565b6003546040516384ba3f6960e01b81526001600160a01b0391821660048201529116906384ba3f6990602401602060405180830381865afa15801561364a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366e91906149e6565b61100a60075461380a565b5060001990565b8015806136fa5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156136d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f891906149e6565b155b6137655760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610653565b610efb8363095ea7b360e01b84846040516024016130cd9291906149b0565b61378e8282611cc3565b61109d576137a6816001600160a01b031660146142bc565b6137b18360206142bc565b6040516020016137c2929190614b9c565b60408051601f198184030181529082905262461bcd60e51b825261065391600401614c11565b6137f28282614458565b6000828152600260205260409020610efb90826144c3565b600454600090613822670de0b6b3a764000084614a12565b6105f79190614a29565b600354604051633770395560e21b81526001600160a01b0391821660048201819052916000917f00000000000000000000000000000000000000000000000000000000000000009091169063ddc0e55490602401602060405180830381865afa15801561389d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c19190614993565b90506000816001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392791906149e6565b90506000806139368484613eff565b90925090508115613ab857604051631fc6e79760e31b815260048101839052602481018290526001600160a01b0385169063fe373cb890604401600060405180830381600087803b15801561398a57600080fd5b505af115801561399e573d6000803e3d6000fd5b5050505081600760008282546139b4919061493d565b9250508190555080600560008282546139cd919061493d565b9091555050600883905560095460ff1615613ab857600a546040516311f9fbc960e21b81526001600160a01b03909116906347e7ef2490613a1490889086906004016149b0565b600060405180830381600087803b158015613a2e57600080fd5b505af1158015613a42573d6000803e3d6000fd5b5050600a5460405163053342c960e11b81526001600160a01b0389811660048301529091169250630a6685929150602401602060405180830381865afa158015613a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab491906149e6565b600c555b5050505050565b610efb8363a9059cbb60e01b84846040516024016130cd9291906149b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613b46600080516020614ca3833981519152836137e8565b61109d600080516020614ca3833981519152826137e8565b6000670de0b6b3a7640000831015613bb85760405162461bcd60e51b815260206004820152601f60248201527f636232396320616d6f756e74206d757374206265206774203120746f6b656e006044820152606401610653565b613bc061310a565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c459190614993565b604051630631203b60e41b8152600481018690529091506001600160a01b0382169063631203b090602401602060405180830381865afa158015613c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb191906149e6565b91506000613cbf838661493d565b9050600654600003613ce657670de0b6b3a76400006006819055613ce3908261493d565b90505b8060056000828254613cf8919061493d565b90915550613d07905084613424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3e676106040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d899190614993565b6001600160a01b03166340c10f1930836040518363ffffffff1660e01b8152600401613db69291906149b0565b600060405180830381600087803b158015613dd057600080fd5b505af1158015613de4573d6000803e3d6000fd5b505060405163cbb9435960e01b8152600481018690526001600160a01b038516925063cbb9435991506024016020604051808303816000875af1158015613e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5391906149c9565b50604051631bd6899160e31b815260048101829052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063deb44c8890604401600060405180830381600087803b158015613ebd57600080fd5b505af1158015613ed1573d6000803e3d6000fd5b50505050505092915050565b6000611cbc83836144d8565b6000818310613ef85781611cbc565b5090919050565b6008546000908190818082861115614081576000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7591906149e6565b9050801561407f576007548085613f8c8a83614a12565b613f969190614a29565b613fa091906149ff565b9350886001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400491906149e6565b848a6001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015614043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406791906149e6565b6140719190614a12565b61407b9190614a29565b9250505b505b90969095509350505050565b60006105f7825490565b6000546001600160a01b031633146140f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610653565b6001600160a01b0381166141565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610653565b6106e681613ade565b6141698282611cc3565b1561109d5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611cbc836001600160a01b038416614502565b6000614230826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145f59092919063ffffffff16565b805190915015610efb578080602001905181019061424e91906149c9565b610efb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610653565b6000818311613ef85781611cbc565b606060006142cb836002614a12565b6142d690600261493d565b67ffffffffffffffff8111156142ee576142ee614c44565b6040519080825280601f01601f191660200182016040528015614318576020820181803683370190505b509050600360fc1b8160008151811061433357614333614c5a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061436257614362614c5a565b60200101906001600160f81b031916908160001a9053506000614386846002614a12565b61439190600161493d565b90505b6001811115614409576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106143c5576143c5614c5a565b1a60f81b8282815181106143db576143db614c5a565b60200101906001600160f81b031916908160001a90535060049490941c9361440281614b61565b9050614394565b508315611cbc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610653565b6144628282611cc3565b61109d5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000611cbc836001600160a01b03841661460c565b60008260000182815481106144ef576144ef614c5a565b9060005260206000200154905092915050565b600081815260018301602052604081205480156145eb5760006145266001836149ff565b855490915060009061453a906001906149ff565b905081811461459f57600086600001828154811061455a5761455a614c5a565b906000526020600020015490508087600001848154811061457d5761457d614c5a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806145b0576145b0614c70565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f7565b60009150506105f7565b6060614604848460008561465b565b949350505050565b6000818152600183016020526040812054614653575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f7565b5060006105f7565b6060824710156146bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610653565b6001600160a01b0385163b6147135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610653565b600080866001600160a01b0316858760405161472f9190614c86565b60006040518083038185875af1925050503d806000811461476c576040519150601f19603f3d011682016040523d82523d6000602084013e614771565b606091505b509150915061478182828661478c565b979650505050505050565b6060831561479b575081611cbc565b8251156147ab5782518084602001fd5b8160405162461bcd60e51b81526004016106539190614c11565b6000602082840312156147d757600080fd5b81356001600160e01b031981168114611cbc57600080fd5b6001600160a01b03811681146106e657600080fd5b60006020828403121561481657600080fd5b8135611cbc816147ef565b6000806040838503121561483457600080fd5b823591506020830135614846816147ef565b809150509250929050565b60006020828403121561486357600080fd5b5035919050565b60008060006060848603121561487f57600080fd5b833561488a816147ef565b92506020840135915060408401356148a1816147ef565b809150509250925092565b600080604083850312156148bf57600080fd5b82356148ca816147ef565b91506020830135614846816147ef565b600080604083850312156148ed57600080fd5b50508035926020909101359150565b80151581146106e657600080fd5b60006020828403121561491c57600080fd5b8135611cbc816148fc565b634e487b7160e01b600052601160045260246000fd5b808201808211156105f7576105f7614927565b60208082526023908201527f63666133622061646472657373206973206d697373696e67204f574e45525f526040820152624f4c4560e81b606082015260800190565b6000602082840312156149a557600080fd5b8151611cbc816147ef565b6001600160a01b03929092168252602082015260400190565b6000602082840312156149db57600080fd5b8151611cbc816148fc565b6000602082840312156149f857600080fd5b5051919050565b818103818111156105f7576105f7614927565b80820281158282048414176105f7576105f7614927565b600082614a4657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614a5d57600080fd5b815160ff81168114611cbc57600080fd5b600181815b80851115614aa9578160001904821115614a8f57614a8f614927565b80851615614a9c57918102915b93841c9390800290614a73565b509250929050565b600082614ac0575060016105f7565b81614acd575060006105f7565b8160018114614ae35760028114614aed57614b09565b60019150506105f7565b60ff841115614afe57614afe614927565b50506001821b6105f7565b5060208310610133831016604e8410600b8410161715614b2c575081810a6105f7565b614b368383614a6e565b8060001904821115614b4a57614b4a614927565b029392505050565b6000611cbc60ff841683614ab1565b600081614b7057614b70614927565b506000190190565b60005b83811015614b93578181015183820152602001614b7b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614bd4816017850160208801614b78565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614c05816028840160208801614b78565b01602801949350505050565b6020815260008251806020840152614c30816040850160208701614b78565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008251614c98818460208701614b78565b919091019291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea26469706673582212208afb254558869fccf2b34f096874594a00df8a7af884827070db7fd306f42c6064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c806391d1485411610167578063bba06f27116100ce578063d8dfeb4511610087578063d8dfeb451461057e578063d91d2f6014610586578063e58378bb1461058e578063eaca974b146105a3578063f2fde38b146105ac578063fc0c546a146105bf57600080fd5b8063bba06f27146104f8578063c45a015514610520578063c661689414610547578063c8c33edc14610550578063ca15c87314610558578063d547741f1461056b57600080fd5b8063abdc554111610120578063abdc5541146104c5578063acb70815146104cd578063aceb2d04146103bc578063ad09014d146104e0578063b85a8b20146104e8578063b8caedc4146104f057600080fd5b806391d1485414610480578063923c1eec14610493578063964080ce146104a257806397828c02146104b5578063a20baee614610493578063a217fddf146104bd57600080fd5b80633c7034a31161020b5780636c665a55116101c45780636c665a55146104115780637065cb4814610424578063715018a6146104375780637d4113c91461043f5780638da5cb5b146104485780639010d07c1461046d57600080fd5b80633c7034a314610383578063485cc9551461039657806348ae238f146103a9578063517ef1d7146103bc5780635b8462d9146103c4578063673a1ac21461040857600080fd5b8063249db00c1161025d578063249db00c1461033857806328a07025146103455780632f2ff15d1461034d578063315330291461036057806336568abe146103685780633746403c1461037b57600080fd5b806301ffc9a7146102a5578063098d3228146102cd5780630dca59c1146102e4578063173825d9146102ec57806323cb70f814610301578063248a9ca314610314575b600080fd5b6102b86102b33660046147c5565b6105d2565b60405190151581526020015b60405180910390f35b6102d660001981565b6040519081526020016102c4565b6102d66105fd565b6102ff6102fa366004614804565b61061f565b005b6102ff61030f366004614821565b6106e9565b6102d6610322366004614851565b6000908152600160208190526040909120015490565b6009546102b89060ff1681565b6102ff6107d4565b6102ff61035b366004614821565b610ed4565b6102d6610f00565b6102ff610376366004614821565b611023565b6102d66110a1565b6102ff61039136600461486a565b6110b8565b6102ff6103a43660046148ac565b6112d3565b6102ff6103b73660046148ac565b6117a4565b6102d6611999565b600a54600b54600c546103e2926001600160a01b0390811692169083565b604080516001600160a01b039485168152939092166020840152908201526060016102c4565b6102d660075481565b6102ff61041f36600461486a565b6119c7565b6102ff610432366004614804565b611bf2565b6102ff611c3e565b6102d660085481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102c4565b61045561047b3660046148da565b611ca4565b6102b861048e366004614821565b611cc3565b6102d6670de0b6b3a764000081565b6102ff6104b036600461490a565b611cee565b6102d6612169565b6102d6600081565b6102d661228a565b6102ff6104db366004614821565b61229f565b6102d661268c565b6102d66126b6565b6102d66126cb565b61050b6105063660046148ac565b6127bc565b604080519283526020830191909152016102c4565b6104557f000000000000000000000000000000000000000000000000000000000000000081565b6102d660045481565b61050b612c7a565b6102d6610566366004614851565b612d8a565b6102ff610579366004614821565b612da1565b6102d6612dc8565b6102d6612f73565b6102d6600080516020614ca383398151915281565b6102d660065481565b6102ff6105ba366004614804565b612fb4565b600354610455906001600160a01b031681565b60006001600160e01b03198216635a05180f60e01b14806105f757506105f782613042565b92915050565b600080610608612c7a565b91505080600554610619919061493d565b91505090565b610637600080516020614ca383398151915233611cc3565b61065c5760405162461bcd60e51b815260040161065390614950565b60405180910390fd5b806001600160a01b03166106786000546001600160a01b031690565b6001600160a01b0316036106ce5760405162461bcd60e51b815260206004820152601e60248201527f363034653320646f206e6f742072656d6f7665206d61696e206f776e657200006044820152606401610653565b6106e6600080516020614ca383398151915282613077565b50565b6003546001600160a01b03168215610710576107106001600160a01b038216333086613099565b600061071a61310a565b6005549091501561072e5761072e83613424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e04a3e908383610767613571565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201526064015b600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b5050505050505050565b6107dc61310a565b506107e56126cb565b6107ed613571565b106108315760405162461bcd60e51b81526020600482015260146024820152731a1a9a331a1021a91036bab9ba10363a1026a1a960611b6044820152606401610653565b6000600360009054906101000a90046001600160a01b0316905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663048c661d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190614993565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109539190614993565b6001600160a01b031663095ea7b3336006546040518363ffffffff1660e01b81526004016109829291906149b0565b6020604051808303816000875af11580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c591906149c9565b5060095460ff16156109db576109db6000611cee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d91906149c9565b158015610a785750670de0b6b3a7640000610a76613571565b115b8015610aec5750610a876105fd565b816001600160a01b031663f6153ccd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906149e6565b10155b15610c7657600754610b0a906001600160a01b038416908390613680565b600754604051636757634d60e01b81526001600160a01b0384811660048301526024820192909252600060448201527f000000000000000000000000000000000000000000000000000000000000000090911690636757634d90606401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b5050600554604051631bd6899160e31b81526004810191909152600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063deb44c889150604401600060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b50505050806001600160a01b03166328a070256040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b50505050610de1565b604051633770395560e21b81526001600160a01b0383811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ddc0e55490602401602060405180830381865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190614993565b9050610d2781600754856001600160a01b03166136809092919063ffffffff16565b806001600160a01b03166328a070256040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b50505050806001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906149e6565b600855505b60065460056000828254610df591906149ff565b90915550506005546007546040805130815260208101939093528201527f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f9060600160405180910390a1600060058190556006819055600755604051638225052760e01b81526001600160a01b0383811660048301523060248301527f000000000000000000000000000000000000000000000000000000000000000016906382250527906044015b600060405180830381600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050505050565b60008281526001602081905260409091200154610ef18133613784565b610efb83836137e8565b505050565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190614993565b6003546040516384ba3f6960e01b81526001600160a01b0391821660048201529116906384ba3f6990602401602060405180830381865afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906149e6565b61100a611005612dc8565b61380a565b6110149190614a12565b61101e9190614a29565b905090565b6001600160a01b03811633146110935760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610653565b61109d8282613077565b5050565b60006006546110ae6105fd565b61101e91906149ff565b6110d0600080516020614ca383398151915233611cc3565b6110ec5760405162461bcd60e51b815260040161065390614950565b6110f461382c565b6003546009546001600160a01b039091169060ff16156111fb57600a5460405163053342c960e11b81526001600160a01b0383811660048301526000921690630a66859290602401602060405180830381865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d91906149e6565b60045461118a9086614a12565b6111949190614a29565b600a5460405163f3fef3a360e01b81529192506001600160a01b03169063f3fef3a3906111c790859085906004016149b0565b600060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b50505050505b61120f6001600160a01b0382168585613abf565b600061121961310a565b6005549091501561122d5761122d83613424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e04a3e908383611266613571565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b1580156112b457600080fd5b505af11580156112c8573d6000803e3d6000fd5b505050505050505050565b600054600160a81b900460ff166112f757600054600160a01b900460ff16156112fb565b303b155b61135e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610653565b600054600160a81b900460ff16158015611388576000805461ffff60a01b191661010160a01b1790555b6001600160a01b0383166113ec5760405162461bcd60e51b815260206004820152602560248201527f343166653638205f746f6b656e206d757374206e6f7420626520616464726573604482015264073203078360dc1b6064820152608401610653565b6001600160a01b0382166114555760405162461bcd60e51b815260206004820152602a60248201527f343166653638205f74726f76654f776e6572206d757374206e6f7420626520616044820152690646472657373203078360b41b6064820152608401610653565b61145e82613ade565b611488827f0000000000000000000000000000000000000000000000000000000000000000613b2e565b600380546001600160a01b0319166001600160a01b0385169081179091556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156114e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115059190614a4b565b61151090600a614b52565b6004908155604051633770395560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163ddc0e5549161156e918791016001600160a01b0391909116815260200190565b602060405180830381865afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190614993565b6001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161091906149e6565b6008819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190614993565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190614993565b6000196040518363ffffffff1660e01b81526004016117489291906149b0565b6020604051808303816000875af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b91906149c9565b508015610efb576000805460ff60a81b19169055505050565b6117bc600080516020614ca383398151915233611cc3565b6117d85760405162461bcd60e51b815260040161065390614950565b6003546001600160a01b03908116908316036118365760405162461bcd60e51b815260206004820152601f60248201527f37613831302063616e2774207472616e7366657220636f6c6c61746572616c006044820152606401610653565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190614993565b6001600160a01b0316826001600160a01b0316036119185760405162461bcd60e51b815260206004820181905260248201527f37613831302063616e2774207472616e7366657220737461626c6520636f696e6044820152606401610653565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198391906149e6565b9050610efb6001600160a01b0384168383613abf565b600260646119b0670de0b6b3a76400006001614a12565b6119ba9190614a29565b6119c49190614a29565b81565b6119df600080516020614ca383398151915233611cc3565b6119fb5760405162461bcd60e51b815260040161065390614950565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d91906149c9565b15611aca5760405162461bcd60e51b815260206004820152601d60248201527f63666134622054726f766520466163746f7279206973207061757365640000006044820152606401610653565b6000611ad68383613b5e565b9050611b6f84847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5f9190614993565b6001600160a01b03169190613abf565b6003546005546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926379a71baf92911690611bb2613571565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201526064810184905260840161079c565b611c0a600080516020614ca383398151915233611cc3565b611c265760405162461bcd60e51b815260040161065390614950565b6106e6600080516020614ca3833981519152826137e8565b6000546001600160a01b03163314611c985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610653565b611ca26000613ade565b565b6000828152600260205260408120611cbc9083613edd565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611d06600080516020614ca383398151915233611cc3565b611d225760405162461bcd60e51b815260040161065390614950565b60095460ff161515811515146106e657611d3a61310a565b506003546009805460ff1916831515179055604080516307452ffb60e31b815290516001600160a01b03928316926000927f000000000000000000000000000000000000000000000000000000000000000090911691633a297fd8916004808201926020929091908290030181865afa158015611dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddf9190614993565b9050821561205357611dfd6001600160a01b03831682600019613680565b604051634b1c143560e01b81526001600160a01b03838116600483015260009190831690634b1c1435906024016020604051808303816000875af1158015611e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6d9190614993565b60405163095ea7b360e01b81529091506001600160a01b0382169063095ea7b390611ea0908590600019906004016149b0565b6020604051808303816000875af1158015611ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee391906149c9565b50600a80546001600160a01b038481166001600160a01b031992831617909255600b805484841692169190911790556040516370a0823160e01b81523060048201526000918516906370a0823190602401602060405180830381865afa158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7591906149e6565b90508015611fde576040516311f9fbc960e21b81526001600160a01b038416906347e7ef2490611fab90879085906004016149b0565b600060405180830381600087803b158015611fc557600080fd5b505af1158015611fd9573d6000803e3d6000fd5b505050505b60405163053342c960e11b81526001600160a01b038581166004830152841690630a66859290602401602060405180830381865afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204891906149e6565b600c5550610efb9050565b6120686001600160a01b038316826000613680565b600b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d591906149e6565b9050801561214257600a5460405163f3fef3a360e01b81526001600160a01b039091169063f3fef3a39061210f90869085906004016149b0565b600060405180830381600087803b15801561212957600080fd5b505af115801561213d573d6000803e3d6000fd5b505050505b50600a80546001600160a01b0319908116909155600b805490911690556000600c55505050565b600b546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121da91906149e6565b600a5460035460405163053342c960e11b81526001600160a01b039182166004820152929350600092911690630a66859290602401602060405180830381865afa15801561222c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225091906149e6565b600c5490915060009061226390836149ff565b9050670de0b6b3a76400006122788285614a12565b6122829190614a29565b935050505090565b60646119ba670de0b6b3a76400006005614a12565b6122a761310a565b506000600554116122fa5760405162461bcd60e51b815260206004820152601c60248201527f65333762322064656274206d757374206265206774207468616e2030000000006044820152606401610653565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e9190614993565b60065490915083156123be576123a28160055461239b91906149ff565b8590613ee9565b93506123b96001600160a01b038316333087613099565b612491565b6040516370a0823160e01b815230600482015261243f9082906001600160a01b038516906370a0823190602401602060405180830381865afa158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906149e6565b61243691906149ff565b60055490613ee9565b9350600084116124915760405162461bcd60e51b815260206004820152601860248201527f653337623220696e73756666696369656e742066756e647300000000000000006044820152606401610653565b604051630852cd8d60e31b8152600481018590526001600160a01b038316906342966c6890602401600060405180830381600087803b1580156124d357600080fd5b505af11580156124e7573d6000803e3d6000fd5b5050505083600560008282546124fd91906149ff565b909155505060055481900361257f57604051630852cd8d60e31b8152600481018290526001600160a01b038316906342966c6890602401600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050508084612572919061493d565b6000600581905560065593505b604051631bd6899160e31b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063deb44c8890604401600060405180830381600087803b1580156125e857600080fd5b505af11580156125fc573d6000803e3d6000fd5b5050505061260983613424565b6003546005546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926379a71baf9291169061264c613571565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201526000606482015260840161079c565b60646126a1670de0b6b3a76400006001614a12565b6126ab9190614a29565b6119c490600a614a12565b60646119ba670de0b6b3a76400006001614a12565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa15801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f9190614993565b60035460405163aa41911f60e01b81526001600160a01b03918216600482015291169063aa41911f90602401602060405180830381865afa158015612798573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e91906149e6565b600080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146128375760405162461bcd60e51b815260206004820181905260248201527f3132313061206f6e6c792063616c6c61626c652066726f6d20666163746f72796044820152606401610653565b61283f61382c565b612847613571565b61284f6126cb565b111561289d5760405162461bcd60e51b815260206004820152601960248201527f653935376620544352206d75737420626520677465204d4352000000000000006044820152606401610653565b6006547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663992642e56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129229190614993565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015612968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298c91906149e6565b61299691906149ff565b91506001600160a01b038316156129b7576129af6110a1565b8211156129c2565b6129bf6110a1565b82145b612a0e5760405162461bcd60e51b815260206004820181905260248201527f653935376620616d6f756e7420213d206465627420616e64206e6f2068696e746044820152606401610653565b6000600360009054906101000a90046001600160a01b031690506000670de0b6b3a76400006004547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab89190614993565b6040516384ba3f6960e01b81526001600160a01b03868116600483015291909116906384ba3f6990602401602060405180830381865afa158015612b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2491906149e6565b612b36670de0b6b3a764000088614a12565b612b409190614a29565b612b4a9190614a12565b612b549190614a29565b60095490915060ff1615612c4f57600a5460405163053342c960e11b81526001600160a01b0384811660048301526000921690630a66859290602401602060405180830381865afa158015612bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd191906149e6565b600454612bde9084614a12565b612be89190614a29565b600a5460405163f3fef3a360e01b81529192506001600160a01b03169063f3fef3a390612c1b90869085906004016149b0565b600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b50505050505b612c636001600160a01b0383168783613abf565b809250612c7160008661229f565b50509250929050565b600354604051633770395560e21b81526001600160a01b039182166004820152600091829182917f0000000000000000000000000000000000000000000000000000000000000000169063ddc0e55490602401602060405180830381865afa158015612cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190614993565b90506000816001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7491906149e6565b9050612d808282613eff565b9350935050509091565b60008181526002602052604081206105f79061408d565b60008281526001602081905260409091200154612dbe8133613784565b610efb8383613077565b600080612dd3612c7a565b506003546040516370a0823160e01b815230600482015291925060009183916001600160a01b0316906370a0823190602401602060405180830381865afa158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4691906149e6565b612e50919061493d565b60095490915060ff16156105f757600b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecb91906149e6565b600a5460035460405163053342c960e11b81526001600160a01b039182166004820152929350600092911690630a66859290602401602060405180830381865afa158015612f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4191906149e6565b9050670de0b6b3a7640000612f568284614a12565b612f609190614a29565b612f6a908461493d565b94505050505090565b600080612f7e6105fd565b90508015612fab5780612f8f610f00565b612fa190670de0b6b3a7640000614a12565b6106199190614a29565b60001991505090565b612fbd81614097565b6000612fd6600080516020614ca3833981519152612d8a565b90505b801561301757613005600080516020614ca38339815191526130008161047b6001866149ff565b613077565b8061300f81614b61565b915050612fd9565b506106e6817f0000000000000000000000000000000000000000000000000000000000000000613b2e565b60006001600160e01b03198216637965db0b60e01b14806105f757506301ffc9a760e01b6001600160e01b03198316146105f7565b613081828261415f565b6000828152600260205260409020610efb90826141c6565b6040516001600160a01b03808516602483015283166044820152606481018290526131049085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526141db565b50505050565b600061311461382c565b6007546003546009546001600160a01b039091169060009060ff16156132f1576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561317b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319f91906149e6565b9050801561320c57600a546040516311f9fbc960e21b81526001600160a01b03909116906347e7ef24906131d990869085906004016149b0565b600060405180830381600087803b1580156131f357600080fd5b505af1158015613207573d6000803e3d6000fd5b505050505b600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015613254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327891906149e6565b600a5460405163053342c960e11b81526001600160a01b038681166004830152929450911690630a66859290602401602060405180830381865afa1580156132c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e891906149e6565b600c555061335c565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335991906149e6565b90505b6007819055828114611cbc576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016636757634d836133a28487613ee9565b6133ac85886142ad565b6133b691906149ff565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152858410156044820152606401600060405180830381600087803b15801561340557600080fd5b505af1158015613419573d6000803e3d6000fd5b505050509392505050565b61342c6126cb565b613434613571565b10156134825760405162461bcd60e51b815260206004820152601760248201527f343136373020544352206d757374206265203e204d43520000000000000000006044820152606401610653565b6003546040516304b91f7360e51b81526001600160a01b0391821660048201819052916001917f000000000000000000000000000000000000000000000000000000000000000090911690639723ee6090602401602060405180830381865afa1580156134f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351791906149e6565b111561109d5760405162037da560e31b81526001600160a01b03828116600483015283811660248301527f00000000000000000000000000000000000000000000000000000000000000001690621bed2890604401610e9e565b60055460009015613679576005547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663938573956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136019190614993565b6003546040516384ba3f6960e01b81526001600160a01b0391821660048201529116906384ba3f6990602401602060405180830381865afa15801561364a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366e91906149e6565b61100a60075461380a565b5060001990565b8015806136fa5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156136d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f891906149e6565b155b6137655760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610653565b610efb8363095ea7b360e01b84846040516024016130cd9291906149b0565b61378e8282611cc3565b61109d576137a6816001600160a01b031660146142bc565b6137b18360206142bc565b6040516020016137c2929190614b9c565b60408051601f198184030181529082905262461bcd60e51b825261065391600401614c11565b6137f28282614458565b6000828152600260205260409020610efb90826144c3565b600454600090613822670de0b6b3a764000084614a12565b6105f79190614a29565b600354604051633770395560e21b81526001600160a01b0391821660048201819052916000917f00000000000000000000000000000000000000000000000000000000000000009091169063ddc0e55490602401602060405180830381865afa15801561389d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c19190614993565b90506000816001600160a01b03166366501ae56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392791906149e6565b90506000806139368484613eff565b90925090508115613ab857604051631fc6e79760e31b815260048101839052602481018290526001600160a01b0385169063fe373cb890604401600060405180830381600087803b15801561398a57600080fd5b505af115801561399e573d6000803e3d6000fd5b5050505081600760008282546139b4919061493d565b9250508190555080600560008282546139cd919061493d565b9091555050600883905560095460ff1615613ab857600a546040516311f9fbc960e21b81526001600160a01b03909116906347e7ef2490613a1490889086906004016149b0565b600060405180830381600087803b158015613a2e57600080fd5b505af1158015613a42573d6000803e3d6000fd5b5050600a5460405163053342c960e11b81526001600160a01b0389811660048301529091169250630a6685929150602401602060405180830381865afa158015613a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab491906149e6565b600c555b5050505050565b610efb8363a9059cbb60e01b84846040516024016130cd9291906149b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613b46600080516020614ca3833981519152836137e8565b61109d600080516020614ca3833981519152826137e8565b6000670de0b6b3a7640000831015613bb85760405162461bcd60e51b815260206004820152601f60248201527f636232396320616d6f756e74206d757374206265206774203120746f6b656e006044820152606401610653565b613bc061310a565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c459190614993565b604051630631203b60e41b8152600481018690529091506001600160a01b0382169063631203b090602401602060405180830381865afa158015613c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb191906149e6565b91506000613cbf838661493d565b9050600654600003613ce657670de0b6b3a76400006006819055613ce3908261493d565b90505b8060056000828254613cf8919061493d565b90915550613d07905084613424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3e676106040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d899190614993565b6001600160a01b03166340c10f1930836040518363ffffffff1660e01b8152600401613db69291906149b0565b600060405180830381600087803b158015613dd057600080fd5b505af1158015613de4573d6000803e3d6000fd5b505060405163cbb9435960e01b8152600481018690526001600160a01b038516925063cbb9435991506024016020604051808303816000875af1158015613e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5391906149c9565b50604051631bd6899160e31b815260048101829052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063deb44c8890604401600060405180830381600087803b158015613ebd57600080fd5b505af1158015613ed1573d6000803e3d6000fd5b50505050505092915050565b6000611cbc83836144d8565b6000818310613ef85781611cbc565b5090919050565b6008546000908190818082861115614081576000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7591906149e6565b9050801561407f576007548085613f8c8a83614a12565b613f969190614a29565b613fa091906149ff565b9350886001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400491906149e6565b848a6001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015614043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406791906149e6565b6140719190614a12565b61407b9190614a29565b9250505b505b90969095509350505050565b60006105f7825490565b6000546001600160a01b031633146140f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610653565b6001600160a01b0381166141565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610653565b6106e681613ade565b6141698282611cc3565b1561109d5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611cbc836001600160a01b038416614502565b6000614230826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145f59092919063ffffffff16565b805190915015610efb578080602001905181019061424e91906149c9565b610efb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610653565b6000818311613ef85781611cbc565b606060006142cb836002614a12565b6142d690600261493d565b67ffffffffffffffff8111156142ee576142ee614c44565b6040519080825280601f01601f191660200182016040528015614318576020820181803683370190505b509050600360fc1b8160008151811061433357614333614c5a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061436257614362614c5a565b60200101906001600160f81b031916908160001a9053506000614386846002614a12565b61439190600161493d565b90505b6001811115614409576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106143c5576143c5614c5a565b1a60f81b8282815181106143db576143db614c5a565b60200101906001600160f81b031916908160001a90535060049490941c9361440281614b61565b9050614394565b508315611cbc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610653565b6144628282611cc3565b61109d5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000611cbc836001600160a01b03841661460c565b60008260000182815481106144ef576144ef614c5a565b9060005260206000200154905092915050565b600081815260018301602052604081205480156145eb5760006145266001836149ff565b855490915060009061453a906001906149ff565b905081811461459f57600086600001828154811061455a5761455a614c5a565b906000526020600020015490508087600001848154811061457d5761457d614c5a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806145b0576145b0614c70565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f7565b60009150506105f7565b6060614604848460008561465b565b949350505050565b6000818152600183016020526040812054614653575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f7565b5060006105f7565b6060824710156146bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610653565b6001600160a01b0385163b6147135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610653565b600080866001600160a01b0316858760405161472f9190614c86565b60006040518083038185875af1925050503d806000811461476c576040519150601f19603f3d011682016040523d82523d6000602084013e614771565b606091505b509150915061478182828661478c565b979650505050505050565b6060831561479b575081611cbc565b8251156147ab5782518084602001fd5b8160405162461bcd60e51b81526004016106539190614c11565b6000602082840312156147d757600080fd5b81356001600160e01b031981168114611cbc57600080fd5b6001600160a01b03811681146106e657600080fd5b60006020828403121561481657600080fd5b8135611cbc816147ef565b6000806040838503121561483457600080fd5b823591506020830135614846816147ef565b809150509250929050565b60006020828403121561486357600080fd5b5035919050565b60008060006060848603121561487f57600080fd5b833561488a816147ef565b92506020840135915060408401356148a1816147ef565b809150509250925092565b600080604083850312156148bf57600080fd5b82356148ca816147ef565b91506020830135614846816147ef565b600080604083850312156148ed57600080fd5b50508035926020909101359150565b80151581146106e657600080fd5b60006020828403121561491c57600080fd5b8135611cbc816148fc565b634e487b7160e01b600052601160045260246000fd5b808201808211156105f7576105f7614927565b60208082526023908201527f63666133622061646472657373206973206d697373696e67204f574e45525f526040820152624f4c4560e81b606082015260800190565b6000602082840312156149a557600080fd5b8151611cbc816147ef565b6001600160a01b03929092168252602082015260400190565b6000602082840312156149db57600080fd5b8151611cbc816148fc565b6000602082840312156149f857600080fd5b5051919050565b818103818111156105f7576105f7614927565b80820281158282048414176105f7576105f7614927565b600082614a4657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614a5d57600080fd5b815160ff81168114611cbc57600080fd5b600181815b80851115614aa9578160001904821115614a8f57614a8f614927565b80851615614a9c57918102915b93841c9390800290614a73565b509250929050565b600082614ac0575060016105f7565b81614acd575060006105f7565b8160018114614ae35760028114614aed57614b09565b60019150506105f7565b60ff841115614afe57614afe614927565b50506001821b6105f7565b5060208310610133831016604e8410600b8410161715614b2c575081810a6105f7565b614b368383614a6e565b8060001904821115614b4a57614b4a614927565b029392505050565b6000611cbc60ff841683614ab1565b600081614b7057614b70614927565b506000190190565b60005b83811015614b93578181015183820152602001614b7b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614bd4816017850160208801614b78565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614c05816028840160208801614b78565b01602801949350505050565b6020815260008251806020840152614c30816040850160208701614b78565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008251614c98818460208701614b78565b919091019291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea26469706673582212208afb254558869fccf2b34f096874594a00df8a7af884827070db7fd306f42c6064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "details": "add an address to the list of owners",
        "params": {
          "_newOwner": "the address of the new owner"
        }
      },
      "borrow(address,uint256,address)": {
        "details": "mint some stable coins and pay the issuance fee. The transaction will fail if the resulting ICR < MCR",
        "params": {
          "_amount": "the value of the minting",
          "_newNextTrove": "is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions",
          "_recipient": "is the address to which the newly minted tokens will be transferred"
        }
      },
      "collateral()": {
        "details": "this function will return the actual collateral (balance of the collateral token) including any liquidation rewards from community liquidation"
      },
      "collateralValue()": {
        "details": "the value of the collateral * the current price as returned by the price feed contract for the collateral token"
      },
      "collateralization()": {
        "details": "the Individual Collateralisation Ratio (ICR) of the trove"
      },
      "debt()": {
        "details": "this function will return the actual debt including any liquidation liabilities from community liquidation"
      },
      "decreaseCollateral(address,uint256,address)": {
        "details": "send some or all of the balance of the trove to an arbitrary address. Only the owner of the trove can do this as long as the debt is Zero, the transfer is performed without further checks. once the debt is not zero, the trove position in the trove list is changed to keep the list ordered by collateralisation ratio",
        "params": {
          "_amount": "amount of collateral",
          "_newNextTrove": "hint for next trove after reorder",
          "_recipient": "the address which will receive the tokens"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseCollateral(uint256,address)": {
        "details": "there are two options to increase the collateral: 1. transfer the tokens to the trove and call increaseCollateral with amount = 0 2. grant the trove permission to transfer from your account and call increaseCollateral with amount > 0",
        "params": {
          "_amount": "a positive amount to transfer from the sender's account or zero",
          "_newNextTrove": "once the trove is better collateralised, its position in the list will change, the caller should indicate the new position in order to reduce gas consumption"
        }
      },
      "liquidate()": {
        "details": "is called to liquidate the trove, if ICR < MCR then all the collateral is sent to the liquidation pool and the debt is forgiven the msg.sender is allowed to transfer the liquidation reserve out of the trove"
      },
      "mcr()": {
        "details": "the Minimum Collateralisation Ratio for this trove as set in the Token to Price Feed contract."
      },
      "netDebt()": {
        "details": "the net debt is the debt minus the liquidation reserve"
      },
      "redeem(address,address)": {
        "details": "is called to redeem StableCoin for token, called by factory when MCR > ICR, amount of StableCoin is taken from balance and must be <= netDebt. uses priceFeed to calculate collateral amount. returns amount of StableCoin used and collateral recieved",
        "params": {
          "_newNextTrove": "hint for next trove after reorder, if it's not full redemption",
          "_recipient": "the address which recieves redeemed token"
        }
      },
      "removeOwner(address)": {
        "details": "add an address to the list of owners",
        "params": {
          "_ownerToRemove": "the address of the new owner"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "repay(uint256,address)": {
        "details": "repay a portion of the debt by either sending some stable coins to the trove or allowing the trove to take tokens out of your balance",
        "params": {
          "_amount": "the amount of stable coins to reduce the debt with",
          "_newNextTrove": "is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setArbitrageParticipation(bool)": {
        "details": "configuration function to enable or disable collateral participation in ArbitragePool",
        "params": {
          "_state": "true/false to turn the state on/off"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "transfers user's trove ownership after revoking other roles from other addresses",
        "params": {
          "_newOwner": "the address of the new owner"
        }
      },
      "transferToken(address,address)": {
        "details": "security function to make sure that if tokens are sent to the trove by mistake, they're not lost. It will always send the entire balance This function can not be used to transfer the collateral token",
        "params": {
          "_recipient": "the address the transfer should go to",
          "_token": "the ERC20 to transfer"
        }
      },
      "unclaimedArbitrageReward()": {
        "details": "the reward in the liquidation pool which has not been claimed yet"
      },
      "unclaimedCollateralRewardAndDebt()": {
        "details": "the reward in the liquidation pool which has not been claimed yet"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2054,
        "contract": "contracts/trove.sol:Trove",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2607,
        "contract": "contracts/trove.sol:Trove",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2610,
        "contract": "contracts/trove.sol:Trove",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1539,
        "contract": "contracts/trove.sol:Trove",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1534_storage)"
      },
      {
        "astId": 1842,
        "contract": "contracts/trove.sol:Trove",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4823_storage)"
      },
      {
        "astId": 17410,
        "contract": "contracts/trove.sol:Trove",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3472"
      },
      {
        "astId": 17413,
        "contract": "contracts/trove.sol:Trove",
        "label": "TOKEN_PRECISION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17415,
        "contract": "contracts/trove.sol:Trove",
        "label": "_debt",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 17417,
        "contract": "contracts/trove.sol:Trove",
        "label": "liquidationReserve",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 17420,
        "contract": "contracts/trove.sol:Trove",
        "label": "recordedCollateral",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 17422,
        "contract": "contracts/trove.sol:Trove",
        "label": "liqTokenRateSnapshot",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 17424,
        "contract": "contracts/trove.sol:Trove",
        "label": "arbitrageParticipation",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 17427,
        "contract": "contracts/trove.sol:Trove",
        "label": "arbitrageState",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(ArbitrageState)17402_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IArbitragePool)8758": {
        "encoding": "inplace",
        "label": "contract IArbitragePool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3472": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)8938": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4823_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4823_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1534_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1534_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4823_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4822,
            "contract": "contracts/trove.sol:Trove",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4522_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ArbitrageState)17402_storage": {
        "encoding": "inplace",
        "label": "struct Trove.ArbitrageState",
        "members": [
          {
            "astId": 17396,
            "contract": "contracts/trove.sol:Trove",
            "label": "arbitragePool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IArbitragePool)8758"
          },
          {
            "astId": 17399,
            "contract": "contracts/trove.sol:Trove",
            "label": "apToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMintableToken)8938"
          },
          {
            "astId": 17401,
            "contract": "contracts/trove.sol:Trove",
            "label": "lastApPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)1534_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1531,
            "contract": "contracts/trove.sol:Trove",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1533,
            "contract": "contracts/trove.sol:Trove",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4522_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4517,
            "contract": "contracts/trove.sol:Trove",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4521,
            "contract": "contracts/trove.sol:Trove",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}