{
  "address": "0xE1e46C14F9E400e928b0ead380B98a9309a2307B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonqToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "Arbitrage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        }
      ],
      "name": "BONQPerMinuteUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issuance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalBONQRewardsLeft",
          "type": "uint256"
        }
      ],
      "name": "BONQRewardIssue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "BONQRewardRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralPrice",
          "type": "uint256"
        }
      ],
      "name": "CollateralRewardRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDepositValue",
          "type": "uint256"
        }
      ],
      "name": "DepositSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentEpoch",
          "type": "uint128"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "G_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        }
      ],
      "name": "P_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "S_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentScale",
          "type": "uint128"
        }
      ],
      "name": "ScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        }
      ],
      "name": "TotalBONQRewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "TotalDepositUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint24[]",
          "name": "_fees",
          "type": "uint24[]"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "arbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonqPerMinute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonqToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralToLastErrorOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentScale",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "P",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "G",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochToScaleToTokenToSum",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "S_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ITroveFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getCollateralReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorBONQGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getWithdrawableDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBONQError",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStableCoinLossErrorOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestBONQRewardTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBONQAmountForRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bonqPerMinute",
          "type": "uint256"
        }
      ],
      "name": "setBONQPerMinute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBONQRewardsLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x888c61594b47a9eaf6f797525015c5f50ea675eac35e79b7b467a464c7231dc3",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0xE1e46C14F9E400e928b0ead380B98a9309a2307B",
    "transactionIndex": 41,
    "gasUsed": "4192671",
    "logsBloom": "0x
    "blockHash": "0xb81e1760bf201e04aa2871f4b4a02b7a75f802dddf56d5f350830e5588d3711a",
    "transactionHash": "0x888c61594b47a9eaf6f797525015c5f50ea675eac35e79b7b467a464c7231dc3",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 36568387,
        "transactionHash": "0x888c61594b47a9eaf6f797525015c5f50ea675eac35e79b7b467a464c7231dc3",
        "address": "0xE1e46C14F9E400e928b0ead380B98a9309a2307B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 103,
        "blockHash": "0xb81e1760bf201e04aa2871f4b4a02b7a75f802dddf56d5f350830e5588d3711a"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 36568387,
        "transactionHash": "0x888c61594b47a9eaf6f797525015c5f50ea675eac35e79b7b467a464c7231dc3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x000000000000000000000000b9ede6f94d192073d8eaf85f8db677133d483249"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002b4eb83e14bbb8a00000000000000000000000000000000000000000000000769a61df30df576670000000000000000000000000000000000000000000001f9c3a1588c05f0cae800000000000000000000000000000000000000000000000766f1326f2ca9badd0000000000000000000000000000000000000000000001f9c656440fe73c8672",
        "logIndex": 104,
        "blockHash": "0xb81e1760bf201e04aa2871f4b4a02b7a75f802dddf56d5f350830e5588d3711a"
      }
    ],
    "blockNumber": 36568387,
    "cumulativeGasUsed": "8632654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3bB7fFD08f46620beA3a9Ae7F096cF2b213768B3",
    "0x91efbe97e08d0ffc7d31381c032d05fad8e25aaa"
  ],
  "numDeployments": 1,
  "solcInputHash": "37c77ee3f4094be8523db51f4ca8f182",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonqToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"Arbitrage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"BONQPerMinuteUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalBONQRewardsLeft\",\"type\":\"uint256\"}],\"name\":\"BONQRewardIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BONQRewardRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralPrice\",\"type\":\"uint256\"}],\"name\":\"CollateralRewardRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDepositValue\",\"type\":\"uint256\"}],\"name\":\"DepositSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentEpoch\",\"type\":\"uint128\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"G_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"}],\"name\":\"P_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"S_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentScale\",\"type\":\"uint128\"}],\"name\":\"ScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"TotalBONQRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"TotalDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"_fees\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonqPerMinute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonqToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralToLastErrorOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochToScaleToTokenToSum\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"S_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ITroveFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getCollateralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorBONQGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getWithdrawableDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBONQError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStableCoinLossErrorOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBONQRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBONQAmountForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonqPerMinute\",\"type\":\"uint256\"}],\"name\":\"setBONQPerMinute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBONQRewardsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"arbitrage(uint256,address[],uint24[],uint256)\":{\"details\":\"use the DEX router to trigger a swap that starts and ends with the stable coin and yields more coins than itrequied as input. This function could be subject to a reentrant attack from a malicious token in the DEX\",\"params\":{\"_amountIn\":\"start amount\",\"_fees\":\"calldata[] fees array in correct order\",\"_path\":\"calldata[]\"}},\"deposit(uint256)\":{\"details\":\"to deposit StableCoin into StabilityPool this must be protected against a reentrant attack from the arbitrage\",\"params\":{\"_amount\":\"amount to deposit\"}},\"getCollateralReward(address,address)\":{\"details\":\"gets collateral reward of msg.sender\",\"params\":{\"_token\":\"collateral token address\"}},\"getDepositorBONQGain(address)\":{\"details\":\"gets BONQ reward of _depositor\",\"params\":{\"_depositor\":\"user address\"}},\"getWithdrawableDeposit(address)\":{\"details\":\"gets current deposit of msg.sender\"},\"liquidate()\":{\"details\":\"liquidates trove, must be called from that trovethis function does not provide an opportunity for a reentrancy attack even though it would make the arbitragefail because of the lowering of the stablecoin balance\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemReward()\":{\"details\":\"to withdraw collateral rewards earned after liquidationsthis function does not provide an opportunity for a reentrancy attack\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBONQAmountForRewards()\":{\"details\":\"sets total amount of BONQ to be rewarded (pays per minute until reaches the amount rewarded)\"},\"setBONQPerMinute(uint256)\":{\"details\":\"sets amount of BONQ per minute for rewards\"},\"setRouter(address)\":{\"details\":\"set the DEX router to be used for arbitrage functions\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"details\":\"to withdraw StableCoin that was not spent if this function is called in a reentrantway during arbitrage  itwould skew the token allocation and must be protected against\",\"params\":{\"_amount\":\"amount to withdraw\"}}},\"title\":\"is used to liquidate troves and reward depositors with collateral redeemed\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"liquidate()\":{\"notice\":\"must be called by the valid trove\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stability-pool-uniswap.sol\":\"StabilityPoolUniswap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x7554657b651d884f77e786ef65ea098bebbcfedda5ca06126cf7825d6121a368\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe14e576c8651a2409b41db02dd05638d0ceced067a4dbc2918f448e0cb2397e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc0367f1b6159357e7e84c65ce615e3e70d2b288473cbfd8e68ff8b0fa140dec5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb671f26ab94e1519cbd14bf10f094873a4d94fe92892666cf3e8846eecbb73fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFeeRecipient {\\n  function baseRate() external view returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view returns (uint256);\\n\\n  /**\\n     @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n     fees from the msg.sender\\n     @param _amount the amount in Wei of fees to transfer\\n     */\\n  function takeFees(uint256 _amount) external returns (bool);\\n\\n  function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x63f8b8fb3c45189659e28d534cadcf7226f06feb6f51b6211b88ed66020f3d57\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface ILiquidationPool {\\n  function collateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liqTokenRate() external view returns (uint256);\\n\\n  function claimCollateralAndDebt(uint256 _unclaimedCollateral, uint256 _unclaimedDebt) external;\\n\\n  function approveTrove(address _trove) external;\\n\\n  function unapproveTrove(address _trove) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x7e7c6bfd1345b762f1373273b6fc007cbda9b1c16e8466bf98110ad59f83906f\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRouter {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] memory path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    address token0,\\n    address token1\\n  ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x40829a7cac80293da8bed7237bd94dd0342aeee2fe801366137ff632952aff96\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IStabilityPoolBase {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function totalDeposit() external view returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function redeemReward() external;\\n\\n  function liquidate() external;\\n\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external;\\n\\n  function setBONQAmountForRewards() external;\\n\\n  function getDepositorBONQGain(address _depositor) external view returns (uint256);\\n\\n  function getWithdrawableDeposit(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf604d75783438cc84d31e72e6becbf359d4233e1d57bacf399767563507750ba\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IStabilityPoolBase.sol\\\";\\n\\ninterface IStabilityPoolUniswap is IStabilityPoolBase {\\n  function arbitrage(\\n    uint256 _amountIn,\\n    address[] calldata _path,\\n    uint24[] calldata _fees,\\n    uint256 expiry\\n  ) external;\\n\\n  function setRouter(address _router) external;\\n}\\n\",\"keccak256\":\"0x461314636ee51c380fdb0387ed3ce170afdd399de92d05975741b0f5cd059de7\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n  struct TokenInfo {\\n    address priceFeed;\\n    uint256 mcr;\\n    uint256 mrf; // Maximum Redemption Fee\\n  }\\n\\n  function tokenPriceFeed(address) external view returns (address);\\n\\n  function tokenPrice(address _token) external view returns (uint256);\\n\\n  function mcr(address _token) external view returns (uint256);\\n\\n  function mrf(address _token) external view returns (uint256);\\n\\n  function setTokenPriceFeed(\\n    address _token,\\n    address _priceFeed,\\n    uint256 _mcr,\\n    uint256 _maxRedemptionFeeBasisPoints\\n  ) external;\\n\\n  function emitPriceUpdate(\\n    address _token,\\n    uint256 _priceAverage,\\n    uint256 _pricePoint\\n  ) external;\\n\\n  event NewTokenPriceFeed(address _token, address _priceFeed, string _name, string _symbol, uint256 _mcr, uint256 _mrf);\\n  event PriceUpdate(address token, uint256 priceAverage, uint256 pricePoint);\\n}\\n\",\"keccak256\":\"0x1464b339e10e5bcdff774c69d9092696bc4e64c2a1fcbe66120fcdcd72d17a2d\",\"license\":\"MIT\"},\"contracts/interfaces/ITrove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITrove is IOwnable {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function token() external view returns (IERC20);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TOKEN_PRECISION() external view returns (uint256);\\n\\n  function mcr() external view returns (uint256);\\n\\n  function collateralization() external view returns (uint256);\\n\\n  function collateralValue() external view returns (uint256);\\n\\n  function collateral() external view returns (uint256);\\n\\n  function recordedCollateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function netDebt() external view returns (uint256);\\n\\n  //  function rewardRatioSnapshot() external view returns (uint256);\\n\\n  function initialize(\\n    //    address _factory,\\n    address _token,\\n    address _troveOwner\\n  ) external;\\n\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) external;\\n\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function repay(uint256 _amount, address _newNextTrove) external;\\n\\n  function redeem(address _recipient, address _newNextTrove)\\n    external\\n    returns (uint256 _stableAmount, uint256 _collateralRecieved);\\n\\n  function setArbitrageParticipation(bool _state) external;\\n}\\n\",\"keccak256\":\"0x29c912a3de6b59148fc901b0130d2026f5222674ba8f672ac489e4c49af09f8a\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITokenPriceFeed.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\nimport \\\"./IMintableTokenOwner.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\nimport \\\"./ILiquidationPool.sol\\\";\\nimport \\\"./IStabilityPoolBase.sol\\\";\\nimport \\\"./ITrove.sol\\\";\\n\\ninterface ITroveFactory {\\n  /* view */\\n  function lastTrove(address _trove) external view returns (address);\\n\\n  function firstTrove(address _trove) external view returns (address);\\n\\n  function nextTrove(address _token, address _trove) external view returns (address);\\n\\n  function prevTrove(address _token, address _trove) external view returns (address);\\n\\n  function containsTrove(address _token, address _trove) external view returns (bool);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function tokenOwner() external view returns (IMintableTokenOwner);\\n\\n  function tokenToPriceFeed() external view returns (ITokenPriceFeed);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function troveCount(address _token) external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function totalCollateral(address _token) external view returns (uint256);\\n\\n  function totalDebtForToken(address _token) external view returns (uint256);\\n\\n  function liquidationPool(address _token) external view returns (ILiquidationPool);\\n\\n  function stabilityPool() external view returns (IStabilityPoolBase);\\n\\n  function arbitragePool() external view returns (address);\\n\\n  function getRedemptionFeeRatio(address _trove) external view returns (uint256);\\n\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) external pure returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  /* state changes*/\\n  function createTrove(address _token) external returns (ITrove trove);\\n\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) external;\\n\\n  function removeTrove(address _token, address _trove) external;\\n\\n  function insertTrove(address _trove, address _newNextTrove) external;\\n\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) external;\\n\\n  function updateTotalDebt(uint256 _amount, bool _borrow) external;\\n\\n  function setStabilityPool(address _stabilityPool) external;\\n\\n  function setArbitragePool(address _arbitragePool) external;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external;\\n\\n  function increaseCollateralNative(address _trove, address _newNextTrove) external payable;\\n\\n  /* utils */\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) external;\\n\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external;\\n\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea02f3280364aeb657922582ccd3ac1e4e3a84f09695c62e1e4d19143a9667\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV3Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./callback/IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router is IUniswapV3SwapCallback {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// that may remain in the router after the swap.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// that may remain in the router after the swap.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x2c41f5add735de667889ca1158c93a627af6c0e0445cd7012297326860a76f23\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.4;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n  function uniswapV3SwapCallback(\\n    int256 amount0Delta,\\n    int256 amount1Delta,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xee4f56ce2cbed8925a76857f63f66ae819d5526715ef4fe8ca0ae6005f474817\",\"license\":\"GPL-2.0-or-later\"},\"contracts/stability-pool-base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IStabilityPoolBase.sol\\\";\\nimport \\\"./interfaces/ITroveFactory.sol\\\";\\nimport \\\"./interfaces/ITrove.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./utils/BONQMath.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\n\\n/// @title is used to liquidate troves and reward depositors with collateral redeemed\\ncontract StabilityPoolBase is\\n  IStabilityPoolBase,\\n  UUPSUpgradeable,\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  Constants\\n{\\n  using BONQMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  struct TokenToS {\\n    address tokenAddress;\\n    uint256 S_value;\\n  }\\n\\n  struct TokenToUint256 {\\n    address tokenAddress;\\n    uint256 value;\\n  }\\n\\n  struct Snapshots {\\n    TokenToS[] tokenToSArray;\\n    uint256 P;\\n    uint256 G;\\n    uint128 scale;\\n    uint128 epoch;\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n  ITroveFactory public immutable override factory;\\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n  IMintableToken public immutable override stableCoin;\\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n  IERC20 public immutable override bonqToken;\\n\\n  uint256 public override totalDeposit;\\n\\n  mapping(address => uint256) public collateralToLastErrorOffset;\\n  uint256 public lastStableCoinLossErrorOffset;\\n\\n  mapping(address => uint256) public deposits;\\n  mapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\\n\\n  uint256 public bonqPerMinute;\\n  uint256 public totalBONQRewardsLeft;\\n  uint256 public latestBONQRewardTime;\\n  // Error tracker for the error correction in the BONQ redistribution calculation\\n  uint256 public lastBONQError;\\n  /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n   * after a series of liquidations have occurred, each of which cancel some StableCoin debt with the deposit.\\n   *\\n   * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n   * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n   */\\n  uint256 public P;\\n\\n  uint256 public constant SCALE_FACTOR = 1e9;\\n\\n  uint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\n\\n  // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n  uint128 public currentScale;\\n\\n  // With each offset that fully empties the Pool, the epoch is incremented by 1\\n  uint128 public currentEpoch;\\n\\n  /* Collateral Gain sum 'S': During its lifetime, each deposit d_t earns an Collateral gain of ( d_t * [S - S_t] )/P_t, where S_t\\n   * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n   *\\n   * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n   *\\n   * - The inner mapping records the sum S at different scales\\n   * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n   */\\n  mapping(uint128 => mapping(uint128 => TokenToS[])) public epochToScaleToTokenToSum;\\n\\n  /*\\n   * Similarly, the sum 'G' is used to calculate BONQ gains. During it's lifetime, each deposit d_t earns a BONQ gain of\\n   *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.\\n   *\\n   *  BONQ reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.\\n   *  In each case, the BONQ reward is issued (i.e. G is updated), before other state changes are made.\\n   */\\n  mapping(uint128 => mapping(uint128 => uint256)) public epochToScaleToG;\\n\\n  event Deposit(address _contributor, uint256 _amount);\\n  event TotalDepositUpdated(uint256 _newValue);\\n  event Withdraw(address _contributor, uint256 _amount);\\n  event Arbitrage(address[] _path, uint256 _amountIn, uint256 _amountOut);\\n\\n  // solhint-disable-next-line event-name-camelcase\\n  event BONQRewardRedeemed(address _contributor, uint256 _amount);\\n  event BONQRewardIssue(uint256 issuance, uint256 _totalBONQRewardsLeft);\\n  event BONQPerMinuteUpdated(uint256 _newAmount);\\n  event TotalBONQRewardsUpdated(uint256 _newAmount);\\n  // solhint-disable-next-line event-name-camelcase\\n  event CollateralRewardRedeemed(\\n    address _contributor,\\n    address _tokenAddress,\\n    uint256 _amount,\\n    uint256 _collateralPrice\\n  );\\n  event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G, uint256 _newDepositValue);\\n\\n  /* solhint-disable event-name-camelcase */\\n  event P_Updated(uint256 _P);\\n  event S_Updated(address _tokenAddress, uint256 _S, uint128 _epoch, uint128 _scale);\\n  event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n  /* solhint-disable event-name-camelcase */\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor state-variable-immutable\\n  constructor(address _factory, address _bonqToken) {\\n    require(_factory != address(0x0), \\\"3f8955 trove factory must not be address 0x0\\\");\\n    require(_bonqToken != address(0x0), \\\"3f8955 bonq token must not be address 0x0\\\");\\n    factory = ITroveFactory(_factory);\\n    stableCoin = IMintableToken(address(ITroveFactory(_factory).stableCoin()));\\n    bonqToken = IERC20(_bonqToken);\\n    // to prevent contract implementation to be reinitialized by someone else\\n    _disableInitializers();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    P = DECIMAL_PRECISION;\\n  }\\n\\n  /// @dev make the contract upgradeable by its owner\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  /// @dev to deposit StableCoin into StabilityPool this must be protected against a reentrant attack from the arbitrage\\n  /// @param  _amount amount to deposit\\n  function deposit(uint256 _amount) public override nonReentrant {\\n    // address depositor = msg.sender;\\n    require(_amount > 0, \\\"d87c1 deposit amount must be bigger than zero\\\");\\n\\n    stableCoin.transferFrom(msg.sender, address(this), _amount);\\n    uint256 initialDeposit = deposits[msg.sender];\\n    _redeemReward();\\n\\n    Snapshots memory snapshots = depositSnapshots[msg.sender];\\n\\n    uint256 compoundedDeposit = _getCompoundedDepositFromSnapshots(initialDeposit, snapshots);\\n    // uint256 newValue = compoundedDeposit + _amount;\\n    uint256 newTotalDeposit = totalDeposit + _amount;\\n    totalDeposit = newTotalDeposit;\\n\\n    _updateDepositAndSnapshots(msg.sender, compoundedDeposit + _amount);\\n\\n    emit Deposit(msg.sender, _amount);\\n    emit TotalDepositUpdated(newTotalDeposit);\\n  }\\n\\n  /// @dev to withdraw StableCoin that was not spent if this function is called in a reentrantway during arbitrage  it\\n  /// @dev would skew the token allocation and must be protected against\\n  /// @param  _amount amount to withdraw\\n  function withdraw(uint256 _amount) public override nonReentrant {\\n    uint256 contributorDeposit = deposits[msg.sender];\\n    require(_amount > 0, \\\"f6c8a withdrawal amount must be bigger than 0\\\");\\n    require(contributorDeposit > 0, \\\"f6c8a user has no deposit\\\");\\n    _redeemReward();\\n\\n    Snapshots memory snapshots = depositSnapshots[msg.sender];\\n\\n    uint256 compoundedDeposit = _getCompoundedDepositFromSnapshots(contributorDeposit, snapshots);\\n    uint256 calculatedAmount = compoundedDeposit.min(_amount);\\n\\n    uint256 newValue = compoundedDeposit - calculatedAmount;\\n\\n    totalDeposit = totalDeposit - calculatedAmount;\\n\\n    _updateDepositAndSnapshots(msg.sender, newValue);\\n\\n    stableCoin.transfer(msg.sender, calculatedAmount);\\n    emit Withdraw(msg.sender, calculatedAmount);\\n    emit TotalDepositUpdated(totalDeposit);\\n  }\\n\\n  /// @dev to withdraw collateral rewards earned after liquidations\\n  /// @dev this function does not provide an opportunity for a reentrancy attack\\n  function redeemReward() public override {\\n    Snapshots memory snapshots = depositSnapshots[msg.sender];\\n    uint256 contributorDeposit = deposits[msg.sender];\\n\\n    uint256 compoundedDeposit = _getCompoundedDepositFromSnapshots(contributorDeposit, snapshots);\\n    _redeemReward();\\n    _updateDepositAndSnapshots(msg.sender, compoundedDeposit);\\n  }\\n\\n  /// @dev liquidates trove, must be called from that trove\\n  /// @dev this function does not provide an opportunity for a reentrancy attack even though it would make the arbitrage\\n  /// @dev fail because of the lowering of the stablecoin balance\\n  /// @notice must be called by the valid trove\\n  function liquidate() public override {\\n    ITrove trove = ITrove(msg.sender);\\n    IERC20 collateralToken = IERC20(trove.token());\\n    address collateralTokenAddress = address(collateralToken);\\n    ITroveFactory factory_cached = factory;\\n    require(\\n      factory_cached.containsTrove(address(collateralToken), msg.sender),\\n      \\\"StabilityPool:liquidate: must be called from a valid trove\\\"\\n    );\\n    uint256 troveDebt = trove.debt();\\n    uint256 totalStableCoin = totalDeposit; // cached to save an SLOAD\\n    uint256 troveCollateral = trove.collateral();\\n\\n    collateralToken.safeTransferFrom(address(trove), address(this), troveCollateral);\\n    (uint256 collateralGainPerUnitStaked, uint256 stableCoinLossPerUnitStaked) = _computeRewardsPerUnitStaked(\\n      collateralTokenAddress,\\n      troveCollateral,\\n      troveDebt,\\n      totalStableCoin\\n    );\\n    _updateRewardSumAndProduct(collateralTokenAddress, collateralGainPerUnitStaked, stableCoinLossPerUnitStaked);\\n    _triggerBONQdistribution();\\n\\n    stableCoin.burn(troveDebt);\\n    uint256 newTotalDeposit = totalStableCoin - troveDebt;\\n    totalDeposit = newTotalDeposit;\\n    emit TotalDepositUpdated(newTotalDeposit);\\n    factory_cached.emitLiquidationEvent(address(collateralToken), msg.sender, address(this), troveCollateral);\\n  }\\n\\n  /// @dev gets current deposit of msg.sender\\n  function getWithdrawableDeposit(address staker) public view override returns (uint256) {\\n    uint256 initialDeposit = deposits[staker];\\n    Snapshots memory snapshots = depositSnapshots[staker];\\n    return _getCompoundedDepositFromSnapshots(initialDeposit, snapshots);\\n  }\\n\\n  /// @dev gets collateral reward of msg.sender\\n  /// @param _token collateral token address\\n  function getCollateralReward(address _token, address _depositor) external view returns (uint256) {\\n    Snapshots memory _snapshots = depositSnapshots[_depositor];\\n    uint256 _initialDeposit = deposits[_depositor];\\n\\n    uint128 epochSnapshot = _snapshots.epoch;\\n    uint128 scaleSnapshot = _snapshots.scale;\\n\\n    TokenToS[] memory tokensToSum_cached = epochToScaleToTokenToSum[epochSnapshot][scaleSnapshot];\\n    uint256 tokenArrayLength = tokensToSum_cached.length;\\n\\n    TokenToS memory cachedS;\\n    for (uint128 i = 0; i < tokenArrayLength; i++) {\\n      TokenToS memory S = tokensToSum_cached[i];\\n      if (S.tokenAddress == _token) {\\n        cachedS = S;\\n        break;\\n      }\\n    }\\n    if (cachedS.tokenAddress == address(0)) return 0;\\n    uint256 relatedSValue_snapshot;\\n    for (uint128 i = 0; i < _snapshots.tokenToSArray.length; i++) {\\n      TokenToS memory S_snapsot = _snapshots.tokenToSArray[i];\\n      if (S_snapsot.tokenAddress == _token) {\\n        relatedSValue_snapshot = S_snapsot.S_value;\\n        break;\\n      }\\n    }\\n    TokenToS[] memory nextTokensToSum_cached = epochToScaleToTokenToSum[epochSnapshot][scaleSnapshot + 1];\\n    uint256 nextScaleS;\\n    for (uint128 i = 0; i < nextTokensToSum_cached.length; i++) {\\n      TokenToS memory nextScaleTokenToS = nextTokensToSum_cached[i];\\n      if (nextScaleTokenToS.tokenAddress == _token) {\\n        nextScaleS = nextScaleTokenToS.S_value;\\n        break;\\n      }\\n    }\\n\\n    uint256 P_Snapshot = _snapshots.P;\\n\\n    uint256 collateralGain = _getCollateralGainFromSnapshots(\\n      _initialDeposit,\\n      cachedS.S_value,\\n      nextScaleS,\\n      relatedSValue_snapshot,\\n      P_Snapshot\\n    );\\n\\n    return collateralGain;\\n  }\\n\\n  /// @dev gets BONQ reward of _depositor\\n  /// @param _depositor user address\\n  function getDepositorBONQGain(address _depositor) external view override returns (uint256) {\\n    uint256 totalBONQRewardsLeft_cached = totalBONQRewardsLeft;\\n    uint256 totalStableCoin = totalDeposit;\\n    if (totalBONQRewardsLeft_cached == 0 || bonqPerMinute == 0 || totalStableCoin == 0) {\\n      return 0;\\n    }\\n\\n    uint256 _bonqIssuance = bonqPerMinute * ((block.timestamp - latestBONQRewardTime) / SECONDS_IN_ONE_MINUTE);\\n    if (totalBONQRewardsLeft_cached < _bonqIssuance) {\\n      _bonqIssuance = totalBONQRewardsLeft_cached;\\n    }\\n\\n    uint256 bonqGain = (_bonqIssuance * DECIMAL_PRECISION + lastBONQError) / totalStableCoin;\\n    uint256 marginalBONQGain = bonqGain * P;\\n\\n    return _getDepositorBONQGain(_depositor, marginalBONQGain);\\n  }\\n\\n  /// @dev sets amount of BONQ per minute for rewards\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external override onlyOwner {\\n    _triggerBONQdistribution();\\n    bonqPerMinute = _bonqPerMinute;\\n    emit BONQPerMinuteUpdated(bonqPerMinute);\\n  }\\n\\n  /// @dev sets total amount of BONQ to be rewarded (pays per minute until reaches the amount rewarded)\\n  function setBONQAmountForRewards() external override onlyOwner {\\n    _triggerBONQdistribution();\\n    totalBONQRewardsLeft = bonqToken.balanceOf(address(this));\\n    emit TotalBONQRewardsUpdated(totalBONQRewardsLeft);\\n  }\\n\\n  function _redeemReward() private {\\n    _redeemCollateralReward();\\n    _triggerBONQdistribution();\\n    _redeemBONQReward();\\n  }\\n\\n  function _redeemCollateralReward() internal {\\n    address depositor = msg.sender;\\n    TokenToUint256[] memory depositorCollateralGains = _getDepositorCollateralGains(depositor);\\n    _sendCollateralRewardsToDepositor(depositorCollateralGains);\\n  }\\n\\n  function _redeemBONQReward() internal {\\n    address depositor = msg.sender;\\n    uint256 depositorBONQGain = _getDepositorBONQGain(depositor, 0);\\n    _sendBONQRewardsToDepositor(depositorBONQGain);\\n    emit BONQRewardRedeemed(depositor, depositorBONQGain);\\n  }\\n\\n  /// @dev updates user deposit snapshot data for new deposit value\\n  function _updateDepositAndSnapshots(address _depositor, uint256 _newValue) private {\\n    deposits[_depositor] = _newValue;\\n    if (_newValue == 0) {\\n      delete depositSnapshots[_depositor];\\n      emit DepositSnapshotUpdated(_depositor, 0, 0, 0);\\n      return;\\n    }\\n    uint128 cachedEpoch = currentEpoch;\\n    uint128 cachedScale = currentScale;\\n    TokenToS[] storage cachedTokenToSArray = epochToScaleToTokenToSum[cachedEpoch][cachedScale]; // TODO: maybe remove and read twice?\\n    uint256 cachedP = P;\\n    uint256 cachedG = epochToScaleToG[cachedEpoch][cachedScale];\\n\\n    depositSnapshots[_depositor].tokenToSArray = cachedTokenToSArray; // TODO\\n    depositSnapshots[_depositor].P = cachedP;\\n    depositSnapshots[_depositor].G = cachedG;\\n    depositSnapshots[_depositor].scale = cachedScale;\\n    depositSnapshots[_depositor].epoch = cachedEpoch;\\n    emit DepositSnapshotUpdated(_depositor, cachedP, cachedG, _newValue);\\n  }\\n\\n  function _updateRewardSumAndProduct(\\n    address _collateralTokenAddress,\\n    uint256 _collateralGainPerUnitStaked,\\n    uint256 _stableCoinLossPerUnitStaked\\n  ) internal {\\n    assert(_stableCoinLossPerUnitStaked <= DECIMAL_PRECISION);\\n\\n    uint128 currentScaleCached = currentScale;\\n    uint128 currentEpochCached = currentEpoch;\\n    uint256 currentS;\\n    uint256 currentSIndex;\\n    bool _found;\\n    TokenToS[] memory currentTokenToSArray = epochToScaleToTokenToSum[currentEpochCached][currentScaleCached];\\n    for (uint128 i = 0; i < currentTokenToSArray.length; i++) {\\n      if (currentTokenToSArray[i].tokenAddress == _collateralTokenAddress) {\\n        currentS = currentTokenToSArray[i].S_value;\\n        currentSIndex = i;\\n        _found = true;\\n      }\\n    }\\n    /*\\n     * Calculate the new S first, before we update P.\\n     * The Collateral gain for any given depositor from a liquidation depends on the value of their deposit\\n     * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n     *\\n     * Since S corresponds to Collateral gain, and P to deposit loss, we update S first.\\n     */\\n    uint256 marginalCollateralGain = _collateralGainPerUnitStaked * P;\\n    uint256 newS = currentS + marginalCollateralGain;\\n    if (currentTokenToSArray.length == 0 || !_found) {\\n      TokenToS memory tokenToS;\\n      tokenToS.S_value = newS;\\n      tokenToS.tokenAddress = _collateralTokenAddress;\\n      epochToScaleToTokenToSum[currentEpochCached][currentScaleCached].push() = tokenToS;\\n    } else {\\n      epochToScaleToTokenToSum[currentEpochCached][currentScaleCached][currentSIndex].S_value = newS;\\n    }\\n    emit S_Updated(_collateralTokenAddress, newS, currentEpochCached, currentScaleCached);\\n    _updateP(_stableCoinLossPerUnitStaked, true);\\n  }\\n\\n  function _updateP(uint256 _stableCoinChangePerUnitStaked, bool loss) internal {\\n    /*\\n     * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool StableCoin in the liquidation.\\n     * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - StableCoinLossPerUnitStaked)\\n     */\\n    uint256 newProductFactor;\\n    if (loss) {\\n      newProductFactor = uint256(DECIMAL_PRECISION - _stableCoinChangePerUnitStaked);\\n    } else {\\n      newProductFactor = uint256(DECIMAL_PRECISION + _stableCoinChangePerUnitStaked);\\n    }\\n    uint256 currentP = P;\\n    uint256 newP;\\n    // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n    if (newProductFactor == 0) {\\n      currentEpoch += 1;\\n      emit EpochUpdated(currentEpoch);\\n      currentScale = 0;\\n      emit ScaleUpdated(0);\\n      newP = DECIMAL_PRECISION;\\n\\n      // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n    } else if ((currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR) {\\n      newP = (currentP * newProductFactor * SCALE_FACTOR) / DECIMAL_PRECISION;\\n      currentScale += 1;\\n      emit ScaleUpdated(currentScale);\\n    } else {\\n      newP = (currentP * newProductFactor) / DECIMAL_PRECISION;\\n    }\\n\\n    assert(newP > 0);\\n    P = newP;\\n\\n    emit P_Updated(newP);\\n  }\\n\\n  /// @dev updates G when new BONQ amount is issued\\n  /// @param _bonqIssuance new BONQ issuance amount\\n  function _updateG(uint256 _bonqIssuance) internal {\\n    uint256 totalStableCoin = totalDeposit; // cached to save an SLOAD\\n    /*\\n     * When total deposits is 0, G is not updated. In this case, the BONQ issued can not be obtained by later\\n     * depositors - it is missed out on, and remains in the balanceof the Stability Pool.\\n     *\\n     */\\n    if (totalStableCoin == 0 || _bonqIssuance == 0) {\\n      return;\\n    }\\n\\n    uint256 bonqPerUnitStaked;\\n    bonqPerUnitStaked = _computeBONQPerUnitStaked(_bonqIssuance, totalStableCoin);\\n\\n    uint256 marginalBONQGain = bonqPerUnitStaked * P;\\n    uint128 currentEpoch_cached = currentEpoch;\\n    uint128 currentScale_cached = currentScale;\\n\\n    uint256 newEpochToScaleToG = epochToScaleToG[currentEpoch_cached][currentScale_cached] + marginalBONQGain;\\n    epochToScaleToG[currentEpoch_cached][currentScale_cached] = newEpochToScaleToG;\\n\\n    emit G_Updated(newEpochToScaleToG, currentEpoch_cached, currentScale_cached);\\n  }\\n\\n  function _getDepositorCollateralGains(address _depositor) internal view returns (TokenToUint256[] memory) {\\n    uint256 initialDeposit = deposits[_depositor];\\n    if (initialDeposit == 0) {\\n      TokenToUint256[] memory x;\\n      return x;\\n    }\\n\\n    Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n    TokenToUint256[] memory gainPerCollateralArray = _getCollateralGainsArrayFromSnapshots(initialDeposit, snapshots);\\n    return gainPerCollateralArray;\\n  }\\n\\n  function _getCollateralGainsArrayFromSnapshots(uint256 _initialDeposit, Snapshots memory _snapshots)\\n    internal\\n    view\\n    returns (TokenToUint256[] memory)\\n  {\\n    /*\\n     * Grab the sum 'S' from the epoch at which the stake was made. The Collateral gain may span up to one scale change.\\n     * If it does, the second portion of the Collateral gain is scaled by 1e9.\\n     * If the gain spans no scale change, the second portion will be 0.\\n     */\\n    uint128 epochSnapshot = _snapshots.epoch;\\n    uint128 scaleSnapshot = _snapshots.scale;\\n    TokenToS[] memory tokensToSum_cached = epochToScaleToTokenToSum[epochSnapshot][scaleSnapshot];\\n    uint256 tokenArrayLength = tokensToSum_cached.length;\\n    TokenToUint256[] memory CollateralGainsArray = new TokenToUint256[](tokenArrayLength);\\n    for (uint128 i = 0; i < tokenArrayLength; i++) {\\n      TokenToS memory S = tokensToSum_cached[i];\\n      uint256 relatedS_snapshot;\\n      for (uint128 j = 0; j < _snapshots.tokenToSArray.length; j++) {\\n        TokenToS memory S_snapsot = _snapshots.tokenToSArray[j];\\n        if (S_snapsot.tokenAddress == S.tokenAddress) {\\n          relatedS_snapshot = S_snapsot.S_value;\\n          break;\\n        }\\n      }\\n      TokenToS[] memory nextTokensToSum_cached = epochToScaleToTokenToSum[epochSnapshot][scaleSnapshot + 1];\\n      uint256 nextScaleS;\\n      for (uint128 j = 0; j < nextTokensToSum_cached.length; j++) {\\n        TokenToS memory nextScaleTokenToS = nextTokensToSum_cached[j];\\n        if (nextScaleTokenToS.tokenAddress == S.tokenAddress) {\\n          nextScaleS = nextScaleTokenToS.S_value;\\n          break;\\n        }\\n      }\\n      uint256 P_Snapshot = _snapshots.P;\\n\\n      CollateralGainsArray[i].value = _getCollateralGainFromSnapshots(\\n        _initialDeposit,\\n        S.S_value,\\n        nextScaleS,\\n        relatedS_snapshot,\\n        P_Snapshot\\n      );\\n      CollateralGainsArray[i].tokenAddress = S.tokenAddress;\\n    }\\n\\n    return CollateralGainsArray;\\n  }\\n\\n  function _getCollateralGainFromSnapshots(\\n    uint256 initialDeposit,\\n    uint256 S,\\n    uint256 nextScaleS,\\n    uint256 S_Snapshot,\\n    uint256 P_Snapshot\\n  ) internal pure returns (uint256) {\\n    uint256 firstPortion = S - S_Snapshot;\\n    uint256 secondPortion = nextScaleS / SCALE_FACTOR;\\n    uint256 collateralGain = (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\\n\\n    return collateralGain;\\n  }\\n\\n  function _getDepositorBONQGain(address _depositor, uint256 _marginalBONQGain) internal view returns (uint256) {\\n    uint256 initialDeposit = deposits[_depositor];\\n    if (initialDeposit == 0) {\\n      return 0;\\n    }\\n    Snapshots memory _snapshots = depositSnapshots[_depositor];\\n    /*\\n     * Grab the sum 'G' from the epoch at which the stake was made. The BONQ gain may span up to one scale change.\\n     * If it does, the second portion of the BONQ gain is scaled by 1e9.\\n     * If the gain spans no scale change, the second portion will be 0.\\n     */\\n    uint256 firstEpochPortion = epochToScaleToG[_snapshots.epoch][_snapshots.scale];\\n    uint256 secondEpochPortion = epochToScaleToG[_snapshots.epoch][_snapshots.scale + 1];\\n    if (_snapshots.epoch == currentEpoch) {\\n      if (_snapshots.scale == currentScale) firstEpochPortion += _marginalBONQGain;\\n      if (_snapshots.scale + 1 == currentScale) secondEpochPortion += _marginalBONQGain;\\n    }\\n    uint256 gainPortions = firstEpochPortion - _snapshots.G + secondEpochPortion / SCALE_FACTOR;\\n\\n    return (initialDeposit * (gainPortions)) / _snapshots.P / DECIMAL_PRECISION;\\n  }\\n\\n  /// @dev gets compounded deposit of the user\\n  function _getCompoundedDepositFromSnapshots(uint256 _initialStake, Snapshots memory _snapshots)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 snapshot_P = _snapshots.P;\\n\\n    // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n    if (_snapshots.epoch < currentEpoch) {\\n      return 0;\\n    }\\n\\n    uint256 compoundedStake;\\n    uint128 scaleDiff = currentScale - _snapshots.scale;\\n\\n    /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n     * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n     * at least 1e-9 -- so return 0.\\n     */\\n    uint256 calculatedSnapshotP = snapshot_P == 0 ? DECIMAL_PRECISION : snapshot_P;\\n    if (scaleDiff == 0) {\\n      compoundedStake = (_initialStake * P) / calculatedSnapshotP;\\n    } else if (scaleDiff == 1) {\\n      compoundedStake = (_initialStake * P) / calculatedSnapshotP / SCALE_FACTOR;\\n    } else {\\n      // if scaleDiff >= 2\\n      compoundedStake = 0;\\n    }\\n\\n    /*\\n     * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n     *\\n     * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\\n     * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded deposit should slightly less\\n     * than it's theoretical value.\\n     *\\n     * Thus it's unclear whether this line is still really needed.\\n     */\\n    if (compoundedStake < _initialStake / 1e9) {\\n      return 0;\\n    }\\n\\n    return compoundedStake;\\n  }\\n\\n  /// @dev Compute the StableCoin and Collateral rewards. Uses a \\\"feedback\\\" error correction, to keep\\n  /// the cumulative error in the P and S state variables low:s\\n  function _computeRewardsPerUnitStaked(\\n    address _collateralTokenAddress,\\n    uint256 _collToAdd,\\n    uint256 _debtToOffset,\\n    uint256 _totalStableCoinDeposits\\n  ) internal returns (uint256 collateralGainPerUnitStaked, uint256 stableCoinLossPerUnitStaked) {\\n    /*\\n     * Compute the StableCoin and Collateral rewards. Uses a \\\"feedback\\\" error correction, to keep\\n     * the cumulative error in the P and S state variables low:\\n     *\\n     * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n     * function was called.\\n     * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n     * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n     * 4) Store these errors for use in the next correction when this function is called.\\n     * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n     */\\n    uint256 collateralNumerator = _collToAdd * DECIMAL_PRECISION + collateralToLastErrorOffset[_collateralTokenAddress];\\n\\n    assert(_debtToOffset <= _totalStableCoinDeposits);\\n    if (_debtToOffset == _totalStableCoinDeposits) {\\n      stableCoinLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n      lastStableCoinLossErrorOffset = 0;\\n    } else {\\n      uint256 stableCoinLossNumerator = _debtToOffset * DECIMAL_PRECISION - lastStableCoinLossErrorOffset;\\n      /*\\n       * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" StableCoin loss,\\n       * which ensures the error in any given compoundedStableCoinDeposit favors the Stability Pool.\\n       */\\n      stableCoinLossPerUnitStaked = stableCoinLossNumerator / _totalStableCoinDeposits + 1;\\n      lastStableCoinLossErrorOffset = stableCoinLossPerUnitStaked * _totalStableCoinDeposits - stableCoinLossNumerator;\\n    }\\n\\n    collateralGainPerUnitStaked = collateralNumerator / _totalStableCoinDeposits;\\n    collateralToLastErrorOffset[_collateralTokenAddress] =\\n      collateralNumerator -\\n      collateralGainPerUnitStaked *\\n      _totalStableCoinDeposits;\\n\\n    return (collateralGainPerUnitStaked, stableCoinLossPerUnitStaked);\\n  }\\n\\n  /// @dev distributes BONQ per minutes that was not spent yet\\n  function _triggerBONQdistribution() internal {\\n    uint256 issuance = _issueBONQRewards();\\n    _updateG(issuance);\\n  }\\n\\n  function _issueBONQRewards() internal returns (uint256) {\\n    uint256 newBONQRewardTime = block.timestamp;\\n    uint256 totalBONQRewardsLeft_cached = totalBONQRewardsLeft;\\n    if (totalBONQRewardsLeft_cached == 0 || bonqPerMinute == 0 || totalDeposit == 0) {\\n      latestBONQRewardTime = newBONQRewardTime;\\n      return 0;\\n    }\\n\\n    uint256 timePassedInMinutes = (newBONQRewardTime - latestBONQRewardTime) / SECONDS_IN_ONE_MINUTE;\\n    uint256 issuance = bonqPerMinute * timePassedInMinutes;\\n    if (totalBONQRewardsLeft_cached < issuance) {\\n      issuance = totalBONQRewardsLeft_cached; // event will capture that 0 tokens left\\n    }\\n    uint256 newTotalBONQRewardsLeft = totalBONQRewardsLeft_cached - issuance;\\n    totalBONQRewardsLeft = newTotalBONQRewardsLeft;\\n    latestBONQRewardTime = newBONQRewardTime;\\n\\n    emit BONQRewardIssue(issuance, newTotalBONQRewardsLeft);\\n\\n    return issuance;\\n  }\\n\\n  function _computeBONQPerUnitStaked(uint256 _bonqIssuance, uint256 _totalStableCoinDeposits)\\n    internal\\n    returns (uint256)\\n  {\\n    /*\\n     * Calculate the BONQ-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep the\\n     * cumulative error low in the running total G:\\n     *\\n     * 1) Form a numerator which compensates for the floor division error that occurred the last time this\\n     * function was called.\\n     * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n     * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n     * 4) Store this error for use in the next correction when this function is called.\\n     * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n     */\\n    uint256 bonqNumerator = _bonqIssuance * DECIMAL_PRECISION + lastBONQError;\\n\\n    uint256 bonqPerUnitStaked = bonqNumerator / _totalStableCoinDeposits;\\n    lastBONQError = bonqNumerator - (bonqPerUnitStaked * _totalStableCoinDeposits);\\n\\n    return bonqPerUnitStaked;\\n  }\\n\\n  /// @dev transfers collateral rewards tokens precalculated to the depositor\\n  function _sendCollateralRewardsToDepositor(TokenToUint256[] memory _depositorCollateralGains) internal {\\n    for (uint256 i = 0; i < _depositorCollateralGains.length; i++) {\\n      if (_depositorCollateralGains[i].value == 0) {\\n        continue;\\n      }\\n      IERC20 collateralToken = IERC20(_depositorCollateralGains[i].tokenAddress);\\n      collateralToken.safeTransfer(msg.sender, _depositorCollateralGains[i].value);\\n      uint256 collateralPrice = factory.tokenToPriceFeed().tokenPrice(address(collateralToken));\\n      emit CollateralRewardRedeemed(\\n        msg.sender,\\n        _depositorCollateralGains[i].tokenAddress,\\n        _depositorCollateralGains[i].value,\\n        collateralPrice\\n      );\\n    }\\n  }\\n\\n  /// @dev transfers BONQ amount to the user\\n  function _sendBONQRewardsToDepositor(uint256 _bonqGain) internal {\\n    bonqToken.transfer(msg.sender, _bonqGain);\\n  }\\n}\\n\",\"keccak256\":\"0xa7d4084bc1ef1105eb7ae2cbcb5f2f1c76654f73c83cdab5c0bd2dc6bb90e5b2\",\"license\":\"MIT\"},\"contracts/stability-pool-uniswap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IStabilityPoolUniswap.sol\\\";\\nimport \\\"./interfaces/uniswap/IUniswapV3Router.sol\\\";\\nimport \\\"./stability-pool-base.sol\\\";\\n\\n/// @title is used to liquidate troves and reward depositors with collateral redeemed\\ncontract StabilityPoolUniswap is StabilityPoolBase, IStabilityPoolUniswap {\\n  IUniswapV3Router public router;\\n\\n  constructor(address _factory, address _bonqToken) StabilityPoolBase(_factory, _bonqToken) {}\\n\\n  /// @dev use the DEX router to trigger a swap that starts and ends with the stable coin and yields more coins than it\\n  /// @dev requied as input. This function could be subject to a reentrant attack from a malicious token in the DEX\\n  /// @param  _amountIn start amount\\n  /// @param  _path calldata[]\\n  /// @param  _fees calldata[] fees array in correct order\\n  function arbitrage(\\n    uint256 _amountIn,\\n    address[] calldata _path,\\n    uint24[] calldata _fees,\\n    uint256 expiry\\n  ) public override nonReentrant {\\n    require(_path[0] == address(stableCoin), \\\"eafe8 must start with stable coin\\\");\\n    require(_path[_path.length - 1] == address(stableCoin), \\\"eafe8 must end with stable coin\\\");\\n    require(block.timestamp < expiry || expiry == 0, \\\"92852 too late\\\");\\n    // if the deadline was not set it is set to NOW - as the swap will happen in the same block it will be soon enough\\n    uint256 startBalance = stableCoin.balanceOf(address(this));\\n    // the swap must yield at least 1 coin (in ETH parlance: 1 Wei) more than what was put in and the TX has 10 minutes to execute\\n    IUniswapV3Router.ExactInputParams memory swapParams = IUniswapV3Router.ExactInputParams(\\n      _constructUniswapPath(_path, _fees),\\n      address(this),\\n      _amountIn,\\n      _amountIn + 1\\n    );\\n    router.exactInput(swapParams);\\n    uint256 amountOut = stableCoin.balanceOf(address(this)) - startBalance;\\n    // increase P by the arbitrage gain / total deposit\\n    _updateP((amountOut * DECIMAL_PRECISION) / totalDeposit, false);\\n    uint256 newTotalDeposit = totalDeposit + amountOut;\\n    totalDeposit = newTotalDeposit;\\n    emit Arbitrage(_path, _amountIn, amountOut);\\n    emit TotalDepositUpdated(newTotalDeposit);\\n  }\\n\\n  /// @dev set the DEX router to be used for arbitrage functions\\n  function setRouter(address _router) public override onlyOwner {\\n    router = IUniswapV3Router(_router);\\n    stableCoin.approve(_router, MAX_INT);\\n  }\\n\\n  /// @dev constructs uniswap swap path from arrays of tokens and pool fees\\n  /// @param  _path address[] of tokens\\n  /// @param  _fees uint24[] of pool fees\\n  function _constructUniswapPath(address[] memory _path, uint24[] memory _fees)\\n    private\\n    pure\\n    returns (bytes memory pathBytesString)\\n  {\\n    pathBytesString = abi.encodePacked(_path[0]);\\n    for (uint256 i = 0; i < _fees.length; i++) {\\n      pathBytesString = abi.encodePacked(pathBytesString, _fees[i], _path[i + 1]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x57714a680429b2ee33e2570562e7a2ab132afae6847554f5fed58abdf75e3640\",\"license\":\"MIT\"},\"contracts/utils/BONQMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary BONQMath {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\n  /// @dev return the smaller of two numbers\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @dev return the bigger of two numbers\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Multiply two decimal numbers and use normal rounding rules:\\n   *  -round product up if 19'th mantissa digit >= 5\\n   *  -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n    uint256 prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by function that represent time in units of minutes:\\n   * 1) IFeeRecipient.calcDecayedBaseRate\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   * @param _base number to exponentially increase\\n   * @param _minutes power in minutes passed\\n   */\\n  function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint256 y = DECIMAL_PRECISION;\\n    uint256 x = _base;\\n    uint256 n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n}\\n\",\"keccak256\":\"0x0a20a2bf799abe4603a95b343d4d701c0884a57fb61951354dcb7a06075fb0ab\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n  uint256 public constant BORROWING_RATE = PERCENT_05;\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n}\\n\",\"keccak256\":\"0x6a665a01a9a7f729c66450e6b996c07ac47009851acacc6fcb11eb974ef20b5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "arbitrage(uint256,address[],uint24[],uint256)": {
        "details": "use the DEX router to trigger a swap that starts and ends with the stable coin and yields more coins than itrequied as input. This function could be subject to a reentrant attack from a malicious token in the DEX",
        "params": {
          "_amountIn": "start amount",
          "_fees": "calldata[] fees array in correct order",
          "_path": "calldata[]"
        }
      },
      "deposit(uint256)": {
        "details": "to deposit StableCoin into StabilityPool this must be protected against a reentrant attack from the arbitrage",
        "params": {
          "_amount": "amount to deposit"
        }
      },
      "getCollateralReward(address,address)": {
        "details": "gets collateral reward of msg.sender",
        "params": {
          "_token": "collateral token address"
        }
      },
      "getDepositorBONQGain(address)": {
        "details": "gets BONQ reward of _depositor",
        "params": {
          "_depositor": "user address"
        }
      },
      "getWithdrawableDeposit(address)": {
        "details": "gets current deposit of msg.sender"
      },
      "liquidate()": {
        "details": "liquidates trove, must be called from that trovethis function does not provide an opportunity for a reentrancy attack even though it would make the arbitragefail because of the lowering of the stablecoin balance"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemReward()": {
        "details": "to withdraw collateral rewards earned after liquidationsthis function does not provide an opportunity for a reentrancy attack"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBONQAmountForRewards()": {
        "details": "sets total amount of BONQ to be rewarded (pays per minute until reaches the amount rewarded)"
      },
      "setBONQPerMinute(uint256)": {
        "details": "sets amount of BONQ per minute for rewards"
      },
      "setRouter(address)": {
        "details": "set the DEX router to be used for arbitrage functions"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "details": "to withdraw StableCoin that was not spent if this function is called in a reentrantway during arbitrage  itwould skew the token allocation and must be protected against",
        "params": {
          "_amount": "amount to withdraw"
        }
      }
    },
    "title": "is used to liquidate troves and reward depositors with collateral redeemed",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "liquidate()": {
        "notice": "must be called by the valid trove"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 630,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 633,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 612,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 927,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1453,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1069,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1127,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10917,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "totalDeposit",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 10921,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "collateralToLastErrorOffset",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10923,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "lastStableCoinLossErrorOffset",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 10927,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "deposits",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10932,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "depositSnapshots",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_struct(Snapshots)10899_storage)"
      },
      {
        "astId": 10934,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "bonqPerMinute",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 10936,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "totalBONQRewardsLeft",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 10938,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "latestBONQRewardTime",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 10940,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "lastBONQError",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 10942,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "P",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 10950,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "currentScale",
        "offset": 0,
        "slot": "261",
        "type": "t_uint128"
      },
      {
        "astId": 10952,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "currentEpoch",
        "offset": 16,
        "slot": "261",
        "type": "t_uint128"
      },
      {
        "astId": 10960,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "epochToScaleToTokenToSum",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_array(t_struct(TokenToS)10881_storage)dyn_storage))"
      },
      {
        "astId": 10966,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "epochToScaleToG",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      {
        "astId": 13135,
        "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
        "label": "router",
        "offset": 0,
        "slot": "264",
        "type": "t_contract(IUniswapV3Router)9537"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TokenToS)10881_storage)dyn_storage": {
        "base": "t_struct(TokenToS)10881_storage",
        "encoding": "dynamic_array",
        "label": "struct StabilityPoolBase.TokenToS[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV3Router)9537": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Snapshots)10899_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StabilityPoolBase.Snapshots)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshots)10899_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_array(t_struct(TokenToS)10881_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => struct StabilityPoolBase.TokenToS[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TokenToS)10881_storage)dyn_storage"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_array(t_struct(TokenToS)10881_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => struct StabilityPoolBase.TokenToS[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_array(t_struct(TokenToS)10881_storage)dyn_storage)"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint256)"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Snapshots)10899_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPoolBase.Snapshots",
        "members": [
          {
            "astId": 10890,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "tokenToSArray",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(TokenToS)10881_storage)dyn_storage"
          },
          {
            "astId": 10892,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "P",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10894,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "G",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10896,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "scale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10898,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "epoch",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenToS)10881_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPoolBase.TokenToS",
        "members": [
          {
            "astId": 10878,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10880,
            "contract": "contracts/stability-pool-uniswap.sol:StabilityPoolUniswap",
            "label": "S_value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}