{
  "address": "0x11d455366ba5D590e7838c4CEcE9aCC95C567e46",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        }
      ],
      "name": "CollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        }
      ],
      "name": "DebtUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewTrove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableUnspent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBaseRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finishBaseRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lastTroveRedeemed",
          "type": "address"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralization",
          "type": "uint256"
        }
      ],
      "name": "TroveCollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralization",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "TroveDebtUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "TroveImplementationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referenceTrove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "before",
          "type": "bool"
        }
      ],
      "name": "TroveInserted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceAtLiquidation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stabilityPoolLiquidation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trove",
          "type": "address"
        }
      ],
      "name": "TroveRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_RESERVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_05",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETHContract",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitragePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "containsTrove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createTrove",
      "outputs": [
        {
          "internalType": "contract ITrove",
          "name": "trove",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nextTrove",
          "type": "address"
        }
      ],
      "name": "createTroveAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stabilityPoolLiquidation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "emitLiquidationEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newCollateralization",
          "type": "uint256"
        }
      ],
      "name": "emitTroveCollateralUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newCollateralization",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feePaid",
          "type": "uint256"
        }
      ],
      "name": "emitTroveDebtUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "contract IFeeRecipient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "firstTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "getRedemptionFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "increaseCollateralNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newNextTrove",
          "type": "address"
        }
      ],
      "name": "insertTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "lastTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liquidationPool",
      "outputs": [
        {
          "internalType": "contract ILiquidationPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "nextTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "prevTrove",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastTroveCurrentICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lastTroveNewPositionHint",
          "type": "address"
        }
      ],
      "name": "redeemStableCoinForCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trove",
          "type": "address"
        }
      ],
      "name": "removeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arbitragePool",
          "type": "address"
        }
      ],
      "name": "setArbitragePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationPool",
          "type": "address"
        }
      ],
      "name": "setLiquidationPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stabilityPool",
          "type": "address"
        }
      ],
      "name": "setStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenPriceFeed",
          "type": "address"
        }
      ],
      "name": "setTokenPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveImplementation",
          "type": "address"
        }
      ],
      "name": "setTroveImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationPool",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPoolBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "tokenCollateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenOwner",
      "outputs": [
        {
          "internalType": "contract IMintableTokenOwner",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenToPriceFeed",
      "outputs": [
        {
          "internalType": "contract ITokenPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "totalDebtForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnerOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "troveCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        }
      ],
      "name": "updateTotalCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_borrow",
          "type": "bool"
        }
      ],
      "name": "updateTotalDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd34036bbb89a28b65cef89193c1f6fa61d2e147401aa6de3d34321dbe4e2e524",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0x11d455366ba5D590e7838c4CEcE9aCC95C567e46",
    "transactionIndex": 37,
    "gasUsed": "4763790",
    "logsBloom": "0x
    "blockHash": "0x486ca03572dac4bb5a09bd4a28659f2c9723e9d39b7eebb005d71206aeab7136",
    "transactionHash": "0xd34036bbb89a28b65cef89193c1f6fa61d2e147401aa6de3d34321dbe4e2e524",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 37020359,
        "transactionHash": "0xd34036bbb89a28b65cef89193c1f6fa61d2e147401aa6de3d34321dbe4e2e524",
        "address": "0x11d455366ba5D590e7838c4CEcE9aCC95C567e46",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 166,
        "blockHash": "0x486ca03572dac4bb5a09bd4a28659f2c9723e9d39b7eebb005d71206aeab7136"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 37020359,
        "transactionHash": "0xd34036bbb89a28b65cef89193c1f6fa61d2e147401aa6de3d34321dbe4e2e524",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000024377db01ec8788000000000000000000000000000000000000000000000006c98bc89fbf1f185e0000000000000000000000000000000000000000000004fe225438b082f922d5000000000000000000000000000000000000000000000006c74850c4bd3290d60000000000000000000000000000000000000000000004fe2497b08b84e5aa5d",
        "logIndex": 167,
        "blockHash": "0x486ca03572dac4bb5a09bd4a28659f2c9723e9d39b7eebb005d71206aeab7136"
      }
    ],
    "blockNumber": 37020359,
    "cumulativeGasUsed": "10802219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ad91dfc9da538af5d7b10d9f4978a6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"name\":\"CollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewTrove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableUnspent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBaseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finishBaseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastTroveRedeemed\",\"type\":\"address\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralization\",\"type\":\"uint256\"}],\"name\":\"TroveCollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralization\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"TroveDebtUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"TroveImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referenceTrove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"before\",\"type\":\"bool\"}],\"name\":\"TroveInserted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAtLiquidation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stabilityPoolLiquidation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"}],\"name\":\"TroveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHContract\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitragePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"containsTrove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createTrove\",\"outputs\":[{\"internalType\":\"contract ITrove\",\"name\":\"trove\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nextTrove\",\"type\":\"address\"}],\"name\":\"createTroveAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilityPoolLiquidation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"emitLiquidationEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCollateralization\",\"type\":\"uint256\"}],\"name\":\"emitTroveCollateralUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCollateralization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePaid\",\"type\":\"uint256\"}],\"name\":\"emitTroveDebtUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract IFeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"firstTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"getRedemptionFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"increaseCollateralNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newNextTrove\",\"type\":\"address\"}],\"name\":\"insertTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"lastTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liquidationPool\",\"outputs\":[{\"internalType\":\"contract ILiquidationPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"nextTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"prevTrove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastTroveCurrentICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lastTroveNewPositionHint\",\"type\":\"address\"}],\"name\":\"redeemStableCoinForCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trove\",\"type\":\"address\"}],\"name\":\"removeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbitragePool\",\"type\":\"address\"}],\"name\":\"setArbitragePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationPool\",\"type\":\"address\"}],\"name\":\"setLiquidationPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"}],\"name\":\"setStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPriceFeed\",\"type\":\"address\"}],\"name\":\"setTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveImplementation\",\"type\":\"address\"}],\"name\":\"setTroveImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationPool\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPoolBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"contract IMintableTokenOwner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToPriceFeed\",\"outputs\":[{\"internalType\":\"contract ITokenPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalDebtForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"troveCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"}],\"name\":\"updateTotalCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_borrow\",\"type\":\"bool\"}],\"name\":\"updateTotalDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"containsTrove(address,address)\":{\"details\":\"returns and checks if such trove exists for this token\"},\"createTrove(address)\":{\"details\":\"creates a trove if the token is supported\",\"params\":{\"_token\":\"any supported token address\"}},\"createTroveAndBorrow(address,uint256,address,uint256,address)\":{\"details\":\"creates a trove with collateral and borrows from it\",\"params\":{\"_borrowAmount\":\"the value of the minting\",\"_collateralAmount\":\"a positive amount of collateral to transfer from the sender's account or zero\",\"_nextTrove\":\"is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\",\"_recipient\":\"is the address to which the newly minted tokens will be transferred\",\"_token\":\"any supported token address\"}},\"emitLiquidationEvent(address,address,address,uint256)\":{\"details\":\"to emit Liquidation event, to be called from a trove after liquidation.\",\"params\":{\"_token\":\"address of token\",\"_trove\":\"address of the Trove\",\"collateral\":\"uint256 amount of collateral\",\"stabilityPoolLiquidation\":\"address of StabilityPool, 0x0 if Community LiquidationPool\"}},\"emitTroveCollateralUpdate(address,uint256,uint256)\":{\"details\":\"to emit Collateral update event, to be called from trove\",\"params\":{\"_newAmount\":\"new trove's Collateral value\",\"_newCollateralization\":\"new trove's collateralization value\",\"_token\":\"address of token\"}},\"emitTroveDebtUpdate(address,uint256,uint256,uint256)\":{\"details\":\"to emit Trove's debt update event, to be called from trove\",\"params\":{\"_newAmount\":\"new trove's debt value\",\"_newCollateralization\":\"new trove's collateralization value\",\"_token\":\"address of token\"}},\"firstTrove(address)\":{\"details\":\"returns the first trove by minimal collaterization ratio\"},\"getBorrowingFee(uint256)\":{\"details\":\"returns fee from borrowing the amount\"},\"getRedemptionAmount(uint256,uint256)\":{\"details\":\"returns amount to be used in redemption excluding fee,\"},\"getRedemptionFee(uint256,uint256)\":{\"details\":\"returns fee from redeeming the amount\"},\"getRedemptionFeeRatio(address)\":{\"details\":\"returns fee from redeeming the amount\"},\"increaseCollateralNative(address,address)\":{\"details\":\"deposits native token into trove after wrapping the ETH (EWT, AVAX, etc) into WETH (WEWT, WAVAX, etc)\",\"params\":{\"_newNextTrove\":\"hint for next trove position\",\"_trove\":\"tove to be deposited in\"}},\"insertTrove(address,address)\":{\"details\":\"insert a trove in the sorted list of troves. the troves must be sorted by collateralisation ratio CR the sender must be the trove which will be inserted in the list\",\"params\":{\"_newNextTrove\":\"is the trove before which the trove will be added\"}},\"lastTrove(address)\":{\"details\":\"returns the last trove by maximum collaterization ratio\"},\"liquidationPool(address)\":{\"details\":\"returns contract address of LiquidationPool for specific token\"},\"nextTrove(address,address)\":{\"details\":\"returns the next trove by collaterization ratio\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"prevTrove(address,address)\":{\"details\":\"returns the previous trove by collaterization ratio\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemStableCoinForCollateral(address,uint256,uint256,uint256,address)\":{\"details\":\"redeem desired StableCoin amount for desired collateral tokens\",\"params\":{\"_lastTroveCurrentICR\":\"ICR of the last trove to be redeemed, if matches then the hint is working and it redeems\",\"_lastTroveNewPositionHint\":\"hint for the of the nextNewTrove after redemption for the latest trove\",\"_maxRate\":\"is max fee (in % with 1e18 precision) allowed to pay\",\"_stableAmount\":\"the desired amount of StableCoin to pay for redemption\"}},\"removeTrove(address,address)\":{\"details\":\"remove a trove from the list and send any remaining token balance to the owner\",\"params\":{\"_trove\":\"is the trove which will be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setArbitragePool(address)\":{\"details\":\"sets contract address of ArbitragePool\"},\"setFeeRecipient(address)\":{\"details\":\"sets contract address of FeeRecipient\"},\"setLiquidationPool(address,address)\":{\"details\":\"sets contract address of LiquidationPool for specific token\"},\"setStabilityPool(address)\":{\"details\":\"sets contract address of StabilityPool\"},\"setTokenOwner()\":{\"details\":\"sets address of the contract for stableCoin issuance\"},\"setTokenPriceFeed(address)\":{\"details\":\"sets contract address of TokenPriceFeed\"},\"setWETH(address,address)\":{\"details\":\"sets contract address of Wrapped native token, along with liquidationPool\"},\"togglePause()\":{\"details\":\"toggles the pause state of the contract if the contract is paused borrowing is disabled and liquidation with Stability Pool is impossible (Community liquidations still allowed)\"},\"tokenCollateralization(address)\":{\"details\":\"returns total collateral ratio averaged between troves for specific token\"},\"totalCollateral(address)\":{\"details\":\"returns total collateral among all troves for specific token\"},\"totalDebtForToken(address)\":{\"details\":\"returns total debt among all troves for specific token\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTokenOwnerOwnership(address)\":{\"details\":\"transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters\"},\"transferTokenOwnership(address)\":{\"details\":\"transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters\"},\"troveCount(address)\":{\"details\":\"returns the number of troves for specific token\"},\"updateTotalCollateral(address,uint256,bool)\":{\"details\":\"function to be called from trove to update total collateral value of all troves of this tokens\",\"params\":{\"_increase\":\"bool that indicates \\\"+\\\" or \\\"-\\\" operation\"}},\"updateTotalDebt(uint256,bool)\":{\"details\":\"function to be called from trove to change totalDebt\",\"params\":{\"_borrow\":\"indicates if it is borrow or repay/liquidatin\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/original-trove-factory.sol\":\"OriginalTroveFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x7554657b651d884f77e786ef65ea098bebbcfedda5ca06126cf7825d6121a368\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe14e576c8651a2409b41db02dd05638d0ceced067a4dbc2918f448e0cb2397e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.2) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb671f26ab94e1519cbd14bf10f094873a4d94fe92892666cf3e8846eecbb73fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/IBONQStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface IBONQStaking {\\n  /* view */\\n  function totalStake() external view returns (uint256);\\n\\n  function getRewardsTotal() external view returns (uint256);\\n\\n  function getUnpaidStableCoinGain(address _user) external view returns (uint256);\\n\\n  /* state changes*/\\n  function stake(uint256 _amount) external;\\n\\n  function unstake(uint256 _amount) external;\\n\\n  function redeemReward(\\n    uint256 _amount,\\n    address _troveAddress,\\n    address _newNextTrove\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1363daea2dc22be920366f786b189e2a385b6e98165f50ad80e73d9fb0a34dc0\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExternalPriceFeed {\\n  function token() external view returns (address);\\n\\n  function price() external view returns (uint256);\\n\\n  function pricePoint() external view returns (uint256);\\n\\n  function setPrice(uint256 _price) external;\\n}\\n\",\"keccak256\":\"0x48f9377b9898fb6e4e64ae15052879490fc2d3fb0f632a23a5854629fd389f89\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFeeRecipient {\\n  function baseRate() external view returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  function calcDecayedBaseRate(uint256 _currentBaseRate) external view returns (uint256);\\n\\n  /**\\n     @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n     fees from the msg.sender\\n     @param _amount the amount in Wei of fees to transfer\\n     */\\n  function takeFees(uint256 _amount) external returns (bool);\\n\\n  function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x63f8b8fb3c45189659e28d534cadcf7226f06feb6f51b6211b88ed66020f3d57\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\n\\ninterface ILiquidationPool {\\n  function collateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function liqTokenRate() external view returns (uint256);\\n\\n  function claimCollateralAndDebt(uint256 _unclaimedCollateral, uint256 _unclaimedDebt) external;\\n\\n  function approveTrove(address _trove) external;\\n\\n  function unapproveTrove(address _trove) external;\\n\\n  function liquidate() external;\\n}\\n\",\"keccak256\":\"0x7e7c6bfd1345b762f1373273b6fc007cbda9b1c16e8466bf98110ad59f83906f\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableTokenOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0xa23ed4bc24f67535bdf6b9fda45af99202f4b37b137d68111205efb04022f476\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPoolBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IStabilityPoolBase {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function bonqToken() external view returns (IERC20);\\n\\n  function totalDeposit() external view returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function redeemReward() external;\\n\\n  function liquidate() external;\\n\\n  function setBONQPerMinute(uint256 _bonqPerMinute) external;\\n\\n  function setBONQAmountForRewards() external;\\n\\n  function getDepositorBONQGain(address _depositor) external view returns (uint256);\\n\\n  function getWithdrawableDeposit(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf604d75783438cc84d31e72e6becbf359d4233e1d57bacf399767563507750ba\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n  struct TokenInfo {\\n    address priceFeed;\\n    uint256 mcr;\\n    uint256 mrf; // Maximum Redemption Fee\\n  }\\n\\n  function tokenPriceFeed(address) external view returns (address);\\n\\n  function tokenPrice(address _token) external view returns (uint256);\\n\\n  function mcr(address _token) external view returns (uint256);\\n\\n  function mrf(address _token) external view returns (uint256);\\n\\n  function setTokenPriceFeed(\\n    address _token,\\n    address _priceFeed,\\n    uint256 _mcr,\\n    uint256 _maxRedemptionFeeBasisPoints\\n  ) external;\\n\\n  function emitPriceUpdate(\\n    address _token,\\n    uint256 _priceAverage,\\n    uint256 _pricePoint\\n  ) external;\\n\\n  event NewTokenPriceFeed(address _token, address _priceFeed, string _name, string _symbol, uint256 _mcr, uint256 _mrf);\\n  event PriceUpdate(address token, uint256 priceAverage, uint256 pricePoint);\\n}\\n\",\"keccak256\":\"0x1464b339e10e5bcdff774c69d9092696bc4e64c2a1fcbe66120fcdcd72d17a2d\",\"license\":\"MIT\"},\"contracts/interfaces/ITrove.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITroveFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITrove is IOwnable {\\n  function factory() external view returns (ITroveFactory);\\n\\n  function token() external view returns (IERC20);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TOKEN_PRECISION() external view returns (uint256);\\n\\n  function mcr() external view returns (uint256);\\n\\n  function collateralization() external view returns (uint256);\\n\\n  function collateralValue() external view returns (uint256);\\n\\n  function collateral() external view returns (uint256);\\n\\n  function recordedCollateral() external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function netDebt() external view returns (uint256);\\n\\n  //  function rewardRatioSnapshot() external view returns (uint256);\\n\\n  function initialize(\\n    //    address _factory,\\n    address _token,\\n    address _troveOwner\\n  ) external;\\n\\n  function increaseCollateral(uint256 _amount, address _newNextTrove) external;\\n\\n  function decreaseCollateral(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function borrow(\\n    address _recipient,\\n    uint256 _amount,\\n    address _newNextTrove\\n  ) external;\\n\\n  function repay(uint256 _amount, address _newNextTrove) external;\\n\\n  function redeem(address _recipient, address _newNextTrove)\\n    external\\n    returns (uint256 _stableAmount, uint256 _collateralRecieved);\\n\\n  function setArbitrageParticipation(bool _state) external;\\n}\\n\",\"keccak256\":\"0x29c912a3de6b59148fc901b0130d2026f5222674ba8f672ac489e4c49af09f8a\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./ITokenPriceFeed.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\nimport \\\"./IMintableTokenOwner.sol\\\";\\nimport \\\"./IFeeRecipient.sol\\\";\\nimport \\\"./ILiquidationPool.sol\\\";\\nimport \\\"./IStabilityPoolBase.sol\\\";\\nimport \\\"./ITrove.sol\\\";\\n\\ninterface ITroveFactory {\\n  /* view */\\n  function lastTrove(address _trove) external view returns (address);\\n\\n  function firstTrove(address _trove) external view returns (address);\\n\\n  function nextTrove(address _token, address _trove) external view returns (address);\\n\\n  function prevTrove(address _token, address _trove) external view returns (address);\\n\\n  function containsTrove(address _token, address _trove) external view returns (bool);\\n\\n  function stableCoin() external view returns (IMintableToken);\\n\\n  function tokenOwner() external view returns (IMintableTokenOwner);\\n\\n  function tokenToPriceFeed() external view returns (ITokenPriceFeed);\\n\\n  function feeRecipient() external view returns (IFeeRecipient);\\n\\n  function troveCount(address _token) external view returns (uint256);\\n\\n  function totalDebt() external view returns (uint256);\\n\\n  function totalCollateral(address _token) external view returns (uint256);\\n\\n  function totalDebtForToken(address _token) external view returns (uint256);\\n\\n  function liquidationPool(address _token) external view returns (ILiquidationPool);\\n\\n  function stabilityPool() external view returns (IStabilityPoolBase);\\n\\n  function arbitragePool() external view returns (address);\\n\\n  function getRedemptionFeeRatio(address _trove) external view returns (uint256);\\n\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) external pure returns (uint256);\\n\\n  function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n  /* state changes*/\\n  function createTrove(address _token) external returns (ITrove trove);\\n\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) external;\\n\\n  function removeTrove(address _token, address _trove) external;\\n\\n  function insertTrove(address _trove, address _newNextTrove) external;\\n\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) external;\\n\\n  function updateTotalDebt(uint256 _amount, bool _borrow) external;\\n\\n  function setStabilityPool(address _stabilityPool) external;\\n\\n  function setArbitragePool(address _arbitragePool) external;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external;\\n\\n  function increaseCollateralNative(address _trove, address _newNextTrove) external payable;\\n\\n  /* utils */\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) external;\\n\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external;\\n\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea02f3280364aeb657922582ccd3ac1e4e3a84f09695c62e1e4d19143a9667\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function approve(address, uint256) external returns (bool);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6de76ef362a5e5deeda393ed8f59d0f47b15e2adf4fa28479fd86c2f58b01cf6\",\"license\":\"MIT\"},\"contracts/original-trove-factory.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./trove-factory.sol\\\";\\n\\ncontract OriginalTroveFactory is TroveFactory {\\n  function name() public view override returns (string memory) {\\n    return \\\"Original Factory\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xd4ed48cf217a30eaf359e2eb244a0f4f22a491a89d756d751dce5121e0c378c8\",\"license\":\"UNLICENSED\"},\"contracts/trove-factory.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITroveFactory.sol\\\";\\nimport \\\"./interfaces/ITrove.sol\\\";\\nimport \\\"./interfaces/IExternalPriceFeed.sol\\\";\\nimport \\\"./interfaces/IMintableTokenOwner.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./interfaces/IFeeRecipient.sol\\\";\\nimport \\\"./interfaces/IBONQStaking.sol\\\";\\nimport \\\"./interfaces/ILiquidationPool.sol\\\";\\nimport \\\"./interfaces/IStabilityPoolBase.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\nimport \\\"./utils/BONQMath.sol\\\";\\nimport \\\"./utils/constants.sol\\\";\\n\\nabstract contract TroveFactory is UUPSUpgradeable, OwnableUpgradeable, PausableUpgradeable, Constants, ITroveFactory {\\n  using SafeERC20 for IERC20;\\n  using LinkedAddressList for LinkedAddressList.List;\\n  using BONQMath for uint256;\\n\\n  struct TroveList {\\n    uint256 totalCollateral;\\n    uint256 totalDebt;\\n    ILiquidationPool liquidationPool;\\n    LinkedAddressList.List list;\\n  }\\n\\n  struct RedemptionInfo {\\n    address collateralToken;\\n    uint256 stableCoinRedeemed;\\n    uint256 feeAmount;\\n    uint256 collateralRedeemed;\\n    uint256 stableCoinLeft;\\n    address currentTroveAddress;\\n    address lastTroveRedeemed;\\n    ITrove currentRedemptionTrove;\\n  }\\n\\n  // the trove lists must be separated by token because we want to keep the troves in order of collateralisation\\n  // ratio and the token prices do not move in tandem\\n  IStabilityPoolBase public override stabilityPool;\\n  address public override arbitragePool;\\n  mapping(address => TroveList) private _troves;\\n  IMintableTokenOwner public override tokenOwner;\\n  ITokenPriceFeed public override tokenToPriceFeed;\\n  IMintableToken public override stableCoin;\\n  // solhint-disable-next-line var-name-mixedcase\\n  IWETH public WETHContract;\\n  IFeeRecipient public override feeRecipient;\\n  uint256 public override totalDebt;\\n  address public troveImplementation;\\n\\n  event TroveImplementationSet(address previousImplementation, address newImplementation);\\n  event NewTrove(address trove, address token, address owner);\\n  event TroveRemoved(address trove);\\n  event TroveLiquidated(\\n    address trove,\\n    address collateralToken,\\n    uint256 priceAtLiquidation,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  );\\n  event TroveInserted(address token, address trove, address referenceTrove, bool before);\\n\\n  event CollateralUpdate(address token, uint256 totalCollateral);\\n  event DebtUpdate(address collateral, uint256 totalDebt);\\n  event Redemption(\\n    address token,\\n    uint256 stableAmount,\\n    uint256 tokenAmount,\\n    uint256 stableUnspent,\\n    uint256 startBaseRate,\\n    uint256 finishBaseRate,\\n    address lastTroveRedeemed\\n  );\\n  event TroveCollateralUpdate(address trove, address token, uint256 newAmount, uint256 newCollateralization);\\n  event TroveDebtUpdate(\\n    address trove,\\n    address actor,\\n    address token,\\n    uint256 newAmount,\\n    uint256 baseRate,\\n    uint256 newCollateralization,\\n    uint256 feePaid\\n  );\\n\\n  constructor() {\\n    // to prevent contract implementation to be reinitialized by someone else\\n    _disableInitializers();\\n  }\\n\\n  modifier troveExists(address _token, address _trove) {\\n    require(containsTrove(_token, _trove), \\\"f9fac the trove has not been created by the factory\\\");\\n    _;\\n  }\\n\\n  // solhint-disable-next-line func-visibility\\n  function initialize(address _stableCoin, address _feeRecipient) public initializer {\\n    __Ownable_init();\\n    __Pausable_init();\\n    stableCoin = IMintableToken(_stableCoin);\\n    feeRecipient = IFeeRecipient(_feeRecipient);\\n    stableCoin.approve(address(feeRecipient), BONQMath.MAX_INT);\\n  }\\n\\n  /// @dev make the contract upgradeable by its owner\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  function name() public view virtual returns (string memory);\\n\\n  /**\\n   * @dev returns the number of troves for specific token\\n   */\\n  function troveCount(address _token) public view override returns (uint256) {\\n    return _troves[_token].list._size;\\n  }\\n\\n  /**\\n   * @dev returns the last trove by maximum collaterization ratio\\n   */\\n  function lastTrove(address _token) public view override returns (address) {\\n    return _troves[_token].list._last;\\n  }\\n\\n  /**\\n   * @dev returns the first trove by minimal collaterization ratio\\n   */\\n  function firstTrove(address _token) public view override returns (address) {\\n    return _troves[_token].list._first;\\n  }\\n\\n  /**\\n   * @dev returns the next trove by collaterization ratio\\n   */\\n  function nextTrove(address _token, address _trove) public view override returns (address) {\\n    return _troves[_token].list._values[_trove].next;\\n  }\\n\\n  /**\\n   * @dev returns the previous trove by collaterization ratio\\n   */\\n  function prevTrove(address _token, address _trove) public view override returns (address) {\\n    return _troves[_token].list._values[_trove].prev;\\n  }\\n\\n  /**\\n   * @dev returns and checks if such trove exists for this token\\n   */\\n  function containsTrove(address _token, address _trove) public view override returns (bool) {\\n    return _troves[_token].list._values[_trove].next != address(0x0);\\n  }\\n\\n  /**\\n   * @dev returns total collateral among all troves for specific token\\n   */\\n  function totalCollateral(address _token) public view override returns (uint256) {\\n    return _troves[_token].totalCollateral;\\n  }\\n\\n  /**\\n   * @dev returns total debt among all troves for specific token\\n   */\\n  function totalDebtForToken(address _token) public view override returns (uint256) {\\n    return _troves[_token].totalDebt;\\n  }\\n\\n  /**\\n   * @dev returns total collateral ratio averaged between troves for specific token\\n   */\\n  function tokenCollateralization(address _token) public view returns (uint256) {\\n    return (_troves[_token].totalCollateral * DECIMAL_PRECISION) / _troves[_token].totalDebt;\\n  }\\n\\n  /**\\n   * @dev returns contract address of LiquidationPool for specific token\\n   */\\n  function liquidationPool(address _token) public view override returns (ILiquidationPool) {\\n    return _troves[_token].liquidationPool;\\n  }\\n\\n  /// @dev calculates redemption fee from CR\\n  /// @param _collateralRatio collateral ratio of the trove\\n  /// @param _mcr minimal collateral ratio of the trove\\n  /// @return uint256 resulting fee\\n  function _getRedemptionFeeRatio(uint256 _collateralRatio, uint256 _mcr) private pure returns (uint256) {\\n    uint256 extraCR = (_collateralRatio - _mcr).min(_mcr * 15);\\n    uint256 a = (((extraCR * extraCR) / _mcr) * DECIMAL_PRECISION) / _mcr;\\n    uint256 b = _mcr * 45 - DECIMAL_PRECISION * 44;\\n    uint256 tmpMin = (PERCENT10 * DECIMAL_PRECISION) / b;\\n    uint256 minFee = tmpMin > PERCENT ? tmpMin - PERCENT_05 : PERCENT_05;\\n\\n    return (a * DECIMAL_PRECISION) / b + minFee;\\n  }\\n\\n  /**\\n   * @dev returns fee from redeeming the amount\\n   */\\n  function getRedemptionFeeRatio(address _trove) public view override returns (uint256) {\\n    address collateral = address(ITrove(_trove).token());\\n    ITokenPriceFeed ttpf = tokenToPriceFeed;\\n    uint256 ratio = _getRedemptionFeeRatio(ITrove(_trove).collateralization(), ttpf.mcr(collateral));\\n    return ratio.min(ttpf.mrf(collateral));\\n  }\\n\\n  /**\\n   * @dev returns fee from redeeming the amount\\n   */\\n  function getRedemptionFee(uint256 _feeRatio, uint256 _amount) public pure override returns (uint256) {\\n    return (_amount * _feeRatio) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev returns amount to be used in redemption excluding fee,\\n   */\\n  function getRedemptionAmount(uint256 _feeRatio, uint256 _amount) public pure returns (uint256) {\\n    return (_amount * DECIMAL_PRECISION) / (DECIMAL_PRECISION + _feeRatio);\\n  }\\n\\n  /**\\n   * @dev returns fee from borrowing the amount\\n   */\\n  function getBorrowingFee(uint256 _amount) public view override returns (uint256) {\\n    return feeRecipient.getBorrowingFee(_amount);\\n  }\\n\\n  function setTroveImplementation(address _troveImplementation) public onlyOwner {\\n    emit TroveImplementationSet(troveImplementation, _troveImplementation);\\n    troveImplementation = _troveImplementation;\\n  }\\n\\n  /**\\n   * @dev sets address of the contract for stableCoin issuance\\n   */\\n  function setTokenOwner() public onlyOwner {\\n    IMintableToken stableCoin_cached = stableCoin;\\n    tokenOwner = IMintableTokenOwner(address(stableCoin_cached.owner()));\\n    require(tokenOwner.token() == stableCoin_cached, \\\"41642 the StableCoin must be owned by the token owner\\\");\\n    require(tokenOwner.owner() == address(this), \\\"41642 this contract must be the owner of the token owner\\\");\\n  }\\n\\n  /**\\n   * @dev sets contract address of FeeRecipient\\n   */\\n  function setFeeRecipient(address _feeRecipient) public onlyOwner {\\n    feeRecipient = IFeeRecipient(_feeRecipient);\\n    stableCoin.approve(address(feeRecipient), BONQMath.MAX_INT);\\n  }\\n\\n  /**\\n   * @dev sets contract address of TokenPriceFeed\\n   */\\n  function setTokenPriceFeed(address _tokenPriceFeed) public onlyOwner {\\n    tokenToPriceFeed = ITokenPriceFeed(_tokenPriceFeed);\\n  }\\n\\n  /**\\n   * @dev sets contract address of LiquidationPool for specific token\\n   */\\n  function setLiquidationPool(address _token, address _liquidationPool) public onlyOwner {\\n    _troves[_token].liquidationPool = ILiquidationPool(_liquidationPool);\\n  }\\n\\n  /**\\n   * @dev sets contract address of StabilityPool\\n   */\\n  function setStabilityPool(address _stabilityPool) external override onlyOwner {\\n    stabilityPool = IStabilityPoolBase(_stabilityPool);\\n  }\\n\\n  /**\\n   * @dev sets contract address of ArbitragePool\\n   */\\n  function setArbitragePool(address _arbitragePool) external override onlyOwner {\\n    arbitragePool = _arbitragePool;\\n  }\\n\\n  /**\\n   * @dev sets contract address of Wrapped native token, along with liquidationPool\\n   */\\n  // solhint-disable-next-line var-name-mixedcase\\n  function setWETH(address _WETH, address _liquidationPool) external override onlyOwner {\\n    require(address(WETHContract) == address(0x0), \\\"cd9f3 WETH can only be set once\\\");\\n    WETHContract = IWETH(_WETH);\\n    setLiquidationPool(_WETH, _liquidationPool);\\n  }\\n\\n  /**\\n   * @dev transfers contract ownership\\n   * this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the\\n   * ownership of the TokenOwner contract and the new TroveFactory is able to add minters\\n   */\\n  function transferTokenOwnership(address _newOwner) public onlyOwner {\\n    tokenOwner.transferTokenOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev transfers contract ownership\\n   * this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the\\n   * ownership of the TokenOwner contract and the new TroveFactory is able to add minters\\n   */\\n  function transferTokenOwnerOwnership(address _newOwner) public onlyOwner {\\n    tokenOwner.transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev toggles the pause state of the contract\\n   * if the contract is paused borrowing is disabled\\n   * and liquidation with Stability Pool is impossible (Community liquidations still allowed)\\n   */\\n  function togglePause() public onlyOwner {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n\\n  /**\\n   * @dev function to be called from trove to update total collateral value of all troves of this tokens\\n   * @param _increase bool that indicates \\\"+\\\" or \\\"-\\\" operation\\n   */\\n  function updateTotalCollateral(\\n    address _token,\\n    uint256 _amount,\\n    bool _increase\\n  ) public override troveExists(_token, msg.sender) {\\n    if (_increase) {\\n      _troves[_token].totalCollateral += _amount;\\n    } else {\\n      _troves[_token].totalCollateral -= _amount;\\n    }\\n    emit CollateralUpdate(_token, _troves[_token].totalCollateral);\\n  }\\n\\n  /**\\n   * @dev deposits native token into trove after wrapping the ETH (EWT, AVAX, etc) into WETH (WEWT, WAVAX, etc)\\n   * @param _trove tove to be deposited in\\n   * @param _newNextTrove hint for next trove position\\n   */\\n  function increaseCollateralNative(address _trove, address _newNextTrove) public payable override {\\n    ITrove targetTrove = ITrove(_trove);\\n    IWETH WETHContract_cached = WETHContract;\\n    require(address(targetTrove.token()) == address(WETHContract_cached), \\\"b8282 not a valid trove\\\");\\n    WETHContract_cached.deposit{value: msg.value}();\\n    require(WETHContract.transfer(_trove, msg.value), \\\"b8282 could not transfer the requested amount\\\");\\n    targetTrove.increaseCollateral(0, _newNextTrove);\\n  }\\n\\n  /**\\n   * @dev creates a trove if the token is supported\\n   * @param _token any supported token address\\n   */\\n  function createTrove(address _token) public override returns (ITrove trove) {\\n    IMintableTokenOwner tokenOwner_cached = tokenOwner;\\n    // troves can only be created after the token owner has been set. This is a safety check not security\\n    require(address(tokenOwner_cached) != address(0x0), \\\"66c10 the token owner must be set\\\");\\n    require(tokenOwner_cached.owner() == address(this), \\\"66c10 the token owner's owner must be the trove factory\\\");\\n    // a token without a price feed has a CR of zero and is useless\\n    require(tokenToPriceFeed.tokenPriceFeed(_token) != address(0x0), \\\"66c10 the token price feed must be set\\\");\\n    address troveAddress;\\n    // reassign because state variables can not be used in mstore\\n    address _troveImplementation = troveImplementation;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, _troveImplementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      troveAddress := create(0, ptr, 0x37)\\n    }\\n    require(troveAddress != address(0), \\\"ERC1167: create failed\\\");\\n\\n    trove = ITrove(troveAddress);\\n    //    trove.initialize(address(this), _token, msg.sender);\\n    trove.initialize(_token, msg.sender);\\n\\n    require(_troves[_token].list.add(troveAddress, address(0x0), false), \\\"66c10 trove could not be added to the list\\\");\\n    //allow the trove to transfer from the liquidation pool\\n    _troves[_token].liquidationPool.approveTrove(troveAddress);\\n    // allow the trove to mint stableCoin\\n    tokenOwner_cached.addMinter(troveAddress);\\n\\n    emit NewTrove(troveAddress, _token, msg.sender);\\n  }\\n\\n  /**\\n   * @dev creates a trove with collateral and borrows from it\\n   * @param _token any supported token address\\n   * @param _collateralAmount a positive amount of collateral to transfer from the sender's account or zero\\n   * @param _recipient is the address to which the newly minted tokens will be transferred\\n   * @param _borrowAmount the value of the minting\\n   * @param _nextTrove is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions\\n   */\\n  function createTroveAndBorrow(\\n    address _token,\\n    uint256 _collateralAmount,\\n    address _recipient,\\n    uint256 _borrowAmount,\\n    address _nextTrove\\n  ) public override {\\n    ITrove trove = createTrove(_token);\\n    IERC20(_token).safeTransferFrom(msg.sender, address(trove), _collateralAmount);\\n    trove.increaseCollateral(0, address(0));\\n    if (_borrowAmount >= DECIMAL_PRECISION) trove.borrow(_recipient, _borrowAmount, _nextTrove);\\n  }\\n\\n  /**\\n   * @dev remove a trove from the list and send any remaining token balance to the owner\\n   * @param _trove is the trove which will be removed\\n   */\\n  function removeTrove(address _token, address _trove) public override troveExists(_token, _trove) {\\n    ITrove trove = ITrove(_trove);\\n    require(\\n      trove.owner() == msg.sender || _trove == msg.sender,\\n      \\\"173fa only the owner can remove the trove from the list\\\"\\n    );\\n    require(trove.debt() == 0, \\\"173fa repay the debt before removing the trove\\\");\\n    IERC20 token = IERC20(trove.token());\\n    trove.setArbitrageParticipation(false);\\n    uint256 tokenBalance = token.balanceOf(_trove);\\n\\n    if (tokenBalance > 0) {\\n      // we can safely decrease the balance to zero with a newNextTrove of 0x0 because the debt is zero and\\n      // insertTrove will not be called\\n      // the collateral should be sent to the owner\\n      // TODO: add test for this case\\n      trove.decreaseCollateral(trove.owner(), tokenBalance, address(0x0));\\n    }\\n    require(_troves[_token].list.remove(_trove), \\\"173fa trove could not be removed from the list\\\");\\n    tokenOwner.revokeMinter(_trove);\\n    _troves[_token].liquidationPool.unapproveTrove(_trove);\\n    emit TroveRemoved(_trove);\\n  }\\n\\n  /**\\n   * @dev insert a trove in the sorted list of troves. the troves must be sorted by collateralisation ratio CR\\n   * the sender must be the trove which will be inserted in the list\\n   * @param _newNextTrove is the trove before which the trove will be added\\n   */\\n  function insertTrove(address _token, address _newNextTrove) public override troveExists(_token, msg.sender) {\\n    require(\\n      containsTrove(_token, _newNextTrove) || _newNextTrove == address(0),\\n      \\\"3a669 the trove hint must exist in the list or be 0x0\\\"\\n    );\\n\\n    // if now hint is provided we start by trying the last trove in the list\\n    if (_newNextTrove == address(0)) {\\n      _newNextTrove = lastTrove(_token);\\n    }\\n\\n    // if the NewNextTrove is the same as the trove being changed, then it should be changed to the trove's nextTrove\\n    // unless the trove is the lastTrove in which case it is changed to the previousTrove\\n    // insertTrove is never called if there is only one trove in the list\\n    if (_newNextTrove == msg.sender) {\\n      address nextTroveAddress = nextTrove(_token, _newNextTrove);\\n      // the lastTrove has itself as the nextTrove\\n      _newNextTrove = _newNextTrove != nextTroveAddress ? nextTroveAddress : prevTrove(_token, _newNextTrove);\\n    }\\n\\n    ITrove trove = ITrove(msg.sender);\\n    ITrove ref = ITrove(_newNextTrove);\\n    bool insertBefore = true;\\n\\n    // first remove the trove from the list to avoid trying to insert it before or after itself\\n    require(_troves[_token].list.remove(address(trove)), \\\"3a669 trove could not be removed from the list\\\");\\n    if (trove.debt() == 0) {\\n      // troves with zero debt have infinite collateralisation and can be put safely at the end of the list\\n      require(\\n        _troves[_token].list.add(address(trove), address(0x0), false),\\n        \\\"3a669 trove could not be inserted in the list\\\"\\n      );\\n      emit TroveInserted(_token, address(trove), address(0x0), false);\\n    } else {\\n      uint256 icr = trove.collateralization();\\n      uint256 refIcr = ref.collateralization();\\n\\n      if (refIcr >= icr) {\\n        // if the first trove in the list has a bigger CR then this trove becomes the new first trove. No loop required\\n        if (_newNextTrove != firstTrove(_token)) {\\n          do {\\n            // the previous trove of the new next trove should have a smaller or equal CR to the inserted trove\\n            // it is cheaper (in gas) to assign the reference to the previous trove and insert after than to check twice for the CR\\n            // this is why the loop is a \\\"do while\\\" instead of a \\\"while do\\\"\\n            ref = ITrove(prevTrove(_token, address(ref)));\\n            refIcr = ref.collateralization();\\n          } while (refIcr > icr && address(ref) != _troves[_token].list._first);\\n        }\\n      }\\n      // the ICR of the newNextTrove is smaller than the inserted trove's\\n      else {\\n        // only loop through the troves if the newNextTrove is not the last\\n        if (_newNextTrove != lastTrove(_token)) {\\n          do {\\n            // the previous trove of the new next trove should have a smaller or equal CR to the inserted trove\\n            ref = ITrove(nextTrove(_token, address(ref)));\\n            refIcr = ref.collateralization();\\n          } while (refIcr < icr && address(ref) != _troves[_token].list._last);\\n        }\\n      }\\n\\n      insertBefore = refIcr > icr;\\n\\n      require(\\n        _troves[_token].list.add(address(trove), address(ref), insertBefore),\\n        \\\"3a669 trove could not be inserted in the list\\\"\\n      );\\n      emit TroveInserted(_token, address(trove), address(ref), insertBefore);\\n    }\\n  }\\n\\n  /**\\n   * @dev redeem all collateral the trove can provide\\n   * @param _recipient is the trove _recipient to redeem colateral to and take stableCoin from\\n   */\\n  function _redeemFullTrove(address _recipient, address _trove)\\n    internal\\n    returns (uint256 _stableAmount, uint256 _collateralRecieved)\\n  {\\n    return _redeemPartTrove(_recipient, _trove, ITrove(_trove).netDebt(), address(0));\\n  }\\n\\n  /**\\n    @dev redeem collateral from the tove to fit desired stableCoin amount\\n    @param _recipient is the trove _recipient to redeem colateral to and take stableCoin from\\n    @param _stableAmount the desired amount of StableCoin to pay for redemption\\n    @param _newNextTrove hint for the of the nextNewTrove after redemption\\n    */\\n  function _redeemPartTrove(\\n    address _recipient,\\n    address _trove,\\n    uint256 _stableAmount,\\n    address _newNextTrove\\n  ) internal returns (uint256 stableAmount, uint256 collateralRecieved) {\\n    ITrove trove = ITrove(_trove);\\n    stableCoin.transferFrom(_recipient, _trove, _stableAmount);\\n    return trove.redeem(_recipient, _newNextTrove);\\n  }\\n\\n  /**\\n   * @dev commits full redemptions until troves liquidity is less\\n   */\\n  function commitFullRedemptions(RedemptionInfo memory _redInfo, uint256 _maxRate)\\n    internal\\n    returns (RedemptionInfo memory)\\n  {\\n    ITrove currentRedemptionTrove = ITrove(_redInfo.currentTroveAddress);\\n    uint256 currentFeeRatio = getRedemptionFeeRatio(_redInfo.currentTroveAddress) + feeRecipient.baseRate();\\n    uint256 amountStableLeft = getRedemptionAmount(currentFeeRatio, _redInfo.stableCoinLeft);\\n    while (\\n      0 < currentRedemptionTrove.netDebt() &&\\n      currentRedemptionTrove.netDebt() <= amountStableLeft &&\\n      currentFeeRatio < _maxRate\\n    ) {\\n      _redInfo = commitFullRedeem(_redInfo, currentFeeRatio);\\n      currentFeeRatio = getRedemptionFeeRatio(_redInfo.currentTroveAddress);\\n      amountStableLeft = getRedemptionAmount(currentFeeRatio, _redInfo.stableCoinLeft);\\n      currentRedemptionTrove = ITrove(_redInfo.currentTroveAddress);\\n    }\\n    return _redInfo;\\n  }\\n\\n  /**\\n   * @dev commits full redemption for the current trove, should be called after checks\\n   */\\n  function commitFullRedeem(RedemptionInfo memory _redInfo, uint256 _currentFeeRatio)\\n    internal\\n    returns (RedemptionInfo memory)\\n  {\\n    address nextTroveAddress = nextTrove(_redInfo.collateralToken, _redInfo.currentTroveAddress);\\n    (uint256 stblRed, uint256 colRed) = _redeemFullTrove(msg.sender, _redInfo.currentTroveAddress);\\n\\n    _redInfo.stableCoinRedeemed += stblRed;\\n    uint256 newFee = getRedemptionFee(_currentFeeRatio, stblRed);\\n    _redInfo.feeAmount += newFee;\\n    _redInfo.stableCoinLeft -= stblRed + newFee;\\n    _redInfo.collateralRedeemed += colRed;\\n    _redInfo.lastTroveRedeemed = _redInfo.currentTroveAddress;\\n    _redInfo.currentTroveAddress = nextTroveAddress;\\n    return _redInfo;\\n  }\\n\\n  /**\\n   * @dev check if the Trove guessed ICR matches and commits partial redemptios\\n   */\\n  function commitPartRedeem(\\n    RedemptionInfo memory _redInfo,\\n    uint256 _maxRate,\\n    uint256 _lastTroveCurrentICR,\\n    address _lastTroveNewPositionHint\\n  ) internal returns (RedemptionInfo memory) {\\n    ITrove currentRedemptionTrove = ITrove(_redInfo.currentTroveAddress);\\n    uint256 currentFeeRatio = getRedemptionFeeRatio(_redInfo.currentTroveAddress) + feeRecipient.baseRate();\\n    if (currentRedemptionTrove.collateralization() == _lastTroveCurrentICR && currentFeeRatio < _maxRate) {\\n      uint256 maxLastRedeem = BONQMath.min(\\n        getRedemptionAmount(currentFeeRatio, _redInfo.stableCoinLeft),\\n        currentRedemptionTrove.netDebt()\\n      );\\n      (uint256 stblRed, uint256 colRed) = _redeemPartTrove(\\n        msg.sender,\\n        _redInfo.currentTroveAddress,\\n        maxLastRedeem,\\n        _lastTroveNewPositionHint\\n      );\\n      _redInfo.stableCoinRedeemed += stblRed;\\n      uint256 newFee = getRedemptionFee(currentFeeRatio, stblRed);\\n      _redInfo.feeAmount += newFee;\\n      _redInfo.stableCoinLeft -= stblRed + newFee;\\n      _redInfo.collateralRedeemed += colRed;\\n      _redInfo.lastTroveRedeemed = _redInfo.currentTroveAddress;\\n    }\\n    return _redInfo;\\n  }\\n\\n  /**\\n   * @dev redeem desired StableCoin amount for desired collateral tokens\\n   * @param _stableAmount the desired amount of StableCoin to pay for redemption\\n   * @param _maxRate is max fee (in % with 1e18 precision) allowed to pay\\n   * @param _lastTroveCurrentICR ICR of the last trove to be redeemed, if matches then the hint is working and it redeems\\n   * @param _lastTroveNewPositionHint hint for the of the nextNewTrove after redemption for the latest trove\\n   */\\n  function redeemStableCoinForCollateral(\\n    address _collateralToken,\\n    uint256 _stableAmount,\\n    uint256 _maxRate,\\n    uint256 _lastTroveCurrentICR,\\n    address _lastTroveNewPositionHint\\n  ) public {\\n    IMintableToken stableCoin_cached = stableCoin;\\n    require(\\n      ITrove(firstTrove(_collateralToken)).collateralization() > DECIMAL_PRECISION,\\n      \\\"a7f99 first trove is undercollateralised and must be liquidated\\\"\\n    );\\n    require(stableCoin_cached.balanceOf(msg.sender) >= _stableAmount, \\\"a7f99 insufficient Fiat balance\\\");\\n    require(\\n      stableCoin_cached.allowance(msg.sender, address(this)) >= _stableAmount,\\n      \\\"a7f99 StableCoin is not approved for factory\\\"\\n    );\\n\\n    IFeeRecipient feeRecipient_cache = feeRecipient;\\n    RedemptionInfo memory redInfo;\\n    redInfo.collateralToken = _collateralToken;\\n    redInfo.stableCoinLeft = _stableAmount;\\n\\n    redInfo.currentTroveAddress = firstTrove(_collateralToken);\\n    redInfo = commitFullRedemptions(redInfo, _maxRate);\\n    redInfo = commitPartRedeem(redInfo, _maxRate, _lastTroveCurrentICR, _lastTroveNewPositionHint);\\n    if (redInfo.collateralRedeemed > 0) {\\n      stableCoin_cached.transferFrom(msg.sender, address(this), redInfo.feeAmount);\\n      feeRecipient_cache.takeFees(redInfo.feeAmount);\\n\\n      // TODO: increase base rate after each trove redemption\\n      uint256 startBaseRate = feeRecipient_cache.baseRate();\\n      uint256 finishBaseRate = feeRecipient_cache.increaseBaseRate(\\n        (redInfo.stableCoinRedeemed * DECIMAL_PRECISION) / stableCoin_cached.totalSupply()\\n      );\\n      emit Redemption(\\n        _collateralToken,\\n        redInfo.stableCoinRedeemed,\\n        redInfo.collateralRedeemed,\\n        redInfo.stableCoinLeft,\\n        startBaseRate,\\n        finishBaseRate,\\n        redInfo.lastTroveRedeemed\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev function to be called from trove to change totalDebt\\n   * @param _borrow indicates if it is borrow or repay/liquidatin\\n   */\\n  function updateTotalDebt(uint256 _amount, bool _borrow) public override {\\n    ITrove trove = ITrove(msg.sender);\\n    address token = address(trove.token());\\n    require(containsTrove(token, msg.sender), \\\"fbfd5 not a valid trove\\\");\\n    if (_borrow) {\\n      totalDebt += _amount;\\n      _troves[token].totalDebt += _amount;\\n    } else {\\n      totalDebt -= _amount;\\n      _troves[token].totalDebt -= _amount;\\n    }\\n    emit DebtUpdate(token, totalDebt);\\n  }\\n\\n  /// @dev to emit Liquidation event, to be called from a trove after liquidation.\\n  /// @param  _token address of token\\n  /// @param  _trove address of the Trove\\n  /// @param  stabilityPoolLiquidation address of StabilityPool, 0x0 if Community LiquidationPool\\n  /// @param  collateral uint256 amount of collateral\\n  function emitLiquidationEvent(\\n    address _token,\\n    address _trove,\\n    address stabilityPoolLiquidation,\\n    uint256 collateral\\n  ) public override {\\n    emit TroveLiquidated(_trove, _token, tokenToPriceFeed.tokenPrice(_token), stabilityPoolLiquidation, collateral);\\n  }\\n\\n  /// @dev to emit Trove's debt update event, to be called from trove\\n  /// @param  _token address of token\\n  /// @param  _newAmount new trove's debt value\\n  /// @param  _newCollateralization new trove's collateralization value\\n  function emitTroveDebtUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization,\\n    uint256 _feePaid\\n  ) external override {\\n    emit TroveDebtUpdate(\\n      address(msg.sender), // solhint-disable-next-line avoid-tx-origin\\n      address(tx.origin),\\n      _token,\\n      _newAmount,\\n      feeRecipient.baseRate(),\\n      _newCollateralization,\\n      _feePaid\\n    );\\n  }\\n\\n  /// @dev to emit Collateral update event, to be called from trove\\n  /// @param  _token address of token\\n  /// @param  _newAmount new trove's Collateral value\\n  /// @param  _newCollateralization new trove's collateralization value\\n  function emitTroveCollateralUpdate(\\n    address _token,\\n    uint256 _newAmount,\\n    uint256 _newCollateralization\\n  ) external override {\\n    emit TroveCollateralUpdate(address(msg.sender), _token, _newAmount, _newCollateralization);\\n  }\\n}\\n\",\"keccak256\":\"0x4ab552ea5226ea3d7d9492e9b6a590f2b5ecb4c0bc62a501b2b58698e7e16d79\",\"license\":\"UNLICENSED\"},\"contracts/utils/BONQMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary BONQMath {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\n  /// @dev return the smaller of two numbers\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @dev return the bigger of two numbers\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Multiply two decimal numbers and use normal rounding rules:\\n   *  -round product up if 19'th mantissa digit >= 5\\n   *  -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n    uint256 prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /**\\n   * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by function that represent time in units of minutes:\\n   * 1) IFeeRecipient.calcDecayedBaseRate\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   * @param _base number to exponentially increase\\n   * @param _minutes power in minutes passed\\n   */\\n  function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint256 y = DECIMAL_PRECISION;\\n    uint256 x = _base;\\n    uint256 n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n}\\n\",\"keccak256\":\"0x0a20a2bf799abe4603a95b343d4d701c0884a57fb61951354dcb7a06075fb0ab\",\"license\":\"MIT\"},\"contracts/utils/constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n  uint256 public constant BORROWING_RATE = PERCENT_05;\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n}\\n\",\"keccak256\":\"0x6a665a01a9a7f729c66450e6b996c07ac47009851acacc6fcb11eb974ef20b5c\",\"license\":\"MIT\"},\"contracts/utils/linked-address-list.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n/// @title implements LinkedList structure used to store/operate sorted Troves\\nlibrary LinkedAddressList {\\n  struct EntryLink {\\n    address prev;\\n    address next;\\n  }\\n\\n  struct List {\\n    address _last;\\n    address _first;\\n    uint256 _size;\\n    mapping(address => EntryLink) _values;\\n  }\\n\\n  function add(\\n    List storage _list,\\n    address _element,\\n    address _reference,\\n    bool _before\\n  ) internal returns (bool) {\\n    require(\\n      _reference == address(0x0) || _list._values[_reference].next != address(0x0),\\n      \\\"79d3d _ref neither valid nor 0x\\\"\\n    );\\n    // the lement must not exist in order to be added\\n    EntryLink storage element_values = _list._values[_element];\\n    if (element_values.prev == address(0x0)) {\\n      // the list is empty\\n      if (_list._last == address(0x0)) {\\n        // if it is the first element in the list, it refers to itself to indicate this\\n        element_values.prev = _element;\\n        element_values.next = _element;\\n        // the new element is now officially the first\\n        _list._first = _element;\\n        // the new element is now officially the last\\n        _list._last = _element;\\n      } else {\\n        if (_before && (_reference == address(0x0) || _reference == _list._first)) {\\n          // the element should be added as the first element\\n          address first = _list._first;\\n          _list._values[first].prev = _element;\\n          element_values.prev = _element;\\n          element_values.next = first;\\n          _list._first = _element;\\n        } else if (!_before && (_reference == address(0x0) || _reference == _list._last)) {\\n          // the element should be added as the last element\\n          address last = _list._last;\\n          _list._values[last].next = _element;\\n          element_values.prev = last;\\n          element_values.next = _element;\\n          _list._last = _element;\\n        } else {\\n          // the element should be inserted in between two elements\\n          EntryLink memory ref = _list._values[_reference];\\n          if (_before) {\\n            element_values.prev = ref.prev;\\n            element_values.next = _reference;\\n            _list._values[_reference].prev = _element;\\n            _list._values[ref.prev].next = _element;\\n          } else {\\n            element_values.prev = _reference;\\n            element_values.next = ref.next;\\n            _list._values[_reference].next = _element;\\n            _list._values[ref.next].prev = _element;\\n          }\\n        }\\n      }\\n      _list._size = _list._size + 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function remove(List storage _list, address _element) internal returns (bool) {\\n    EntryLink memory element_values = _list._values[_element];\\n    if (element_values.next != address(0x0)) {\\n      if (_element == _list._last && _element == _list._first) {\\n        // it is the last element in the list\\n        delete _list._last;\\n        delete _list._first;\\n      } else if (_element == _list._first) {\\n        // simplified process for removing the first element\\n        address next = element_values.next;\\n        _list._values[next].prev = next;\\n        _list._first = next;\\n      } else if (_element == _list._last) {\\n        // simplified process for removing the last element\\n        address new_list_last = element_values.prev;\\n        _list._last = new_list_last;\\n        _list._values[new_list_last].next = new_list_last;\\n      } else {\\n        // set the previous and next to point to each other\\n        address next = element_values.next;\\n        address prev = element_values.prev;\\n        _list._values[next].prev = prev;\\n        _list._values[prev].next = next;\\n      }\\n      // in any case, delete the element itself\\n      delete _list._values[_element];\\n      _list._size = _list._size - 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x9bbd42a2ad94c5f6f56ddc3919b77ef6bafa3a2bc2ebab762d520739558a7ddf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103ac5760003560e01c806379a71baf116101e7578063abdc55411161010d578063c7089e43116100a0578063e74b981b1161006f578063e74b981b14610b03578063e7b3615414610b23578063f2fde38b14610b43578063fc7b9c1814610b6357600080fd5b8063c7089e4314610a67578063ddc0e55414610a87578063deb44c8814610ac3578063e04a3e9014610ae357600080fd5b8063b85a8b20116100dc578063b85a8b20146109fc578063c11aeb3914610a11578063c4ae316814610a32578063c531b26614610a4757600080fd5b8063abdc5541146109b2578063aceb2d04146106a8578063ad09014d146109c7578063b3d5e0ce146109dc57600080fd5b8063914a1ac91161018557806398d721e01161015457806398d721e014610951578063992642e514610971578063a20baee6146108dc578063a3e676101461099257600080fd5b8063914a1ac9146108bb578063923c1eec146108dc57806393857395146108f85780639723ee601461091857600080fd5b806381519ef4116101c157806381519ef41461083d578063822505271461085d57806385ad91751461087d5780638da5cb5b1461089d57600080fd5b806379a71baf146107c75780637e059b22146107e757806380b0dcc91461081d57600080fd5b80633f6e0719116102d757806352d1902d1161026a57806365d7ddc41161023957806365d7ddc4146107365780636757634d1461075657806369e5e6e014610776578063715018a6146107b257600080fd5b806352d1902d146106bd57806356e71857146106d25780635c975abb146106f2578063631203b01461071657600080fd5b80634d31a2af116102a65780634d31a2af146106555780634e2f663c146106755780634f1ef28614610695578063517ef1d7146106a857600080fd5b80633f6e0719146105e15780634690484014610601578063485cc955146106225780634a7402fb1461064257600080fd5b806321e6b53d1161034f5780633659cfe61161031e5780633659cfe6146105615780633a297fd8146105815780633e78cf73146105a15780633eebf7b9146105c157600080fd5b806321e6b53d146104e157806328a0e71b146105015780632aaed16a146105215780632bcf77411461054157600080fd5b8063098d32281161038b578063098d32281461044f5780630f2f114614610473578063142af9a21461049357806314ac36d1146104cc57600080fd5b80621bed28146103b1578063048c661d146103d357806306fdde0314610410575b600080fd5b3480156103bd57600080fd5b506103d16103cc366004614e19565b610b7a565b005b3480156103df57600080fd5b5060fb546103f3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561041c57600080fd5b50604080518082018252601081526f4f726967696e616c20466163746f727960801b602082015290516104079190614e76565b34801561045b57600080fd5b5061046560001981565b604051908152602001610407565b34801561047f57600080fd5b5061046561048e366004614ea9565b611151565b34801561049f57600080fd5b506104656104ae366004614ecb565b6001600160a01b0316600090815260fd602052604090206001015490565b3480156104d857600080fd5b506103d1611179565b3480156104ed57600080fd5b506103d16104fc366004614ecb565b6113d3565b34801561050d57600080fd5b506103d161051c366004614ee8565b61143e565b34801561052d57600080fd5b506103d161053c366004614ecb565b61150f565b34801561054d57600080fd5b506103d161055c366004614ecb565b611539565b34801561056d57600080fd5b506103d161057c366004614ecb565b6115ac565b34801561058d57600080fd5b5060fc546103f3906001600160a01b031681565b3480156105ad57600080fd5b506103d16105bc366004614ecb565b611688565b3480156105cd57600080fd5b506104656105dc366004614ea9565b6116b2565b3480156105ed57600080fd5b506103f36105fc366004614ecb565b6116d8565b34801561060d57600080fd5b50610102546103f3906001600160a01b031681565b34801561062e57600080fd5b506103d161063d366004614e19565b6116f9565b6103d1610650366004614e19565b6118b1565b34801561066157600080fd5b50610465610670366004614ecb565b611b14565b34801561068157600080fd5b506103d1610690366004614ecb565b611b50565b6103d16106a3366004614f4f565b611b8a565b3480156106b457600080fd5b50610465611c5a565b3480156106c957600080fd5b50610465611c88565b3480156106de57600080fd5b506103d16106ed366004614e19565b611d3b565b3480156106fe57600080fd5b5060c95460ff165b6040519015158152602001610407565b34801561072257600080fd5b50610465610731366004615013565b611d74565b34801561074257600080fd5b506103d1610751366004614e19565b611de3565b34801561076257600080fd5b506103d161077136600461503a565b611e6b565b34801561078257600080fd5b506103f3610791366004614ecb565b6001600160a01b03908116600090815260fd60205260409020600301541690565b3480156107be57600080fd5b506103d1611f52565b3480156107d357600080fd5b506103d16107e236600461507c565b611f66565b3480156107f357600080fd5b50610465610802366004614ecb565b6001600160a01b0316600090815260fd602052604090205490565b34801561082957600080fd5b506103d16108383660046150b7565b61204a565b34801561084957600080fd5b506103f3610858366004614e19565b61214f565b34801561086957600080fd5b506103d1610878366004614e19565b612180565b34801561088957600080fd5b50610465610898366004614ecb565b61271b565b3480156108a957600080fd5b506097546001600160a01b03166103f3565b3480156108c757600080fd5b50610101546103f3906001600160a01b031681565b3480156108e857600080fd5b50610465670de0b6b3a764000081565b34801561090457600080fd5b5060ff546103f3906001600160a01b031681565b34801561092457600080fd5b50610465610933366004614ecb565b6001600160a01b0316600090815260fd602052604090206005015490565b34801561095d57600080fd5b506103d161096c366004614ecb565b6128f3565b34801561097d57600080fd5b50610100546103f3906001600160a01b031681565b34801561099e57600080fd5b5060fe546103f3906001600160a01b031681565b3480156109be57600080fd5b5061046561291d565b3480156109d357600080fd5b50610465612932565b3480156109e857600080fd5b506107066109f7366004614e19565b61295c565b348015610a0857600080fd5b5061046561298f565b348015610a1d57600080fd5b50610104546103f3906001600160a01b031681565b348015610a3e57600080fd5b506103d16129a4565b348015610a5357600080fd5b506103d1610a62366004615116565b6129c7565b348015610a7357600080fd5b506103f3610a82366004614e19565b612f8e565b348015610a9357600080fd5b506103f3610aa2366004614ecb565b6001600160a01b03908116600090815260fd60205260409020600201541690565b348015610acf57600080fd5b506103d1610ade36600461515e565b612fbc565b348015610aef57600080fd5b506103d1610afe366004615183565b61315e565b348015610b0f57600080fd5b506103d1610b1e366004614ecb565b6131ab565b348015610b2f57600080fd5b506103f3610b3e366004614ecb565b613244565b348015610b4f57600080fd5b506103d1610b5e366004614ecb565b613727565b348015610b6f57600080fd5b506104656101035481565b8133610b86828261295c565b610bab5760405162461bcd60e51b8152600401610ba2906151b8565b60405180910390fd5b610bb5848461295c565b80610bc757506001600160a01b038316155b610c315760405162461bcd60e51b815260206004820152603560248201527f3361363639207468652074726f76652068696e74206d757374206578697374206044820152740696e20746865206c697374206f722062652030783605c1b6064820152608401610ba2565b6001600160a01b038316610c60576001600160a01b03808516600090815260fd60205260409020600301541692505b336001600160a01b03841603610cac576000610c7c858561214f565b9050806001600160a01b0316846001600160a01b031603610ca657610ca18585612f8e565b610ca8565b805b9350505b6001600160a01b038416600090815260fd6020526040902033908490600190610cd8906003018461379d565b610d3b5760405162461bcd60e51b815260206004820152602e60248201527f33613636392074726f766520636f756c64206e6f742062652072656d6f76656460448201526d08199c9bdb481d1a19481b1a5cdd60921b6064820152608401610ba2565b826001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d919061520b565b600003610e40576001600160a01b038716600090815260fd60205260408120610dce9160039091019085908061398c565b610dea5760405162461bcd60e51b8152600401610ba290615224565b604080516001600160a01b038981168252851660208201526000818301819052606082015290517ff41ecc43fd86bebfc7d02efecacb0a49ee2df40df4ee0bc7fbe9325576c2fdd19181900360800190a1611148565b6000836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea4919061520b565b90506000836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061520b565b9050818110610fde57610f1c896116d8565b6001600160a01b0316886001600160a01b031614610fd9575b610f3f8985612f8e565b9350836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa3919061520b565b90508181118015610fd457506001600160a01b03808a16600090815260fd6020526040902060040154858216911614155b610f35575b6110aa565b6001600160a01b03898116600090815260fd60205260409020600301548982169116146110aa575b611010898561214f565b9350836001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611074919061520b565b905081811080156110a557506001600160a01b03808a16600090815260fd6020526040902060030154858216911614155b611006575b6001600160a01b038916600090815260fd6020526040902082821193506110d69060030186868661398c565b6110f25760405162461bcd60e51b8152600401610ba290615224565b604080516001600160a01b038b811682528781166020830152861681830152841515606082015290517ff41ecc43fd86bebfc7d02efecacb0a49ee2df40df4ee0bc7fbe9325576c2fdd19181900360800190a150505b50505050505050565b6000670de0b6b3a76400006111668484615287565b611170919061529e565b90505b92915050565b611181613cd5565b6101005460408051638da5cb5b60e01b815290516001600160a01b03909216918291638da5cb5b9160048083019260209291908290030181865afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f191906152c0565b60fe80546001600160a01b0319166001600160a01b0392831690811790915560408051637e062a3560e11b815290519284169263fc0c546a916004808201926020929091908290030181865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127391906152c0565b6001600160a01b0316146112e75760405162461bcd60e51b815260206004820152603560248201527f34313634322074686520537461626c65436f696e206d757374206265206f776e60448201527432b210313c903a3432903a37b5b2b71037bbb732b960591b6064820152608401610ba2565b60fe5460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135491906152c0565b6001600160a01b0316146113d05760405162461bcd60e51b815260206004820152603860248201527f3431363432207468697320636f6e7472616374206d757374206265207468652060448201527f6f776e6572206f662074686520746f6b656e206f776e657200000000000000006064820152608401610ba2565b50565b6113db613cd5565b60fe546040516321e6b53d60e01b81526001600160a01b038381166004830152909116906321e6b53d906024015b600060405180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b5050505050565b60ff546040516384ba3f6960e01b81526001600160a01b0380871660048301527f02bc4d5cd45896d0a40a3c1d56314df3d795dcd0457cfff43d579b1df4a08e309286928892909116906384ba3f6990602401602060405180830381865afa1580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d2919061520b565b604080516001600160a01b039485168152928416602084015282015290841660608201526080810183905260a0015b60405180910390a150505050565b611517613cd5565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b611541613cd5565b61010454604080516001600160a01b03928316815291831660208301527fb11f992e0256b743c656e4155a7c973abdb563505a0fe01ac94e5053aea0f225910160405180910390a161010480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115f45760405162461bcd60e51b8152600401610ba2906152dd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661163d600080516020615444833981519152546001600160a01b031690565b6001600160a01b0316146116635760405162461bcd60e51b8152600401610ba290615329565b61166c81613d2f565b604080516000808252602082019092526113d091839190613d37565b611690613cd5565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b60006116c683670de0b6b3a7640000615375565b611166670de0b6b3a764000084615287565b6001600160a01b03908116600090815260fd60205260409020600401541690565b600054610100900460ff16158080156117195750600054600160ff909116105b806117335750303b158015611733575060005460ff166001145b6117965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ba2565b6000805460ff1916600117905580156117b9576000805461ff0019166101001790555b6117c1613ea2565b6117c9613ed1565b61010080546001600160a01b038581166001600160a01b03199283168117909355610102805491861691909216811790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015611840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118649190615388565b5080156118ac576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b6101015460408051637e062a3560e11b8152905184926001600160a01b039081169283929185169163fc0c546a916004808201926020929091908290030181865afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192891906152c0565b6001600160a01b03161461197e5760405162461bcd60e51b815260206004820152601760248201527f6238323832206e6f7420612076616c69642074726f76650000000000000000006044820152606401610ba2565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156119b957600080fd5b505af11580156119cd573d6000803e3d6000fd5b50506101015460405163a9059cbb60e01b81526001600160a01b038981166004830152346024830152909116935063a9059cbb925060440190506020604051808303816000875af1158015611a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4a9190615388565b611aac5760405162461bcd60e51b815260206004820152602d60248201527f623832383220636f756c64206e6f74207472616e73666572207468652072657160448201526c1d595cdd195908185b5bdd5b9d609a1b6064820152608401610ba2565b6040516304796e1f60e31b8152600060048201526001600160a01b0384811660248301528316906323cb70f890604401600060405180830381600087803b158015611af657600080fd5b505af1158015611b0a573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116600090815260fd6020526040812060018101549054611b4690670de0b6b3a764000090615287565b611173919061529e565b611b58613cd5565b60fe5460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401611409565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611bd25760405162461bcd60e51b8152600401610ba2906152dd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c1b600080516020615444833981519152546001600160a01b031690565b6001600160a01b031614611c415760405162461bcd60e51b8152600401610ba290615329565b611c4a82613d2f565b611c5682826001613d37565b5050565b60026064611c71670de0b6b3a76400006001615287565b611c7b919061529e565b611c85919061529e565b81565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d285760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610ba2565b5060008051602061544483398151915290565b611d43613cd5565b6001600160a01b03918216600090815260fd6020526040902060020180546001600160a01b03191691909216179055565b61010254604051630631203b60e41b8152600481018390526000916001600160a01b03169063631203b090602401602060405180830381865afa158015611dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611173919061520b565b611deb613cd5565b610101546001600160a01b031615611e455760405162461bcd60e51b815260206004820152601f60248201527f636439663320574554482063616e206f6e6c7920626520736574206f6e6365006044820152606401610ba2565b61010180546001600160a01b0319166001600160a01b038416179055611c568282611d3b565b8233611e77828261295c565b611e935760405162461bcd60e51b8152600401610ba2906151b8565b8215611ecc576001600160a01b038516600090815260fd602052604081208054869290611ec1908490615375565b90915550611efa9050565b6001600160a01b038516600090815260fd602052604081208054869290611ef49084906153a5565b90915550505b6001600160a01b038516600081815260fd6020908152604091829020548251938452908301527fa7397a34065f9b23fc4f24516f72718d02d2ec2a5a58e2903ca1150bcc0fa10b910160405180910390a15050505050565b611f5a613cd5565b611f646000613f00565b565b7fc699869172ddb8efd1d3379b969fec6a7a23e5d91d2389d8b896c773708a240e3332868661010260009054906101000a90046001600160a01b03166001600160a01b0316631f68f20a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612003919061520b565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a0810184905260c0810183905260e001611501565b600061205586613244565b905061206c6001600160a01b038716338388613f52565b6040516304796e1f60e31b815260006004820181905260248201526001600160a01b038216906323cb70f890604401600060405180830381600087803b1580156120b557600080fd5b505af11580156120c9573d6000803e3d6000fd5b50505050670de0b6b3a7640000831061214757604051636c665a5560e01b81526001600160a01b038581166004830152602482018590528381166044830152821690636c665a5590606401600060405180830381600087803b15801561212e57600080fd5b505af1158015612142573d6000803e3d6000fd5b505050505b505050505050565b6001600160a01b03918216600090815260fd6020908152604080832093851683526006909301905220600101541690565b818161218c828261295c565b6121a85760405162461bcd60e51b8152600401610ba2906151b8565b6000839050336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221991906152c0565b6001600160a01b0316148061223657506001600160a01b03841633145b6122a85760405162461bcd60e51b815260206004820152603760248201527f3137336661206f6e6c7920746865206f776e65722063616e2072656d6f76652060448201527f7468652074726f76652066726f6d20746865206c6973740000000000000000006064820152608401610ba2565b806001600160a01b0316630dca59c16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a919061520b565b1561236e5760405162461bcd60e51b815260206004820152602e60248201527f3137336661207265706179207468652064656274206265666f72652072656d6f60448201526d76696e67207468652074726f766560901b6064820152608401610ba2565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d291906152c0565b604051634b20406760e11b8152600060048201529091506001600160a01b0383169063964080ce90602401600060405180830381600087803b15801561241757600080fd5b505af115801561242b573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03888116600483015260009350841691506370a0823190602401602060405180830381865afa158015612478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249c919061520b565b9050801561257d57826001600160a01b0316633c7034a3846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251591906152c0565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260006044820152606401600060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b505050505b6001600160a01b038716600090815260fd602052604090206125a2906003018761379d565b6126055760405162461bcd60e51b815260206004820152602e60248201527f31373366612074726f766520636f756c64206e6f742062652072656d6f76656460448201526d08199c9bdb481d1a19481b1a5cdd60921b6064820152608401610ba2565b60fe5460405163cfbd488560e01b81526001600160a01b0388811660048301529091169063cfbd488590602401600060405180830381600087803b15801561264c57600080fd5b505af1158015612660573d6000803e3d6000fd5b505050506001600160a01b03878116600090815260fd602052604090819020600201549051633518da6560e11b81528883166004820152911690636a31b4ca90602401600060405180830381600087803b1580156126bd57600080fd5b505af11580156126d1573d6000803e3d6000fd5b50506040516001600160a01b03891681527f56df94b000d5de0883743a2b4328178bc012bed334409fdace98ae5b36d6a91a9250602001905060405180910390a150505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278091906152c0565b9050600060ff60009054906101000a90046001600160a01b031690506000612872856001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612803919061520b565b60405163aa41911f60e01b81526001600160a01b03868116600483015285169063aa41911f90602401602060405180830381865afa158015612849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286d919061520b565b613fb2565b604051630241336f60e21b81526001600160a01b0385811660048301529192506128ea91841690630904cdbc90602401602060405180830381865afa1580156128bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e3919061520b565b829061413e565b95945050505050565b6128fb613cd5565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b6064611c7b670de0b6b3a76400006005615287565b6064612947670de0b6b3a76400006001615287565b612951919061529e565b611c8590600a615287565b6001600160a01b03918216600090815260fd60209081526040808320938516835260069093019052206001015416151590565b6064611c7b670de0b6b3a76400006001615287565b6129ac613cd5565b60c95460ff16156129bf57611f64614154565b611f646141a6565b610100546001600160a01b0316670de0b6b3a76400006129e6876116d8565b6001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a47919061520b565b11612aba5760405162461bcd60e51b815260206004820152603f60248201527f61376639392066697273742074726f766520697320756e646572636f6c6c617460448201527f6572616c6973656420616e64206d757374206265206c697175696461746564006064820152608401610ba2565b6040516370a0823160e01b815233600482015285906001600160a01b038316906370a0823190602401602060405180830381865afa158015612b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b24919061520b565b1015612b725760405162461bcd60e51b815260206004820152601f60248201527f613766393920696e73756666696369656e7420466961742062616c616e6365006044820152606401610ba2565b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa158015612bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be2919061520b565b1015612c455760405162461bcd60e51b815260206004820152602c60248201527f613766393920537461626c65436f696e206973206e6f7420617070726f76656460448201526b20666f7220666163746f727960a01b6064820152608401610ba2565b610102546001600160a01b0316612c5a614d9b565b6001600160a01b038816815260808101879052612c76886116d8565b6001600160a01b031660a0820152612c8e81876141e3565b9050612c9c818787876143ae565b606081015190915015611b0a5760408181015190516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b038416906323b872dd906064016020604051808303816000875af1158015612d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d269190615388565b50604081810151905163cbb9435960e01b815260048101919091526001600160a01b0383169063cbb94359906024016020604051808303816000875af1158015612d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d989190615388565b506000826001600160a01b0316631f68f20a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd919061520b565b90506000836001600160a01b031663cd16e7f7866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e72919061520b565b670de0b6b3a76400008660200151612e8a9190615287565b612e94919061529e565b6040518263ffffffff1660e01b8152600401612eb291815260200190565b6020604051808303816000875af1158015612ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef5919061520b565b90507f9485a67cba0aacb19621a77dcac069765b67928a650316d414b368154e673e248a84602001518560600151866080015186868960c00151604051612f7a97969594939291906001600160a01b039788168152602081019690965260408601949094526060850192909252608084015260a083015290911660c082015260e00190565b60405180910390a150505050505050505050565b6001600160a01b03918216600090815260fd6020908152604080832093851683526006909301905220541690565b60003390506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302591906152c0565b9050613031813361295c565b61307d5760405162461bcd60e51b815260206004820152601760248201527f6662666435206e6f7420612076616c69642074726f76650000000000000000006044820152606401610ba2565b82156130d1578361010360008282546130969190615375565b90915550506001600160a01b038116600090815260fd6020526040812060010180548692906130c6908490615375565b9091555061311a9050565b8361010360008282546130e491906153a5565b90915550506001600160a01b038116600090815260fd6020526040812060010180548692906131149084906153a5565b90915550505b61010354604080516001600160a01b038416815260208101929092527ff95b4220419afa063ecabab77276c7ed0a3c7175e2f140babd24e56208ce58a29101611501565b604080513381526001600160a01b0385166020820152908101839052606081018290527f91aae5057d63fa752409cbc2eaaebd6e31f0beac641e40f0e762b135a62e8479906080016118a3565b6131b3613cd5565b61010280546001600160a01b0319166001600160a01b038381169182179092556101005460405163095ea7b360e01b8152600481019290925260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015613220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190615388565b60fe546000906001600160a01b0316806132aa5760405162461bcd60e51b815260206004820152602160248201527f36366331302074686520746f6b656e206f776e6572206d7573742062652073656044820152601d60fa1b6064820152608401610ba2565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331691906152c0565b6001600160a01b0316146133925760405162461bcd60e51b815260206004820152603760248201527f36366331302074686520746f6b656e206f776e65722773206f776e6572206d7560448201527f7374206265207468652074726f766520666163746f72790000000000000000006064820152608401610ba2565b60ff54604051639878cbb360e01b81526001600160a01b0385811660048301526000921690639878cbb390602401602060405180830381865afa1580156133dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340191906152c0565b6001600160a01b0316036134665760405162461bcd60e51b815260206004820152602660248201527f36366331302074686520746f6b656e2070726963652066656564206d757374206044820152651899481cd95d60d21b6064820152608401610ba2565b61010454604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81526bffffffffffffffffffffffff19606083901b1660148201526e5af43d82803e903d91602b57fd5bf360881b60288201526000916001600160a01b03169060378184f09250506001600160a01b03821661351c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610ba2565b60405163485cc95560e01b81526001600160a01b038681166004830152336024830152929450849283169063485cc95590604401600060405180830381600087803b15801561356a57600080fd5b505af115801561357e573d6000803e3d6000fd5b5050506001600160a01b038616600090815260fd602052604081206135aa92506003019084908061398c565b6136095760405162461bcd60e51b815260206004820152602a60248201527f36366331302074726f766520636f756c64206e6f7420626520616464656420746044820152691bc81d1a19481b1a5cdd60b21b6064820152608401610ba2565b6001600160a01b03858116600090815260fd602052604090819020600201549051630fe1df2960e21b81528483166004820152911690633f877ca490602401600060405180830381600087803b15801561366257600080fd5b505af1158015613676573d6000803e3d6000fd5b5050604051634c1d96ab60e11b81526001600160a01b0385811660048301528616925063983b2d569150602401600060405180830381600087803b1580156136bd57600080fd5b505af11580156136d1573d6000803e3d6000fd5b5050604080516001600160a01b03868116825289166020820152338183015290517fd73cf983c0299e0b942c23588e67dbf06af623c7a611345b2fa509a38c6c1ed09350908190036060019150a1505050919050565b61372f613cd5565b6001600160a01b0381166137945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ba2565b6113d081613f00565b6001600160a01b0380821660009081526003840160209081526040808320815180830190925280548516825260010154909316908301819052909190156139825783546001600160a01b038481169116148015613809575060018401546001600160a01b038481169116145b1561382e5783546001600160a01b03199081168555600185018054909116905561392e565b60018401546001600160a01b039081169084160361388c576020808201516001600160a01b0316600081815260038701909252604090912080546001600160a01b03199081168317909155600186018054909116909117905561392e565b83546001600160a01b03908116908416036138e057805184546001600160a01b039091166001600160a01b03199182168117865560008181526003870160205260409020600101805490921617905561392e565b60208082015182516001600160a01b0391821660008181526003890190945260408085208054949093166001600160a01b031994851681179093559184529220600101805490911690911790555b6001600160a01b0383166000908152600385016020526040902080546001600160a01b03199081168255600191820180549091169055600285015461397391906153a5565b60028501555060019050611173565b5060009392505050565b60006001600160a01b03831615806139c257506001600160a01b0383811660009081526003870160205260409020600101541615155b613a0e5760405162461bcd60e51b815260206004820152601f60248201527f3739643364205f726566206e6569746865722076616c6964206e6f72203078006044820152606401610ba2565b6001600160a01b03808516600090815260038701602052604090208054909116613cc75785546001600160a01b0316613a815780546001600160a01b0386166001600160a01b03199182168117835560018084018054841683179055880180548316821790558754909116178655613ca8565b828015613aae57506001600160a01b0384161580613aae575060018601546001600160a01b038581169116145b15613b0c57600180870180546001600160a01b03908116600081815260038b01602052604090208054928a166001600160a01b0319938416811790915585548316811786559385018054831690911790558154169091179055613ca8565b82158015613b3757506001600160a01b0384161580613b37575085546001600160a01b038581169116145b15613b935785546001600160a01b0390811660008181526003890160205260409020600190810180546001600160a01b0319908116948a1694851790915584548116909217845583018054821683179055875416178655613ca8565b6001600160a01b038085166000908152600388016020908152604091829020825180840190935280548416835260010154909216918101919091528315613c3b57805182546001600160a01b039182166001600160a01b0319918216178455600180850180548985169084168117909155600090815260038b01602052604080822080548c871690861681179091558651909516825290200180549091169091179055613ca6565b81546001600160a01b038087166001600160a01b031992831681178555602080850180516001808901805492871692881692909217909155600093845260038d01909252604080842090920180548c8616908716811790915590519093168252902080549092161790555b505b6002860154613cb8906001615375565b60028701555060019050613ccd565b60009150505b949350505050565b6097546001600160a01b03163314611f645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ba2565b6113d0613cd5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613d6a576118ac836145da565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613dc4575060408051601f3d908101601f19168201909252613dc19181019061520b565b60015b613e275760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610ba2565b6000805160206154448339815191528114613e965760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610ba2565b506118ac838383614676565b600054610100900460ff16613ec95760405162461bcd60e51b8152600401610ba2906153b8565b611f6461469b565b600054610100900460ff16613ef85760405162461bcd60e51b8152600401610ba2906153b8565b611f646146cb565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613fac9085906146fe565b50505050565b600080613fd3613fc384600f615287565b613fcd85876153a5565b9061413e565b9050600083670de0b6b3a764000081613fec8580615287565b613ff6919061529e565b6140009190615287565b61400a919061529e565b90506000614021670de0b6b3a7640000602c615287565b61402c86602d615287565b61403691906153a5565b9050600081670de0b6b3a76400006064614051826001615287565b61405b919061529e565b61406690600a615287565b6140709190615287565b61407a919061529e565b905060006064614093670de0b6b3a76400006001615287565b61409d919061529e565b82116140d357600260646140ba670de0b6b3a76400006001615287565b6140c4919061529e565b6140ce919061529e565b614108565b600260646140ea670de0b6b3a76400006001615287565b6140f4919061529e565b6140fe919061529e565b61410890836153a5565b9050808361411e670de0b6b3a764000087615287565b614128919061529e565b6141329190615375565b98975050505050505050565b600081831061414d5781611170565b5090919050565b61415c6147d0565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6141ae614819565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586141893390565b6141eb614d9b565b60a08301516101025460408051630fb4790560e11b815290516000926001600160a01b031691631f68f20a9160048083019260209291908290030181865afa15801561423b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425f919061520b565b61426c8660a0015161271b565b6142769190615375565b905060006142888287608001516116b2565b90505b826001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142ed919061520b565b600010801561435d575080836001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435a919061520b565b11155b801561436857508482105b156143a457614377868361485f565b95506143868660a0015161271b565b91506143968287608001516116b2565b90508560a00151925061428b565b5093949350505050565b6143b6614d9b565b60a08501516101025460408051630fb4790560e11b815290516000926001600160a01b031691631f68f20a9160048083019260209291908290030181865afa158015614406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061442a919061520b565b6144378860a0015161271b565b6144419190615375565b905084826001600160a01b031663d91d2f606040518163ffffffff1660e01b8152600401602060405180830381865afa158015614482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a6919061520b565b1480156144b257508581105b156145cf5760006145316144ca838a608001516116b2565b846001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452c919061520b565b61413e565b9050600080614546338b60a00151858a614925565b91509150818a60200181815161455c9190615375565b905250600061456b8584611151565b9050808b60400181815161457f9190615375565b90525061458c8184615375565b8b60800181815161459d91906153a5565b90525060608b0180518391906145b4908390615375565b905250505060a08901516001600160a01b031660c08a015250505b509495945050505050565b6001600160a01b0381163b6146475760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610ba2565b60008051602061544483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61467f83614a2e565b60008251118061468c5750805b156118ac57613fac8383614a6e565b600054610100900460ff166146c25760405162461bcd60e51b8152600401610ba2906153b8565b611f6433613f00565b600054610100900460ff166146f25760405162461bcd60e51b8152600401610ba2906153b8565b60c9805460ff19169055565b6000614753826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b599092919063ffffffff16565b8051909150156118ac57808060200190518101906147719190615388565b6118ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ba2565b60c95460ff16611f645760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ba2565b60c95460ff1615611f645760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610ba2565b614867614d9b565b600061487b84600001518560a0015161214f565b905060008061488e338760a00151614b72565b9150915081866020018181516148a49190615375565b90525060006148b38684611151565b905080876040018181516148c79190615375565b9052506148d48184615375565b876080018181516148e591906153a5565b9052506060870180518391906148fc908390615375565b90525050505060a0840180516001600160a01b0390811660c08701529190911690525090919050565b610100546040516323b872dd60e01b81526001600160a01b03868116600483015280861660248301526044820185905260009283928792909116906323b872dd906064016020604051808303816000875af1158015614988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ac9190615388565b5060405163bba06f2760e01b81526001600160a01b038881166004830152858116602483015282169063bba06f279060440160408051808303816000875af11580156149fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a209190615403565b925092505094509492505050565b614a37816145da565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614ad65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ba2565b600080846001600160a01b031684604051614af19190615427565b600060405180830381855af49150503d8060008114614b2c576040519150601f19603f3d011682016040523d82523d6000602084013e614b31565b606091505b50915091506128ea828260405180606001604052806027815260200161546460279139614bee565b6060614b688484600085614c07565b90505b9392505050565b600080614be38484856001600160a01b0316633746403c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bdc919061520b565b6000614925565b915091509250929050565b60608315614bfd575081614b6b565b614b6b8383614d38565b606082471015614c685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ba2565b6001600160a01b0385163b614cbf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ba2565b600080866001600160a01b03168587604051614cdb9190615427565b60006040518083038185875af1925050503d8060008114614d18576040519150601f19603f3d011682016040523d82523d6000602084013e614d1d565b606091505b5091509150614d2d828286614d62565b979650505050505050565b815115614d485781518083602001fd5b8060405162461bcd60e51b8152600401610ba29190614e76565b60608315614d71575081614b6b565b825115614d815782518084602001fd5b8160405162461bcd60e51b8152600401610ba29190614e76565b60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6001600160a01b03811681146113d057600080fd5b60008060408385031215614e2c57600080fd5b8235614e3781614e04565b91506020830135614e4781614e04565b809150509250929050565b60005b83811015614e6d578181015183820152602001614e55565b50506000910152565b6020815260008251806020840152614e95816040850160208701614e52565b601f01601f19169190910160400192915050565b60008060408385031215614ebc57600080fd5b50508035926020909101359150565b600060208284031215614edd57600080fd5b8135614b6b81614e04565b60008060008060808587031215614efe57600080fd5b8435614f0981614e04565b93506020850135614f1981614e04565b92506040850135614f2981614e04565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215614f6257600080fd5b8235614f6d81614e04565b9150602083013567ffffffffffffffff80821115614f8a57600080fd5b818501915085601f830112614f9e57600080fd5b813581811115614fb057614fb0614f39565b604051601f8201601f19908116603f01168101908382118183101715614fd857614fd8614f39565b81604052828152886020848701011115614ff157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561502557600080fd5b5035919050565b80151581146113d057600080fd5b60008060006060848603121561504f57600080fd5b833561505a81614e04565b92506020840135915060408401356150718161502c565b809150509250925092565b6000806000806080858703121561509257600080fd5b843561509d81614e04565b966020860135965060408601359560600135945092505050565b600080600080600060a086880312156150cf57600080fd5b85356150da81614e04565b94506020860135935060408601356150f181614e04565b925060608601359150608086013561510881614e04565b809150509295509295909350565b600080600080600060a0868803121561512e57600080fd5b853561513981614e04565b9450602086013593506040860135925060608601359150608086013561510881614e04565b6000806040838503121561517157600080fd5b823591506020830135614e478161502c565b60008060006060848603121561519857600080fd5b83356151a381614e04565b95602085013595506040909401359392505050565b60208082526033908201527f6639666163207468652074726f766520686173206e6f74206265656e20637265604082015272617465642062792074686520666163746f727960681b606082015260800190565b60006020828403121561521d57600080fd5b5051919050565b6020808252602d908201527f33613636392074726f766520636f756c64206e6f7420626520696e736572746560408201526c19081a5b881d1a19481b1a5cdd609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761117357611173615271565b6000826152bb57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156152d257600080fd5b8151614b6b81614e04565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082018082111561117357611173615271565b60006020828403121561539a57600080fd5b8151614b6b8161502c565b8181038181111561117357611173615271565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000806040838503121561541657600080fd5b505080516020909101519092909150565b60008251615439818460208701614e52565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203479665d2d9718757af7bd5143ee5544d9f41be2824595d1c8bc823a5accc10c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "containsTrove(address,address)": {
        "details": "returns and checks if such trove exists for this token"
      },
      "createTrove(address)": {
        "details": "creates a trove if the token is supported",
        "params": {
          "_token": "any supported token address"
        }
      },
      "createTroveAndBorrow(address,uint256,address,uint256,address)": {
        "details": "creates a trove with collateral and borrows from it",
        "params": {
          "_borrowAmount": "the value of the minting",
          "_collateralAmount": "a positive amount of collateral to transfer from the sender's account or zero",
          "_nextTrove": "is the trove that we think will be the next one in the list. This might be off in case there were some other list changing transactions",
          "_recipient": "is the address to which the newly minted tokens will be transferred",
          "_token": "any supported token address"
        }
      },
      "emitLiquidationEvent(address,address,address,uint256)": {
        "details": "to emit Liquidation event, to be called from a trove after liquidation.",
        "params": {
          "_token": "address of token",
          "_trove": "address of the Trove",
          "collateral": "uint256 amount of collateral",
          "stabilityPoolLiquidation": "address of StabilityPool, 0x0 if Community LiquidationPool"
        }
      },
      "emitTroveCollateralUpdate(address,uint256,uint256)": {
        "details": "to emit Collateral update event, to be called from trove",
        "params": {
          "_newAmount": "new trove's Collateral value",
          "_newCollateralization": "new trove's collateralization value",
          "_token": "address of token"
        }
      },
      "emitTroveDebtUpdate(address,uint256,uint256,uint256)": {
        "details": "to emit Trove's debt update event, to be called from trove",
        "params": {
          "_newAmount": "new trove's debt value",
          "_newCollateralization": "new trove's collateralization value",
          "_token": "address of token"
        }
      },
      "firstTrove(address)": {
        "details": "returns the first trove by minimal collaterization ratio"
      },
      "getBorrowingFee(uint256)": {
        "details": "returns fee from borrowing the amount"
      },
      "getRedemptionAmount(uint256,uint256)": {
        "details": "returns amount to be used in redemption excluding fee,"
      },
      "getRedemptionFee(uint256,uint256)": {
        "details": "returns fee from redeeming the amount"
      },
      "getRedemptionFeeRatio(address)": {
        "details": "returns fee from redeeming the amount"
      },
      "increaseCollateralNative(address,address)": {
        "details": "deposits native token into trove after wrapping the ETH (EWT, AVAX, etc) into WETH (WEWT, WAVAX, etc)",
        "params": {
          "_newNextTrove": "hint for next trove position",
          "_trove": "tove to be deposited in"
        }
      },
      "insertTrove(address,address)": {
        "details": "insert a trove in the sorted list of troves. the troves must be sorted by collateralisation ratio CR the sender must be the trove which will be inserted in the list",
        "params": {
          "_newNextTrove": "is the trove before which the trove will be added"
        }
      },
      "lastTrove(address)": {
        "details": "returns the last trove by maximum collaterization ratio"
      },
      "liquidationPool(address)": {
        "details": "returns contract address of LiquidationPool for specific token"
      },
      "nextTrove(address,address)": {
        "details": "returns the next trove by collaterization ratio"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "prevTrove(address,address)": {
        "details": "returns the previous trove by collaterization ratio"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemStableCoinForCollateral(address,uint256,uint256,uint256,address)": {
        "details": "redeem desired StableCoin amount for desired collateral tokens",
        "params": {
          "_lastTroveCurrentICR": "ICR of the last trove to be redeemed, if matches then the hint is working and it redeems",
          "_lastTroveNewPositionHint": "hint for the of the nextNewTrove after redemption for the latest trove",
          "_maxRate": "is max fee (in % with 1e18 precision) allowed to pay",
          "_stableAmount": "the desired amount of StableCoin to pay for redemption"
        }
      },
      "removeTrove(address,address)": {
        "details": "remove a trove from the list and send any remaining token balance to the owner",
        "params": {
          "_trove": "is the trove which will be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setArbitragePool(address)": {
        "details": "sets contract address of ArbitragePool"
      },
      "setFeeRecipient(address)": {
        "details": "sets contract address of FeeRecipient"
      },
      "setLiquidationPool(address,address)": {
        "details": "sets contract address of LiquidationPool for specific token"
      },
      "setStabilityPool(address)": {
        "details": "sets contract address of StabilityPool"
      },
      "setTokenOwner()": {
        "details": "sets address of the contract for stableCoin issuance"
      },
      "setTokenPriceFeed(address)": {
        "details": "sets contract address of TokenPriceFeed"
      },
      "setWETH(address,address)": {
        "details": "sets contract address of Wrapped native token, along with liquidationPool"
      },
      "togglePause()": {
        "details": "toggles the pause state of the contract if the contract is paused borrowing is disabled and liquidation with Stability Pool is impossible (Community liquidations still allowed)"
      },
      "tokenCollateralization(address)": {
        "details": "returns total collateral ratio averaged between troves for specific token"
      },
      "totalCollateral(address)": {
        "details": "returns total collateral among all troves for specific token"
      },
      "totalDebtForToken(address)": {
        "details": "returns total debt among all troves for specific token"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTokenOwnerOwnership(address)": {
        "details": "transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters"
      },
      "transferTokenOwnership(address)": {
        "details": "transfers contract ownership this function is used when a new TroveFactory version is deployed and the same tokens are used. We transfer the ownership of the TokenOwner contract and the new TroveFactory is able to add minters"
      },
      "troveCount(address)": {
        "details": "returns the number of troves for specific token"
      },
      "updateTotalCollateral(address,uint256,bool)": {
        "details": "function to be called from trove to update total collateral value of all troves of this tokens",
        "params": {
          "_increase": "bool that indicates \"+\" or \"-\" operation"
        }
      },
      "updateTotalDebt(uint256,bool)": {
        "details": "function to be called from trove to change totalDebt",
        "params": {
          "_borrow": "indicates if it is borrow or repay/liquidatin"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 630,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 633,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 612,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 927,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1453,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 949,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 1054,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15203,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IStabilityPoolBase)9135"
      },
      {
        "astId": 15206,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "arbitragePool",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 15211,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "_troves",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_struct(TroveList)15181_storage)"
      },
      {
        "astId": 15215,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "tokenOwner",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IMintableTokenOwner)8974"
      },
      {
        "astId": 15219,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "tokenToPriceFeed",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(ITokenPriceFeed)9242"
      },
      {
        "astId": 15223,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "stableCoin",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IMintableToken)8938"
      },
      {
        "astId": 15226,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "WETHContract",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IWETH)9637"
      },
      {
        "astId": 15230,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IFeeRecipient)8858"
      },
      {
        "astId": 15233,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "totalDebt",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 15235,
        "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
        "label": "troveImplementation",
        "offset": 0,
        "slot": "260",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeRecipient)8858": {
        "encoding": "inplace",
        "label": "contract IFeeRecipient",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidationPool)8897": {
        "encoding": "inplace",
        "label": "contract ILiquidationPool",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)8938": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableTokenOwner)8974": {
        "encoding": "inplace",
        "label": "contract IMintableTokenOwner",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPoolBase)9135": {
        "encoding": "inplace",
        "label": "contract IStabilityPoolBase",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenPriceFeed)9242": {
        "encoding": "inplace",
        "label": "contract ITokenPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)9637": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(EntryLink)19561_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LinkedAddressList.EntryLink)",
        "numberOfBytes": "32",
        "value": "t_struct(EntryLink)19561_storage"
      },
      "t_mapping(t_address,t_struct(TroveList)15181_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveFactory.TroveList)",
        "numberOfBytes": "32",
        "value": "t_struct(TroveList)15181_storage"
      },
      "t_struct(EntryLink)19561_storage": {
        "encoding": "inplace",
        "label": "struct LinkedAddressList.EntryLink",
        "members": [
          {
            "astId": 19558,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19560,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(List)19573_storage": {
        "encoding": "inplace",
        "label": "struct LinkedAddressList.List",
        "members": [
          {
            "astId": 19563,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_last",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19565,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_first",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19567,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19572,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "_values",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(EntryLink)19561_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TroveList)15181_storage": {
        "encoding": "inplace",
        "label": "struct TroveFactory.TroveList",
        "members": [
          {
            "astId": 15172,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "totalCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15174,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "totalDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15177,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "liquidationPool",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ILiquidationPool)8897"
          },
          {
            "astId": 15180,
            "contract": "contracts/original-trove-factory.sol:OriginalTroveFactory",
            "label": "list",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(List)19573_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}