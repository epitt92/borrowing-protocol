{
  "address": "0x78F07Fe87051f8CA8Ba018D6056bC2ff0415C283",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMinter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "revokeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7e7ec5edb5c2ab80b8a5e20e52ece060cc047f852affd705a8a4454080890b1",
  "receipt": {
    "to": null,
    "from": "0xC74BEd4d5b1110458d954e772272Bc05859b81bD",
    "contractAddress": "0x78F07Fe87051f8CA8Ba018D6056bC2ff0415C283",
    "transactionIndex": 72,
    "gasUsed": "412422",
    "logsBloom": "0x
    "blockHash": "0x7c87cdbfa249fefa76dc5137f1939065be805466c3aec0da34df0bc65b9789df",
    "transactionHash": "0xc7e7ec5edb5c2ab80b8a5e20e52ece060cc047f852affd705a8a4454080890b1",
    "logs": [
      {
        "transactionIndex": 72,
        "blockNumber": 36542591,
        "transactionHash": "0xc7e7ec5edb5c2ab80b8a5e20e52ece060cc047f852affd705a8a4454080890b1",
        "address": "0x78F07Fe87051f8CA8Ba018D6056bC2ff0415C283",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd"
        ],
        "data": "0x",
        "logIndex": 401,
        "blockHash": "0x7c87cdbfa249fefa76dc5137f1939065be805466c3aec0da34df0bc65b9789df"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 36542591,
        "transactionHash": "0xc7e7ec5edb5c2ab80b8a5e20e52ece060cc047f852affd705a8a4454080890b1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c74bed4d5b1110458d954e772272bc05859b81bd",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000039b900426b28a60000000000000000000000000000000000000000000000077cfd9396e9334ebe000000000000000000000000000000000000000000005176611530b8190b9d830000000000000000000000000000000000000000000000077cc3da96a6c82618000000000000000000000000000000000000000000005176614ee9b85b76c629",
        "logIndex": 402,
        "blockHash": "0x7c87cdbfa249fefa76dc5137f1939065be805466c3aec0da34df0bc65b9789df"
      }
    ],
    "blockNumber": 36542591,
    "cumulativeGasUsed": "24129705",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x338Eb4d394a4327E5dB80d08628fa56EA2FD4B81"
  ],
  "numDeployments": 1,
  "solcInputHash": "bf3d4309507180ad8123e30dbce5d19e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMinter(address)\":{\"details\":\"adds new minter\",\"params\":{\"_newMinter\":\"address of new minter\"}},\"mint(address,uint256)\":{\"details\":\"mints tokens to the recipient, to be called from owner\",\"params\":{\"_amount\":\"amount to be minted\",\"_recipient\":\"address to mint\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeMinter(address)\":{\"details\":\"removes minter from minter list\",\"params\":{\"_minter\":\"address of the minter\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"implements owner of the MintableToken contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mintable-token-owner.sol\":\"MintableTokenOwner\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0xe1e7e2fa917ba94b2961fd382bd396113396e6a2babc3e84a91fe0b582ca2e2b\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x955ead6c2a923863ba607a752e4a9924ab4fe4d07dd6cf09e5f68d0bece11049\",\"license\":\"MIT\"},\"contracts/mintable-token-owner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\n\\n/// @title implements owner of the MintableToken contract\\ncontract MintableTokenOwner is Ownable {\\n  IMintableToken public immutable token;\\n  mapping(address => bool) public minters;\\n\\n  event MinterAdded(address newMinter);\\n\\n  // solhint-disable-next-line func-visibility\\n  constructor(address _token) Ownable() {\\n    token = IMintableToken(_token);\\n  }\\n\\n  /// @dev mints tokens to the recipient, to be called from owner\\n  /// @param _recipient address to mint\\n  /// @param _amount amount to be minted\\n  function mint(address _recipient, uint256 _amount) public {\\n    require(minters[msg.sender], \\\"MintableTokenOwner:mint: the sender must be in the minters list\\\");\\n    token.mint(_recipient, _amount);\\n  }\\n\\n  function transferTokenOwnership(address _newOwner) public onlyOwner {\\n    token.transferOwnership(_newOwner);\\n  }\\n\\n  /// @dev adds new minter\\n  /// @param _newMinter address of new minter\\n  function addMinter(address _newMinter) public onlyOwner {\\n    minters[_newMinter] = true;\\n    emit MinterAdded(_newMinter);\\n  }\\n\\n  /// @dev removes minter from minter list\\n  /// @param _minter address of the minter\\n  function revokeMinter(address _minter) public onlyOwner {\\n    minters[_minter] = false;\\n  }\\n}\\n\",\"keccak256\":\"0x8b42b48cd7a48de808492723ef893895238021ef538fdfddfaa1c7c5cb76f659\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516106f73803806106f783398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b6080516106056100f260003960008181610163015281816101d701526102e101526106056000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063983b2d5611610066578063983b2d56146100f2578063cfbd488514610105578063f2fde38b14610118578063f46eccc41461012b578063fc0c546a1461015e57600080fd5b806321e6b53d1461009857806340c10f19146100ad578063715018a6146100c05780638da5cb5b146100c8575b600080fd5b6100ab6100a636600461054e565b610185565b005b6100ab6100bb366004610570565b610236565b6100ab610341565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab61010036600461054e565b610377565b6100ab61011336600461054e565b6103fc565b6100ab61012636600461054e565b610447565b61014e61013936600461054e565b60016020526000908152604090205460ff1681565b60405190151581526020016100e9565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146101b85760405162461bcd60e51b81526004016101af9061059a565b60405180910390fd5b60405163f2fde38b60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f2fde38b90602401600060405180830381600087803b15801561021b57600080fd5b505af115801561022f573d6000803e3d6000fd5b5050505050565b3360009081526001602052604090205460ff166102bb5760405162461bcd60e51b815260206004820152603f60248201527f4d696e7461626c65546f6b656e4f776e65723a6d696e743a207468652073656e60448201527f646572206d75737420626520696e20746865206d696e74657273206c6973740060648201526084016101af565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461036b5760405162461bcd60e51b81526004016101af9061059a565b61037560006104e2565b565b6000546001600160a01b031633146103a15760405162461bcd60e51b81526004016101af9061059a565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6910160405180910390a150565b6000546001600160a01b031633146104265760405162461bcd60e51b81526004016101af9061059a565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146104715760405162461bcd60e51b81526004016101af9061059a565b6001600160a01b0381166104d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101af565b6104df816104e2565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461054957600080fd5b919050565b60006020828403121561056057600080fd5b61056982610532565b9392505050565b6000806040838503121561058357600080fd5b61058c83610532565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220a7568641f483b2c494f4142a673210ff895ef00edda54999bdd54e067c1ff5a564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063983b2d5611610066578063983b2d56146100f2578063cfbd488514610105578063f2fde38b14610118578063f46eccc41461012b578063fc0c546a1461015e57600080fd5b806321e6b53d1461009857806340c10f19146100ad578063715018a6146100c05780638da5cb5b146100c8575b600080fd5b6100ab6100a636600461054e565b610185565b005b6100ab6100bb366004610570565b610236565b6100ab610341565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab61010036600461054e565b610377565b6100ab61011336600461054e565b6103fc565b6100ab61012636600461054e565b610447565b61014e61013936600461054e565b60016020526000908152604090205460ff1681565b60405190151581526020016100e9565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146101b85760405162461bcd60e51b81526004016101af9061059a565b60405180910390fd5b60405163f2fde38b60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f2fde38b90602401600060405180830381600087803b15801561021b57600080fd5b505af115801561022f573d6000803e3d6000fd5b5050505050565b3360009081526001602052604090205460ff166102bb5760405162461bcd60e51b815260206004820152603f60248201527f4d696e7461626c65546f6b656e4f776e65723a6d696e743a207468652073656e60448201527f646572206d75737420626520696e20746865206d696e74657273206c6973740060648201526084016101af565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461036b5760405162461bcd60e51b81526004016101af9061059a565b61037560006104e2565b565b6000546001600160a01b031633146103a15760405162461bcd60e51b81526004016101af9061059a565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6910160405180910390a150565b6000546001600160a01b031633146104265760405162461bcd60e51b81526004016101af9061059a565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146104715760405162461bcd60e51b81526004016101af9061059a565b6001600160a01b0381166104d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101af565b6104df816104e2565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461054957600080fd5b919050565b60006020828403121561056057600080fd5b61056982610532565b9392505050565b6000806040838503121561058357600080fd5b61058c83610532565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220a7568641f483b2c494f4142a673210ff895ef00edda54999bdd54e067c1ff5a564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMinter(address)": {
        "details": "adds new minter",
        "params": {
          "_newMinter": "address of new minter"
        }
      },
      "mint(address,uint256)": {
        "details": "mints tokens to the recipient, to be called from owner",
        "params": {
          "_amount": "amount to be minted",
          "_recipient": "address to mint"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeMinter(address)": {
        "details": "removes minter from minter list",
        "params": {
          "_minter": "address of the minter"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "implements owner of the MintableToken contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2054,
        "contract": "contracts/mintable-token-owner.sol:MintableTokenOwner",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9858,
        "contract": "contracts/mintable-token-owner.sol:MintableTokenOwner",
        "label": "minters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}